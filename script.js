/* ==========================================
   –õ–û–ì–û–í–û –ù–û–í–ï–õ–õ - –ü–û–õ–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ + –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è + –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
   ========================================== */

// ==========================================
// –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// ==========================================

const API_BASE = 'https://script.google.com/macros/s/AKfycbx9c1jATu23yjI0HWRQI-uNqKVwHorthbmwHHVyBK5W8ipMUUXZUxwuagkh0GPJU2p4Aw/exec';

// ==========================================
// ‚ú® –•–†–ê–ù–ò–õ–ò–©–ï –¢–ï–ú –î–õ–Ø –†–û–õ–ï–ô
// ==========================================
const ROLE_THEMES = {
    'default': { // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–µ–º–∞
        owner: '–í–ª–∞–¥–µ–ª–µ—Ü',
        admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        creator: '–°–æ–∑–¥–∞—Ç–µ–ª—å',
        reader: '–ß–∏—Ç–∞—Ç–µ–ª—å'
    },
    '—Å—è–Ω—å—Å—è': { // –¢–µ–º–∞ –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏–∏
        owner: '–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å –°–µ–∫—Ç—ã',
        admin: '–°—Ç–∞—Ä–µ–π—à–∏–Ω–∞ –ü–∏–∫–∞ –ù–∞–∫–∞–∑–∞–Ω–∏–π',
        creator: '–£—á–µ–Ω–∏–∫ –ü–∏–∫–∞ –ò—Å–∫—É—Å—Å—Ç–≤',
        reader: '–£—á–µ–Ω–∏–∫'
    },
    '—Ñ—ç–Ω—Ç–µ–∑–∏': { // –¢–µ–º–∞ —Ñ—ç–Ω—Ç–µ–∑–∏
        owner: '–í–ª–∞–¥—ã–∫–∞',
        admin: '–•—Ä–∞–Ω–∏—Ç–µ–ª—å',
        creator: '–õ–µ—Ç–æ–ø–∏—Å–µ—Ü',
        reader: '–°—Ç—Ä–∞–Ω–Ω–∏–∫'
    },
    '–¥–æ—Å—Ç–æ–ø–æ—á—Ç–µ–Ω–Ω—ã–π': { // –¢–µ–º–∞ "–≠—Ç–æ—Ç –î–æ—Å—Ç–æ–ø–æ—á—Ç–µ–Ω–Ω—ã–π"
        owner: '–≠—Ç–æ—Ç –î–æ—Å—Ç–æ–ø–æ—á—Ç–µ–Ω–Ω—ã–π',
        admin: '–ü—Ä–∞–≤–∞—è –†—É–∫–∞',
        creator: '–í–µ—Ä–Ω—ã–π –°–ª—É–≥–∞',
        reader: '–ü—Ä–æ—Å–∏—Ç–µ–ª—å'
    },
    '—Å–º–µ—à–Ω–∞—è': { // –°–º–µ—à–Ω–∞—è —Ç–µ–º–∞
        owner: '–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ö–æ–ø–∏–ø–∞—Å—Ç—ã',
        admin: '–ú–µ—Å—Ç–Ω—ã–π –¶–µ–Ω–∑–æ—Ä',
        creator: '–ì—Ä–∞—Ñ–æ–º–∞–Ω',
        reader: '–ó–∞–≥–ª—è–Ω—É–ª –Ω–∞ –æ–≥–æ–Ω—ë–∫'
    },
};

// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const STATE = {
    novels: [],
    filteredNovels: [],
    config: {},
    genresAndTags: { genres: [], tags: [] },
    currentUser: null,
    currentPage: 1,
    itemsPerPage: 12,
    totalPages: 1,
    isInitialized: false,
    isSubmittingNovel: false,
    currentFilters: {
        language: '',
        era: '',
        perspective: '',
        orientation: '',
        originalStatus: '', // –ù–æ–≤–æ–µ –∏–º—è
        translationStatus: '', // –ù–æ–≤–æ–µ –∏–º—è
        chaptersMin: null,
        chaptersMax: null,
        wordsMin: null,
        wordsMax: null,
        includeGenres: [], // –ñ–∞–Ω—Ä—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
        includeGenreMode: 'any', // 'any' –∏–ª–∏ 'all'
        excludeGenres: [], // –ñ–∞–Ω—Ä—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        excludeGenreMode: 'any', // 'any' (—Ä–µ–∂–∏–º 'all' –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–¥–∫–æ –Ω—É–∂–µ–Ω)
        includeTags: [], // –¢–µ–≥–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
        includeTagMode: 'any', // 'any' –∏–ª–∏ 'all'
        excludeTags: [], // –¢–µ–≥–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        excludeTagMode: 'any', // 'any'
    },
    viewMode: 'grid', // grid –∏–ª–∏ list
    sortBy: 'updated', // updated, title, author, chapters
    sortOrder: 'desc',
    currentRoleTheme: 'default',
    isChapterEditMode: false,
    cache: {
        data: {},
        ttl: 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç
    }
};

let currentThemePalette = localStorage.getItem('novel-library-theme') || 'classic';
let currentThemeMode = localStorage.getItem('novel-library-mode') || 'light';
let chapterSortOrder = 'asc';
let chapterNumberCheckTimeout = null;
let lastCheckedNumber = null;
let isRendering = false;
let tooltipElement = null
let currentScrollHandler = null;

console.log('üì¶ Script.js –∑–∞–≥—Ä—É–∂–µ–Ω - –ü–û–õ–ù–ê–Ø –≤–µ—Ä—Å–∏—è');

// –ó–∞—â–∏—Ç–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è
const PROTECTED_IDS = ['app', 'app-container', 'breadcrumbs'];
const originalRemove = Element.prototype.remove;
Element.prototype.remove = function() {
    if (PROTECTED_IDS.includes(this.id)) {
        console.warn('‚ö†Ô∏è –ó–∞—â–∏—Ç–∞: –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å', this.id);
        return;
    }
    originalRemove.call(this);
};

// ==========================================
// API –ö–û–ú–ú–£–ù–ò–ö–ê–¶–ò–Ø - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø
// ==========================================

// ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ò –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• (GET-–ó–ê–ü–†–û–°–´)
function apiRequest(action, data = {}, forceFresh = false) {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const sessionToken = localStorage.getItem('session_token');
    if (sessionToken) {
        data.session_token = sessionToken;
    }

    const cacheKey = `${action}_${JSON.stringify(data)}`;
    
// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à, –ù–û –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
    if (!forceFresh && STATE.cache.data[cacheKey]) {
        const cached = STATE.cache.data[cacheKey];
        if (Date.now() - cached.timestamp < STATE.cache.ttl) {
            console.log(`üíæ –ö—ç—à: ${action}`);
            return Promise.resolve(cached.data);
        }
    }
    
    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ Promise –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è async/await
    return new Promise((resolve, reject) => {
        // –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –Ω–∞—à–µ–≥–æ "–ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞"
        const callbackName = 'jsonp_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const params = new URLSearchParams({ action, callback: callbackName, ...data });
        const script = document.createElement('script');
        script.src = `${API_BASE}?${params}`;
        
        // –¢–∞–π–º–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
        const timeout = setTimeout(() => {
            cleanup();
            reject(new Error('Timeout: —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'));
        }, 30000); // 30 —Å–µ–∫—É–Ω–¥
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        const cleanup = () => {
            clearTimeout(timeout);
            if (script.parentNode) document.head.removeChild(script);
            delete window[callbackName]; // –£–¥–∞–ª—è–µ–º "–ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫"
        };
        
        // –°–æ–∑–¥–∞—ë–º —Ç–æ—Ç —Å–∞–º—ã–π "–ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫" (–≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
        window[callbackName] = (response) => {
            cleanup();
            // –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            STATE.cache.data[cacheKey] = {
                data: response,
                timestamp: Date.now()
            };
            resolve(response); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É–¥–∞, –≥–¥–µ –∏—Ö –∂–¥—É—Ç
        };
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
        script.onerror = () => {
            cleanup();
            reject(new Error('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞'));
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        document.head.appendChild(script);
    });
}

// ‚úÖ –î–í–£–•–≠–¢–ê–ü–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –î–ê–ù–ù–´–• (POST-–ó–ê–ü–†–û–°–´)
async function apiPostRequest(action, data = {}) {
    console.log(`üì§ POST (–¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π): ${action}`);
    
    const sessionToken = localStorage.getItem('session_token');
    if (sessionToken) { 
        data.session_token = sessionToken; 
    }
    
    try {
        // –®–ê–ì 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞
        const requestId = 'req_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        
        // –®–ê–ì 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
        console.log(`üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö: ${requestId}`);
        await submitPostData(action, data, requestId);
        
        // –®–ê–ì 3: –û–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ GET
        console.log(`üîÑ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${requestId}`);
        const result = await pollRequestStatus(requestId);
        
        console.log(`‚úÖ POST —É—Å–ø–µ—à–µ–Ω: ${action}`, result);
        return result;
        
    } catch (error) {
        console.error(`‚ùå POST –æ—à–∏–±–∫–∞: ${action}`, error);
        throw error;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
function submitPostData(action, data, requestId) {
    return new Promise((resolve) => {
        const uniqueId = 'iframe_' + requestId;
        
        // –°–æ–∑–¥–∞—ë–º –Ω–µ–≤–∏–¥–∏–º—ã–π iframe
        const iframe = document.createElement('iframe');
        iframe.style.display = 'none';
        iframe.name = uniqueId;
        iframe.id = uniqueId;
        document.body.appendChild(iframe);

        // –°–æ–∑–¥–∞—ë–º —Ñ–æ—Ä–º—É
        const form = document.createElement('form');
        form.target = uniqueId;
        form.action = API_BASE;
        form.method = 'POST';

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è
        const fields = {
            action: action,
            request_id: requestId,
            data: JSON.stringify(data)
        };

        for (let [key, value] of Object.entries(fields)) {
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = key;
            input.value = value;
            form.appendChild(input);
        }

        document.body.appendChild(form);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
        form.submit();

        // –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É, –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        setTimeout(() => {
            if (iframe.parentNode) iframe.remove();
            if (form.parentNode) form.remove();
            resolve();
        }, 1500); // –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 1.5 —Å–µ–∫ –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞
async function pollRequestStatus(requestId, maxAttempts = 40) {
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
        // –ñ–¥—ë–º –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π (–ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–µ–ª–∞–µ–º —Å—Ä–∞–∑—É)
        if (attempt > 1) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // 1 —Å–µ–∫—É–Ω–¥–∞
        }
        
        try {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ GET
            const response = await apiRequest('getPostStatus', { request_id: requestId }, true);
            
            if (response.status === 'completed') {
                console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts})`);
                return response.result;
            } else if (response.status === 'error') {
                throw new Error(response.error || '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞');
            } else if (response.status === 'pending') {
                console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts})`);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ä–æ—Å
            } else {
                // –°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω - –∑–∞–ø—Ä–æ—Å –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                console.log(`‚è≥ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è... (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts})`);
            }
        } catch (error) {
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            if (attempt === maxAttempts) {
                throw new Error(`Timeout: –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${maxAttempts} —Å–µ–∫—É–Ω–¥`);
            }
            // –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts}):`, error.message);
        }
    }
    
    throw new Error('Timeout: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
}

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
function clearCache() {
    STATE.cache.data = {};
    console.log('üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω');
}

// ==========================================
// –ù–ê–í–ò–ì–ê–¶–ò–Ø - POPSTATE (–†–ê–ë–û–¢–ê–Æ–©–ò–ï –ü–†–Ø–ú–´–ï –°–°–´–õ–ö–ò)
// ==========================================

/**
 * –£–º–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
 */
function goBackInHistory() {
    if (window.history.length > 1) {
        window.history.back();
    } else {
        navigateTo('home');
    }
}

function navigateTo(page, params = {}) {

    // ‚ú® –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞—ë–º URL —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
    const url = new URL(window.location.origin + window.location.pathname);
    
    // 1. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä 'page'
    url.searchParams.set('page', page);
    
    // 2. –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è –≠–¢–û–ô —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    Object.keys(params).forEach(key => {
        if (params[key] !== null && params[key] !== undefined) {
            url.searchParams.set(key, params[key]);
        }
    });

    // 3. –ï—Å–ª–∏ –º—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if ((page === 'home' || page === 'catalog') && STATE.currentPage > 1) {
        url.searchParams.set('p', STATE.currentPage);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    window.history.pushState({ page, params }, '', url);
    renderPage(page, params);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ù–∞–∑–∞–¥/–í–ø–µ—Ä—ë–¥ –±—Ä–∞—É–∑–µ—Ä–∞
window.addEventListener('popstate', (e) => {
    if (e.state && e.state.page) {
        renderPage(e.state.page, e.state.params || {});
    } else {
        // –ü–∞—Ä—Å–∏–º URL –µ—Å–ª–∏ –Ω–µ—Ç state
        const urlParams = new URLSearchParams(window.location.search);
        const page = urlParams.get('page') || 'home';
        const params = {};
        
        urlParams.forEach((value, key) => {
            if (key !== 'page') params[key] = value;
        });
        
        renderPage(page, params);
    }
});

// –ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü
// –ó–ê–ú–ï–ù–ò–¢–ï –í–ê–®–£ –§–£–ù–ö–¶–ò–Æ renderPage –ù–ê –≠–¢–£:
async function renderPage(page, params = {}) {
    /// ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚Ññ1: –í—ã–ø–æ–ª–Ω—è–µ–º —Å –Ω—É–ª–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –æ—á–µ—Ä–µ–¥—å
    setTimeout(() => {
        window.scrollTo(0, 0);
    }, 0);

    // ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚Ññ2: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Å–∫—Ä–æ–ª–ª
    // (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å –∏ –æ—Å—Ç–∞–≤–∏–ª–æ overflow: hidden)
    try {
        document.body.style.overflow = 'auto';
        document.documentElement.style.overflow = 'auto'; // –ò –¥–ª—è <html> –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    } catch (e) {}

    if (isRendering) {
        console.warn('–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —É–∂–µ –∏–¥—ë—Ç, –Ω–æ–≤—ã–π –≤—ã–∑–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:', page);
        return;
    }
    isRendering = true;

    // --- –î–∞–ª—å—à–µ –∏–¥–µ—Ç –í–ï–°–¨ –í–ê–® –ö–û–î –ò–ó renderPage –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

    // --- ‚ú® –ù–û–í–´–ô –ë–õ–û–ö: –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–≤–∞—é—â–µ–π –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–∫–∏ ---
    const floatingButton = document.querySelector('.floating-shelf-button');
    if (floatingButton && page !== 'novel-details') { // –£–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ –ù–ï —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ—Ç–∞–ª–µ–π
        floatingButton.remove();
        console.log("–ü–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–ª–∫–∏ —É–¥–∞–ª–µ–Ω–∞.");
    }

    // Remove previous scroll/mousemove listeners if they exist
    if (currentScrollHandler) {
        // ‚ú® –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ü–µ–ª—å (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ document) ‚ú®
        const scrollTarget = currentScrollHandler._scrollTarget;
        // ‚ú® –ò—Å–ø—Ä–∞–≤–ª—è–µ–º targetName –∏ –ø—Ä–æ–≤–µ—Ä–∫—É ‚ú®
        const targetName = scrollTarget === window ? 'window' : (scrollTarget?.tagName || 'unknown');

        if (scrollTarget && scrollTarget === window) { // <-- –ü—Ä–æ–≤–µ—Ä—è–µ–º window
            scrollTarget.removeEventListener('scroll', currentScrollHandler);
            console.log(`Scroll listener removed from ${targetName}.`);
        } else {
            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Ü–µ–ª—å –∏–∑–º–µ–Ω–∏—Ç—Å—è
            console.warn(`–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å —Å–∫—Ä–æ–ª–ª–∞ —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π —Ü–µ–ª–∏: ${scrollTarget}`);
            // –ü–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å window –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            window.removeEventListener('scroll', currentScrollHandler);
        }

        if (currentScrollHandler._mouseMoveHandler) {
            document.removeEventListener('mousemove', currentScrollHandler._mouseMoveHandler);
            console.log("MouseMove listener removed.");
        }

        currentScrollHandler = null;
    }

    const mainHeader = document.getElementById('main-header');
    if (mainHeader) {
        if (page !== 'chapter-read') {
            mainHeader.classList.remove('is-hidden'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
        } else {
            mainHeader.classList.add('is-hidden'); // –°–∫—Ä—ã–≤–∞–µ–º
        }
    }
    
    console.log(`üìÑ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥: ${page}`, params);

    // ‚ú® –ù–ê–® –ù–û–í–´–ô "–û–•–†–ê–ù–ù–ò–ö" ‚ú®
    // –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ 'creator' –∏–ª–∏ –≤—ã—à–µ
    const creatorPages = ['add-novel', 'edit-novel', 'add-chapter', 'edit-chapter'];
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if ((creatorPages.includes(page) || page === 'profile') && !STATE.currentUser) {
        // –°–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–æ–±—â–µ –Ω–µ –≤–æ—à–µ–ª
        showToast('–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏', 'warning');
        navigateTo('home'); // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        isRendering = false;
        return;
    }

    // –¢–µ–ø–µ—Ä—å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (creatorPages.includes(page) && !checkUserPermission('create')) {
        // checkUserPermission('create') –≤–µ—Ä–Ω–µ—Ç true –¥–ª—è creator, admin –∏ owner
        showToast('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'error');
        navigateTo('home'); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        isRendering = false;
        return;
    }
    
    const catalogViewElements = ['search-section', 'novels-container'];
    const pageViewContainer = document.getElementById('page-content-container');

    if (page === 'home' || page === 'catalog') {
        catalogViewElements.forEach(id => showSection(id));
        if (pageViewContainer) {
            pageViewContainer.style.display = 'none';
            pageViewContainer.innerHTML = '';
        }
    } else {
        catalogViewElements.forEach(id => hideSection(id));
        if (pageViewContainer) pageViewContainer.style.display = 'block';
    }
    
    try {
        switch(page) {
            case 'home':
            case 'catalog':
                await renderCatalogPage();
                break;
                
            case 'novel-details':
                if (params.id) await renderNovelDetailsPage(params.id);
                break;
                
            case 'add-novel':
                await renderNovelFormPage();
                break;
                
            case 'edit-novel':
                if (params.id) await renderNovelFormPage(params.id);
                break;
                
            case 'chapter-read':
                if (params.id) await renderChapterReadPage(params.id);
                break;
                
            case 'add-chapter':
                if (params.novelId) await renderChapterFormPage(params.novelId);
                break;
                
            case 'edit-chapter':
                if (params.id) await renderChapterFormPage(null, params.id);
                break;
                
            case 'author':
                if (params.name) await renderAuthorPage(params.name);
                break;
            
            case 'profile':
                await renderProfilePage();
                break;

            case 'profile-settings': // ‚ú® NEW CASE ‚ú®
                await renderProfileSettingsPage();
                break;
            
            case 'creator': // ‚ú® NEW
                if (params.id) await renderCreatorPage(params.id);
                break;
                
            default:
                await renderCatalogPage();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:', error);
        showToast('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É', 'error');
    } finally {
        isRendering = false; // ‚ú® –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤ –∫–æ–Ω—Ü–µ
    }
}

/**
 * ‚ú® NEW: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö SPA-—Å—Å—ã–ª–æ–∫.
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≤–æ–º—É –∫–ª–∏–∫—É —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ SPA, –∞ –ø—Ä–∞–≤–æ–º—É - –∫–∞–∫ –æ–±—ã—á–Ω–æ–π —Å—Å—ã–ª–∫–µ.
 * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
 */
function handleLinkClick(event) {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –ª–µ–≤—ã–π –∫–ª–∏–∫
    if (
        event.button !== 0 || // –ù–µ –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        event.ctrlKey ||       // –ù–∞–∂–∞—Ç Ctrl
        event.metaKey ||       // –ù–∞–∂–∞—Ç Cmd (Mac)
        event.shiftKey ||      // –ù–∞–∂–∞—Ç Shift
        event.altKey           // –ù–∞–∂–∞—Ç Alt
    ) {
        return; // –†–∞–∑—Ä–µ—à–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (–æ—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ, etc.)
    }
    
    // 2. –ù–∞—Ö–æ–¥–∏–º —Å–∞–º —Ç–µ–≥ <a> (–∫–ª–∏–∫ –º–æ–≥ –±—ã—Ç—å –ø–æ <span> –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ)
    // currentTarget - —ç—Ç–æ —Ç–æ—Ç, –Ω–∞ –∫–æ–º –≤–∏—Å–∏—Ç onclick
    const link = event.currentTarget; 
    
    // 3. –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
    event.preventDefault();
    
    try {
        // 4. –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ href
        const url = new URL(link.href);
        
        // 5. –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const urlParams = url.searchParams;
        const page = urlParams.get('page') || 'home';
        const params = {};
        
        urlParams.forEach((value, key) => {
            if (key !== 'page') {
                params[key] = value;
            }
        });
        
        // 6. –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É SPA-–Ω–∞–≤–∏–≥–∞—Ü–∏—é
        navigateTo(page, params);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ SPA-–Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ
        window.location.href = link.href;
    }
}

// –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
function getBreadcrumbs(page, params = {}) {
    // –ï—Å–ª–∏ –º—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    if (page === 'home' || page === 'catalog') {
        return '';
    }

    // ‚ú® –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    let breadcrumbs = '<a href="/?page=home" onclick="handleLinkClick(event)">–ì–ª–∞–≤–Ω–∞—è</a>';
    
    // ‚ú® –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –≤–∞—à–∏ 'case'
    switch(page) {
        case 'novel-details':
            breadcrumbs += ` <span>‚Ä∫</span> <span>${escapeHtml(params.title || '–ù–æ–≤–µ–ª–ª–∞')}</span>`;
            break;
        case 'chapter-read':
            // ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–û:
            breadcrumbs += ` <span>‚Ä∫</span> <a href="/?page=novel-details&id=${params.novelId}" onclick="handleLinkClick(event)">${escapeHtml(params.novelTitle || '–ù–æ–≤–µ–ª–ª–∞')}</a>`;
            breadcrumbs += ` <span>‚Ä∫</span> <span>${escapeHtml(params.chapterTitle || '–ì–ª–∞–≤–∞')}</span>`;
            break;
        case 'creator':
            breadcrumbs += ` <span>‚Ä∫</span> <span>–ü—Ä–æ—Ñ–∏–ª—å: ${escapeHtml(params.name || '–°–æ–∑–¥–∞—Ç–µ–ª—å')}</span>`;
            break;
        case 'profile':
            breadcrumbs += ' <span>‚Ä∫</span> <span>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</span>';
            break;
        case 'profile-settings': // ‚ú® NEW CASE ‚ú®
            breadcrumbs += ' <span>‚Ä∫</span> <a href="/?page=profile" onclick="handleLinkClick(event)">–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</a>';
            breadcrumbs += ' <span>‚Ä∫</span> <span>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>';
            break;
        case 'add-chapter':
        case 'edit-chapter':
            // ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–û:
            breadcrumbs += ` <span>‚Ä∫</span> <a href="/?page=novel-details&id=${params.novelId}" onclick="handleLinkClick(event)">${escapeHtml(params.novelTitle || '–ù–æ–≤–µ–ª–ª–∞')}</a>`;
            breadcrumbs += ` <span>‚Ä∫</span> <span>${page === 'add-chapter' ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤—ã' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã'}</span>`;
            break;
        case 'add-novel':
            breadcrumbs += ' <span>‚Ä∫</span> <span>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–µ–ª–ª—É</span>';
            break;
        case 'edit-novel':
            // ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–û:
            breadcrumbs += ` <span>‚Ä∫</span> <a href="/?page=novel-details&id=${params.id}" onclick="handleLinkClick(event)">${escapeHtml(params.title || '–ù–æ–≤–µ–ª–ª–∞')}</a>`;
            breadcrumbs += ` <span>‚Ä∫</span> <span>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</span>`;
            break;
        case 'author':
            breadcrumbs += ' <span>‚Ä∫</span> <span>–ê–≤—Ç–æ—Ä</span>';
            break;
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—ã–π HTML –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    return `<div class="breadcrumbs">${breadcrumbs}</div>`;
}

// ==========================================
// –°–¢–†–ê–ù–ò–¶–ê –ö–ê–¢–ê–õ–û–ì–ê (–ì–õ–ê–í–ù–ê–Ø)
// ==========================================

async function renderCatalogPage(isSkeleton = false) {
    showSection('search-section');
    showSection('novels-container');
    
    const grid = document.getElementById('novels-grid');
    if (!grid) return;

    // ‚ú® –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–µ–ª–µ—Ç
    if (isSkeleton) {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–¥–æ –≤—Å—Ç–∞–≤–∫–∏ skeleton)
    grid.className = STATE.viewMode === 'list' ? 'novels-grid list-view' : 'novels-grid';
        
        // –†–∏—Å—É–µ–º 12 skeleton –∫–∞—Ä—Ç–æ—á–µ–∫
        grid.innerHTML = Array(12).fill(null).map(() => renderSkeletonCard()).join('');
        return;
    }

    // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ —É–∂–µ —Å –¥–∞–Ω–Ω—ã–º–∏, —Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
    if (STATE.genresAndTags.genres.length === 0) {
        // –ú—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –∏—Ö –≤ initializeApp, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—Å—Ç–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É
        await loadGenresAndTags();
    }
    setupAdvancedFilters();
    
    const novelsToShow = STATE.filteredNovels.length > 0 ? STATE.filteredNovels : STATE.novels;
    renderNovelsGrid(novelsToShow);
    renderPagination();
}

function renderSkeletonCard() {
  const isListView = STATE.viewMode === 'list';
    if (isListView) {
        return `
        <div class="novel-card skeleton-card list-view-card">
            <div class="novel-cover">
                <div class="skeleton skeleton-cover"></div>
            </div>
            <div class="novel-info">
                <div class="skeleton skeleton-title"></div>
                <div class="skeleton skeleton-text"></div>
                <div class="skeleton skeleton-text short"></div>
            </div>
        </div>
        `;
    }

    return `
        <div class="novel-card skeleton-card grid-view-card">
            <div class="novel-cover">
                <div class="skeleton skeleton-cover"></div>
            </div>
            <div class="novel-info">
                <div class="skeleton skeleton-title"></div>
            </div>
        </div>
    `;
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç skeleton –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
 */
function showSkeletonCards(count = 12) {
    const grid = document.getElementById('novels-grid');
    if (!grid) return;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–¥–æ –≤—Å—Ç–∞–≤–∫–∏ skeleton)
    grid.className = STATE.viewMode === 'list' ? 'novels-grid list-view' : 'novels-grid';
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º skeleton –∫–∞—Ä—Ç–æ—á–∫–∏
    const skeletons = Array(count).fill(null).map(() => renderSkeletonCard()).join('');
    grid.innerHTML = skeletons;
}

function renderNovelsGrid(novels) {
    const grid = document.getElementById('novels-grid');
    const statsBar = document.getElementById('stats-bar');
    const novelsCount = document.getElementById('novels-count');
    
    if (!grid) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (novelsCount) {
        novelsCount.textContent = `${novels.length} ${getNounEnding(novels.length, '–Ω–æ–≤–µ–ª–ª–∞', '–Ω–æ–≤–µ–ª–ª—ã', '–Ω–æ–≤–µ–ª–ª')}`;
    }
    
    if (statsBar) statsBar.style.display = 'flex';
    
    if (novels.length === 0) {
        grid.innerHTML = `
            <div class="no-results">
                <h3>–ù–æ–≤–µ–ª–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã</p>
            </div>
        `;
        return;
    }
    
    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const startIdx = (STATE.currentPage - 1) * STATE.itemsPerPage;
    const endIdx = startIdx + STATE.itemsPerPage;
    const pageNovels = novels.slice(startIdx, endIdx);
    
    STATE.totalPages = Math.ceil(novels.length / STATE.itemsPerPage);
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏
    grid.className = STATE.viewMode === 'list' ? 'novels-grid list-view' : 'novels-grid';
    grid.innerHTML = pageNovels.map(novel => renderNovelCard(novel)).join('');
}

/**
 * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø V2
 * –†–µ–Ω–¥–µ—Ä–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É –Ω–æ–≤–µ–ª–ª—ã –∫–∞–∫ –°–°–´–õ–ö–£ <a> –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–π SPA-–Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
 * @param {object} novel - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–µ–ª–ª—ã
 */
function renderNovelCard(novel) {
    const isListView = STATE.viewMode === 'list';
    let cardClass = 'novel-card';
    let overlayHtml = '';
    // ‚ú® –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL —Å—Å—ã–ª–∫–∏ ‚ú®
    const novelUrl = `/?page=novel-details&id=${novel.novel_id}`;
    // ‚ú® –ê—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Ç–µ–≥–∞ <a> - URL –∏ –∫–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ ‚ú®
    let linkAttributes = `href="${novelUrl}" class="novel-card-link"`;

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏—Ö—Å—è, –æ—à–∏–±–æ—á–Ω—ã—Ö
    if (novel.is_deleted) {
        cardClass += ' deleted';
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π URL, –¥–æ–±–∞–≤–ª—è–µ–º onclick –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        linkAttributes = `href="#" onclick="handleRestoreNovel('${novel.novel_id}'); event.preventDefault();" class="novel-card-link deleted-link"`;
        overlayHtml = `<div class="novel-card-overlay"><span class="restore-icon">‚Ü©Ô∏è</span><span>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</span></div>`;
    } else if (novel.original_status === 'processing') {
        cardClass += ' processing';
        linkAttributes = `href="#" class="novel-card-link disabled"`; // –î–µ–ª–∞–µ–º –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π
        overlayHtml = `<div class="novel-card-overlay"><div class="spinner"></div><span>–°–æ–∑–¥–∞–µ—Ç—Å—è...</span></div>`;
    } else if (novel.original_status === 'error') {
        cardClass += ' error';
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π URL, –¥–æ–±–∞–≤–ª—è–µ–º onclick –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
        linkAttributes = `href="#" onclick="handleErrorNovelClick('${novel.novel_id}'); event.preventDefault();" class="novel-card-link error-link"`;
        overlayHtml = `<div class="novel-card-overlay"><span class="error-icon">‚ö†Ô∏è</span><span>–û—à–∏–±–∫–∞</span></div>`;
    }

    const statusClass = getStatusClass(novel.translation_status);

    // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π HTML –¥–ª—è div.novel-card)
    let cardInnerHtml = '';

    if (!isListView) { // --- –°–ï–¢–ö–ê ---
        cardClass += ' grid-view-card';
        cardInnerHtml = `
            ${overlayHtml}
            ${novel.language ? `<span class="novel-language">${escapeHtml(novel.language)}</span>` : ''}
            ${novel.translation_status ? `<span class="novel-status ${statusClass}">${escapeHtml(novel.translation_status)}</span>` : ''}
            <div class="novel-cover">
                ${novel.cover_url ? `<img src="${escapeHtml(novel.cover_url)}" alt="${escapeHtml(novel.title)}" loading="lazy">` : '<div class="no-cover">üìö</div>'}
            </div>
            <div class="novel-info">
                <h3 class="novel-title">${escapeHtml(novel.title)}</h3>
            </div>
        `;
    } else { // --- –°–ü–ò–°–û–ö ---
        cardClass += ' list-view-card';
        const metaInfo = [novel.orientation, novel.era, novel.perspective].filter(Boolean).join(' ¬∑ ');
        cardInnerHtml = `
            ${overlayHtml}
            ${novel.language ? `<span class="novel-language">${escapeHtml(novel.language)}</span>` : ''}
            ${novel.translation_status ? `<span class="novel-status ${statusClass}">${escapeHtml(novel.translation_status)}</span>` : ''}
            <div class="novel-cover">
                 ${novel.cover_url ? `<img src="${escapeHtml(novel.cover_url)}" alt="${escapeHtml(novel.title)}" loading="lazy">` : '<div class="no-cover">üìö</div>'}
            </div>
            <div class="novel-info">
                <h3 class="novel-title">${escapeHtml(novel.title)}</h3>
                <p class="novel-author">
                    <a href="/?page=author&name=${encodeURIComponent(novel.author)}" class="author-link-inline" onclick="handleLinkClick(event)">
                        ${escapeHtml(novel.author)}
                    </a>
                </p>
                <div class="novel-meta-line">
                     ${novel.original_chapter_count ? `<span>${novel.original_chapter_count} –≥–ª–∞–≤ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ</span>` : ''}
                     ${metaInfo ? `<span>${escapeHtml(metaInfo)}</span>` : ''}
                </div>
            </div>
        `;
    }
    // ‚ú® –í–æ–∑–≤—Ä–∞—â–∞–µ–º –°–°–´–õ–ö–£ <a>, –∫–æ—Ç–æ—Ä–∞—è –û–ë–û–†–ê–ß–ò–í–ê–ï–¢ <div> –∫–∞—Ä—Ç–æ—á–∫–∏ ‚ú®
    // ‚ú® –ö —Å—Å—ã–ª–∫–µ –¥–æ–±–∞–≤–ª—è–µ–º onclick="handleLinkClick(event)" –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ ‚ú®
    return `<a ${linkAttributes} onclick="handleLinkClick(event)">
               <div class="${cardClass}">
                   ${cardInnerHtml}
               </div>
           </a>`;
}

// –î–æ–±–∞–≤–∏–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ (–µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç)
function getStatusClass(status) {
    const _status = (status || '').toString().toLowerCase();
    if (_status.includes('–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è') || _status.includes('ongoing') || _status.includes('–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ')) return 'status-ongoing';
    if (_status.includes('–∑–∞–º–æ—Ä–æ–∂–µ–Ω') || _status.includes('–∑–∞–±—Ä–æ—à–µ–Ω') || _status.includes('hiatus') || _status.includes('–ø–µ—Ä–µ—Ä—ã–≤')) return 'status-hiatus';
    if (_status.includes('–∑–∞–≤–µ—Ä—à–µ–Ω') || _status.includes('completed')) return 'status-completed';
    return 'status-unknown';
}

function handleRestoreNovel(novelId) {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    event.stopPropagation(); 
    
    showConfirmModal('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–µ–ª–ª—É?', '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç—É –Ω–æ–≤–µ–ª–ª—É –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã?',
        async () => {
            showLoading(true, { title: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...' });
            try {
                const response = await apiPostRequest('restoreNovel', { novelId: novelId });
                if (response.success) {
                    showToast(response.message, 'success');
                    clearCache();
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É "–°–æ–∑–¥–∞–Ω–Ω—ã–µ", –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ—Ñ–∏–ª—è
                    if (document.querySelector('.profile-page')) {
                        await renderProfileCreatedNovels();
                    }
                } else {
                    throw new Error(response.error);
                }
            } catch (error) {
                showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
            } finally {
                showLoading(false);
            }
        }
    );
}

// ==========================================
// –ü–ê–ì–ò–ù–ê–¶–ò–Ø
// ==========================================

function renderPagination() {
    const paginationContainer = document.getElementById('pagination');
    if (!paginationContainer || STATE.totalPages <= 1) {
        if (paginationContainer) paginationContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –º–∞–ª–æ
        return;
    }
    
    // ‚ú® –¢–µ–ø–µ—Ä—å –º—ã —É–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º, –∞ –Ω–µ –µ–≥–æ —á–∞—Å—Ç—å—é
    paginationContainer.style.display = 'flex';
    
    const maxButtons = 7;
    const current = STATE.currentPage;
    const total = STATE.totalPages;
    
    // –°–æ–±–∏—Ä–∞–µ–º HTML —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    let buttonsHtml = `
        <button class="pagination-btn" ${current === 1 ? 'disabled' : ''} 
                onclick="goToPage(1)" title="–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞">¬´</button>
        <button class="pagination-btn" ${current === 1 ? 'disabled' : ''} 
                onclick="goToPage(${current - 1})" title="–ü—Ä–µ–¥—ã–¥—É—â–∞—è">‚Äπ</button>
    `;
    
    let startPage = Math.max(1, current - Math.floor(maxButtons / 2));
    let endPage = Math.min(total, startPage + maxButtons - 1);
    
    if (endPage - startPage < maxButtons - 1) {
        startPage = Math.max(1, endPage - maxButtons + 1);
    }
    
    if (startPage > 1) {
        buttonsHtml += `<button class="pagination-btn page-number" onclick="goToPage(1)">1</button>`;
        if (startPage > 2) buttonsHtml += `<span class="pagination-ellipsis">...</span>`;
    }
    
    for (let i = startPage; i <= endPage; i++) {
        buttonsHtml += `
            <button class="pagination-btn page-number ${i === current ? 'active' : ''}" 
                    onclick="goToPage(${i})">${i}</button>
        `;
    }
    
    if (endPage < total) {
        if (endPage < total - 1) buttonsHtml += `<span class="pagination-ellipsis">...</span>`;
        buttonsHtml += `<button class="pagination-btn page-number" onclick="goToPage(${total})">${total}</button>`;
    }
    
    buttonsHtml += `
        <button class="pagination-btn" ${current === total ? 'disabled' : ''} 
                onclick="goToPage(${current + 1})" title="–°–ª–µ–¥—É—é—â–∞—è">‚Ä∫</button>
        <button class="pagination-btn" ${current === total ? 'disabled' : ''} 
                onclick="goToPage(${total})" title="–ü–æ—Å–ª–µ–¥–Ω—è—è">¬ª</button>
    `;
    
    // ‚ú® –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞–º–∏
    paginationContainer.innerHTML = `<div class="pagination-wrapper">${buttonsHtml}</div>`;
}

function goToPage(page) {
    if (page < 1 || page > STATE.totalPages || page === STATE.currentPage) return;
    
    // ‚ú® –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º URL, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const url = new URL(window.location);
    url.searchParams.set('p', page); // 'p' - –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.history.pushState({ page: 'catalog', params: { p: page } }, '', url);

    STATE.currentPage = page;
    const novelsToShow = STATE.filteredNovels.length > 0 ? STATE.filteredNovels : STATE.novels;
    renderNovelsGrid(novelsToShow);
    renderPagination();
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

// ==========================================
// –î–ï–¢–ê–õ–ò –ù–û–í–ï–õ–õ–´
// ==========================================

async function renderNovelDetailsPage(novelId) {
    const container = document.getElementById('page-content-container');
    if (!container) return;
    
    // --- Skeleton Loading ---
    container.innerHTML = `
        <div class="page-content novel-details-page novel-details-page-skeleton">
            <div class="breadcrumbs-skeleton skeleton"></div>
            <div class="page-header-skeleton">
                <div class="skeleton" style="width: 150px; height: 36px;"></div>
                <div class="skeleton" style="width: 250px; height: 36px;"></div>
            </div>
            <div class="novel-content-wrapper-skeleton">
                <div class="novel-cover-float-skeleton skeleton"></div>
                <aside class="novel-info-desktop-skeleton skeleton"></aside>
                <div class="novel-description-float-skeleton">
                    <div class="tabs-skeleton skeleton"></div>
                    <div class="text-skeleton skeleton"></div>
                    <div class="text-skeleton skeleton" style="width: 80%;"></div>
                    <div class="text-skeleton skeleton" style="width: 60%;"></div>
                </div>
            </div>
            <hr class="section-divider">
            <div class="taxonomy-skeleton skeleton"></div>
            <hr class="section-divider">
             <div class="chapters-header-skeleton skeleton"></div>
             <div class="chapters-list-skeleton">
                <div class="skeleton" style="height: 40px; margin-bottom: 5px;"></div>
                <div class="skeleton" style="height: 40px; margin-bottom: 5px;"></div>
                <div class="skeleton" style="height: 40px; margin-bottom: 5px;"></div>
             </div>
        </div>
    `;
    // --- End Skeleton ---
    
    try {
        const response = await apiRequest('getNovel', { id: novelId });
        
        if (response.success && response.novel) {
            // ‚ú® –í–û–¢ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã –≤ "—Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏"
            const breadcrumbs = getBreadcrumbs('novel-details', {
                id: novelId, // Pass ID for edit link in breadcrumbs if needed
                title: response.novel.title
            });

            renderNovelDetailsContent(response.novel, response.novel.chapters || [], breadcrumbs);

        } else {
            throw new Error(response.error || '–ù–æ–≤–µ–ª–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
    } catch (error) {
        // Render error message (replaces skeleton)
         container.innerHTML = `
             <div class="error-page">
                 <h3>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                 <p>${error.message}</p>
                 <button class="btn btn-primary" onclick="goBackInHistory()">
                     ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è
                 </button>
             </div>
         `;
    }
    // No showLoading(false) needed
}


function renderNovelDetailsContent(novel, chapters, breadcrumbs) {
    const container = document.querySelector('.novel-details-page');
    if (!container) return;

    const actualTranslationWordCount = chapters.reduce((sum, ch) => sum + (ch.word_count || 0), 0);
    
    const canEdit = checkUserPermission('edit', novel);

    const tagsHtml = novel.tags?.map(t => `
        <span class="tag-badge clickable"
            data-description="${t.description ? escapeHtml(t.description) : ''}"
            onclick="filterByTag('${escapeHtml(t.name)}')">
            ${escapeHtml(t.name)}
        </span>
    `).join('') || '';

    // ‚ú® –°–û–ó–î–ê–Å–ú HTML –î–õ–Ø –ö–ù–û–ü–û–ö –£–ü–†–ê–í–õ–ï–ù–ò–Ø –û–¢–î–ï–õ–¨–ù–û ‚ú®
    const actionsHtml = canEdit ? `
        <div class="novel-actions-bar">
            <button class="action-btn edit" onclick="navigateTo('edit-novel', {id: '${novel.novel_id}'})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–µ–ª–ª—É">
                ‚úèÔ∏è <span>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</span>
            </button>
            <button class="action-btn share" onclick="handleShareNovel('${novel.novel_id}')" title="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è">
                üîó <span>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è</span>
            </button>
            <button class="action-btn delete" onclick="handleDeleteNovel('${novel.novel_id}')" title="–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–µ–ª–ª—É">
                üóëÔ∏è <span>–£–¥–∞–ª–∏—Ç—å</span>
            </button>
        </div>
    ` : '';

    let additionalLinksHtml = ''; // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    if (novel.additional_links) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º makeLinksClickable –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –≤ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ
            additionalLinksHtml = `
                <div>
                    <span>–î–æ–ø. —Å—Å—ã–ª–∫–∏:</span>
                    <span class="additional-links-display">${makeLinksClickable(novel.additional_links)}</span>
                </div>`;
        } catch (e) {
             console.error("–û—à–∏–±–∫–∞ –≤ makeLinksClickable:", e);
             additionalLinksHtml = `<div><span>–î–æ–ø. —Å—Å—ã–ª–∫–∏:</span> <span>${escapeHtml(novel.additional_links)}</span></div>`; // Fallback –±–µ–∑ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
        }
    }

    // –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê
    const infoTableHtml = `
        <div class="info-table">
            ${novel.creator ? `<div><span>–°–æ–∑–¥–∞—Ç–µ–ª—å:</span> <span class="author-name"><a href="/?page=creator&id=${novel.creator.user_id}" onclick="handleLinkClick(event)">${escapeHtml(novel.creator.username)}</a></span></div>` : ''}
            ${novel.language ? `<div><span>–Ø–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞:</span> <span>${escapeHtml(novel.language)}</span></div>` : ''}
            ${novel.year ? `<div><span>–ì–æ–¥:</span> <span>${escapeHtml(novel.year)}</span></div>` : ''}
            ${novel.original_status ? `<div><span>–°—Ç–∞—Ç—É—Å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞:</span> <span>${escapeHtml(novel.original_status)}</span></div>` : ''}
            ${novel.translation_status ? `<div><span>–°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥–∞:</span> <span>${escapeHtml(novel.translation_status)}</span></div>` : ''}
            ${novel.era ? `<div><span>–≠—Ä–∞:</span> <span>${escapeHtml(novel.era)}</span></div>` : ''}
            ${novel.orientation ? `<div><span>–¢–∏–ø –æ—Ç–Ω–æ—à–µ–Ω–∏–π:</span> <span>${escapeHtml(novel.orientation)}</span></div>` : ''}
            ${novel.perspective ? `<div><span>–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞:</span> <span>${escapeHtml(novel.perspective)}</span></div>` : ''}
            <div><span>–°–ª–æ–≤ (–æ—Ä–∏–≥./–ø–µ—Ä.):</span> <span>${formatNumber(novel.original_word_count || 0)} / ${formatNumber(actualTranslationWordCount)}</span></div>
            <div><span>–ì–ª–∞–≤ (–æ—Ä–∏–≥./–ø–µ—Ä.):</span> <span>${novel.original_chapter_count || 0} / ${novel.chapter_count || 0}</span></div>
            ${novel.access_type ? `<div><span>–î–æ—Å—Ç—É–ø:</span> <span>${getAccessLabel(novel.access_type)}</span></div>` : ''}
            ${novel.created_at ? `<div><span>–î–æ–±–∞–≤–ª–µ–Ω–∞:</span> <span>${formatDate(novel.created_at)}</span></div>` : ''}
            ${novel.updated_at ? `<div><span>–û–±–Ω–æ–≤–ª–µ–Ω–∞:</span> <span>${formatDate(novel.updated_at)}</span></div>` : ''}
            ${additionalLinksHtml}
        </div>
    `;

    // –ö–ù–û–ü–ö–ê –ù–ê–ß–ê–¢–¨ –ß–¢–ï–ù–ò–ï
    const startReadingButton = chapters.length > 0 ? `
        <div class="start-reading-container">
            <button class="btn btn-primary start-reading-btn" onclick="startReading()">
                –ù–∞—á–∞—Ç—å —á—Ç–µ–Ω–∏–µ
            </button>
            ${chapters.length > 1 ? `
                <div class="reading-progress">
                    <small>–î–æ—Å—Ç—É–ø–Ω–æ –≥–ª–∞–≤: ${chapters.length}</small>
                </div>
            ` : ''}
        </div>
    ` : '';

    const chaptersHtml = renderChaptersListV2(chapters, novel.has_volumes, canEdit, window.readChapterIds || []); // –ü–µ—Ä–µ–¥–∞–µ–º ID –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –≥–ª–∞–≤

    container.innerHTML = `
        <div class="page-header">
            ${breadcrumbs || '<div></div>'}  ${actionsHtml}
        </div>
        
        <!-- –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ô–ù–ï–† –° –û–ë–¢–ï–ö–ê–ù–ò–ï–ú -->
        <div class="novel-content-wrapper">
            <!-- –û–ë–õ–û–ñ–ö–ê –° FLOAT –ò –ö–ù–û–ü–ö–û–ô -->
            <div class="novel-cover-float">
                ${novel.cover_url ? 
                   `<img src="${escapeHtml(novel.cover_url)}" alt="${escapeHtml(novel.title)}" 
                        onerror="handleCoverError(this)" 
                        onload="handleCoverLoad(this)">` : 
                    '<div class="no-cover">üìö</div>'
                }
                ${startReadingButton}
            </div>
            
            <!-- –°–ê–ô–î–ë–ê–† –ò–ù–§–û–†–ú–ê–¶–ò–ò –î–õ–Ø –î–ï–°–ö–¢–û–ü–ê -->
            <aside class="novel-info-desktop">
                <h3>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                ${infoTableHtml}
                
                ${novel.rating ? `
                    <div class="rating-container">
                        <div class="rating-display">
                            <span class="rating-label">–†–µ–π—Ç–∏–Ω–≥:</span>
                            <div class="rating-stars">
                                ${renderStars(novel.rating)}
                            </div>
                            <span class="rating-value">${novel.rating}/5</span>
                        </div>
                    </div>
                ` : ''}
            </aside>
            
            <!-- –û–ü–ò–°–ê–ù–ò–ï, –ö–û–¢–û–†–û–ï –û–ë–¢–ï–ö–ê–ï–¢ -->
            <div class="novel-description-float">
                <div class="description-tabs">
                    <button class="tab-btn active" onclick="switchDescriptionTab('description')">üìñ –û–ø–∏—Å–∞–Ω–∏–µ</button>
                    <button class="tab-btn" onclick="switchDescriptionTab('info')" id="info-tab-button">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</button>
                </div>
                
                <div id="float-description" class="tab-content active">
                    ${formatDescription(novel.description || '–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.')}
                </div>
                
                <div id="float-info" class="tab-content">
                    ${infoTableHtml}
                </div>
            </div>
            
            <!-- –û–ß–ò–°–¢–ö–ê –û–ë–¢–ï–ö–ê–ù–ò–Ø -->
            <div style="clear: both;"></div>
        </div>

        <!-- –¢–ï–ì–ò -->
        <div class="novel-taxonomy">
            <div class="tags-list">
                <strong>–¢–µ–≥–∏:</strong>
                ${tagsHtml || '<span class="text-muted">–ù–µ —É–∫–∞–∑–∞–Ω—ã</span>'}
            </div>
        </div>
        
        <!-- –ó–ê–ì–û–õ–û–í–û–ö –ò –ê–í–¢–û–† –° –¶–ï–ù–¢–†–ò–†–û–í–ê–ù–ò–ï–ú -->
        <hr class="section-divider">
        <div class="novel-header-center" data-debug="header-container">
            <h1 class="novel-main-title" id="novel-title" data-debug="main-title">${escapeHtml(novel.title)}</h1>
            <div class="author-container" onclick="navigateTo('author', {name: '${escapeHtml(novel.author)}'})">
                <span class="author-label">–ê–≤—Ç–æ—Ä:</span>
                <span class="author-name"><a href="/?page=author&name=${encodeURIComponent(novel.author)}" onclick="handleLinkClick(event)">${escapeHtml(novel.author)}</a></span>
            </div>
            ${novel.alt_titles ? `
                <div class="alt-titles-popup" id="alt-titles-popup" data-debug="alt-titles-popup" style="display: none;">
                    <div class="popup-content">
                        <strong>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è:</strong>
                        <div class="alt-titles-list">${escapeHtml(novel.alt_titles)}</div>
                    </div>
                </div>
            ` : ''}
        </div>
        <hr class="section-divider">

        <!-- –ì–õ–ê–í–´ -->
        <section class="chapters-section-v2">
            
            ${canEdit ? `
            <div class="chapters-header-v2">
                <div class="chapter-count">–í—Å–µ–≥–æ –≥–ª–∞–≤: ${chapters.length}</div>
                <div class="chapters-controls-v2">
                    <button class="btn btn-secondary btn-sm" id="chapter-sort-btn-v2" onclick="toggleChapterOrderV2()">
                        ${chapterSortOrder === 'asc' ? '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: ‚Üë –°—Ç–∞—Ä—ã–µ' : '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: ‚Üì –ù–æ–≤—ã–µ'}
                    </button>
                    <button class="btn btn-primary btn-sm" onclick="navigateTo('add-chapter', {novelId: '${novel.novel_id}'})">
                        + –î–æ–±–∞–≤–∏—Ç—å
                    </button>
                    
                    <button class="btn btn-secondary btn-sm" id="toggle-chapter-edit-btn" onclick="toggleChapterEditMode(this)">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="btn btn-secondary btn-sm" id="cancel-chapter-edit-btn" style="display: none;" onclick="toggleChapterEditMode(null, true)">
                        ‚ùå –û—Ç–º–µ–Ω–∞
                    </button>
                    </div>
            </div>
            ` : ''}

            <div class="chapters-list-container-v2">
                <div class="chapters-list-header">
                    <div class="ch-num">‚Ññ</div>
                    <div class="ch-title">–ù–∞–∑–≤–∞–Ω–∏–µ</div>
                    <div class="ch-words">–°–ª–æ–≤</div>
                    <div class="ch-updated">–û–±–Ω–æ–≤–ª–µ–Ω–æ</div>
                    ${STATE.currentUser?.role === 'owner' ? '<div class="ch-actions">–î–µ–π—Å—Ç–≤–∏—è</div>' : ''}
                </div>
                <div id="chapters-list-v2">
                    ${chapters.length > 0 ? chaptersHtml : '<p class="text-muted no-chapters">–ü–æ–∫–∞ –Ω–µ—Ç –≥–ª–∞–≤</p>'}
                </div>
            </div>
        </section>
        `;

    // --- –ù–û–í–´–ô –ë–õ–û–ö: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–≤–∞—é—â–µ–π –∫–Ω–æ–ø–∫–∏ ---
    const shelfButtonContainer = document.createElement('div');
    shelfButtonContainer.className = 'floating-shelf-button';
    document.body.appendChild(shelfButtonContainer); // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ body

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤–µ–ª–ª–∞ —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–Ω–æ–π –ø–æ–ª–∫–µ
    const currentUserShelves = novel.userShelves || [];
    const isOnAnyShelf = currentUserShelves.length > 0;

    const shelfTypes = { /* ... (—Å–∫–æ–ø–∏—Ä—É–π –æ–±—ä–µ–∫—Ç shelfTypes –æ—Ç—Å—é–¥–∞) ... */
        want_to_read: '–•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å',
        reading: '–ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å',
        completed: '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ',
        favorite: '–í –ª—é–±–∏–º–æ–µ',
        dropped: '–ë—Ä–æ—à–µ–Ω–æ'
    };

    let shelfLinksHtml = '';
    Object.entries(shelfTypes).forEach(([type, title]) => {
        const isActive = currentUserShelves.includes(type);
        shelfLinksHtml += `
            <a href="#" class="${isActive ? 'active-shelf' : ''}"
               onclick="handleAddToReadingList(${novel.novel_id}, '${type}')">
                <span>${title}</span>
            </a>`;
    });

    const removeLinkHtml = `
        <hr style="${isOnAnyShelf ? '' : 'display: none;'}">
        <a href="#" class="remove-link ${isOnAnyShelf ? '' : 'hidden'}"
           onclick="handleRemoveFromReadingList(${novel.novel_id})">
            <span>üóëÔ∏è –£–±—Ä–∞—Ç—å —Å –ø–æ–ª–æ–∫</span>
        </a>`;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –∫–Ω–æ–ø–∫–∏ –∏ –º–µ–Ω—é
    shelfButtonContainer.innerHTML = `
        <button class="btn-float" title="–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–ª–∫—É">
            +
        </button>
        <div class="dropdown-menu">
            ${shelfLinksHtml}
            ${removeLinkHtml}
        </div>
    `;

    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const mainButton = shelfButtonContainer.querySelector('.btn-float');
    const dropdownMenu = shelfButtonContainer.querySelector('.dropdown-menu');

    // –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ó–ê–ö–†–´–¢–ò–Ø –ú–ï–ù–Æ
    const closeShelfMenu = () => {
        shelfButtonContainer.classList.remove('menu-visible');
        document.removeEventListener('click', handleClickOutsideShelfMenu); // –£–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∫–ª–∏–∫–∞ –≤–Ω–µ
        console.log("–ú–µ–Ω—é –ø–æ–ª–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ, —Å–ª—É—à–∞—Ç–µ–ª—å click outside —É–¥–∞–ª–µ–Ω");
    };

    // –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ö–õ–ò–ö–ê –í–ù–ï –ú–ï–ù–Æ
    const handleClickOutsideShelfMenu = (event) => {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –ù–ï –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –∫–Ω–æ–ø–∫–∏
        if (!shelfButtonContainer.contains(event.target)) {
            closeShelfMenu();
        }
    };

    // –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–ê –ü–û –û–°–ù–û–í–ù–û–ô –ö–ù–û–ü–ö–ï (+)
    mainButton.addEventListener('click', (event) => {
        event.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –¥–æ document
        const isVisible = shelfButtonContainer.classList.toggle('menu-visible');
        console.log("–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–ª–∫–∏, –º–µ–Ω—é –≤–∏–¥–∏–º–æ:", isVisible);

        if (isVisible) {
            // –ï—Å–ª–∏ –º–µ–Ω—é –æ—Ç–∫—Ä—ã–ª–æ—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∫–ª–∏–∫–∞ –≤–Ω–µ (—Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π)
            setTimeout(() => {
                document.addEventListener('click', handleClickOutsideShelfMenu);
                console.log("–î–æ–±–∞–≤–ª–µ–Ω —Å–ª—É—à–∞—Ç–µ–ª—å click outside –¥–ª—è –º–µ–Ω—é –ø–æ–ª–∫–∏");
            }, 0);
        } else {
            // –ï—Å–ª–∏ –º–µ–Ω—é –∑–∞–∫—Ä—ã–ª–æ—Å—å –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É, —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
            document.removeEventListener('click', handleClickOutsideShelfMenu);
            console.log("–ú–µ–Ω—é –ø–æ–ª–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ –∫–Ω–æ–ø–∫–æ–π, —Å–ª—É—à–∞—Ç–µ–ª—å click outside —É–¥–∞–ª–µ–Ω");
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ü–û –ü–£–ù–ö–¢–£ –ú–ï–ù–Æ (—á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞)
    dropdownMenu.addEventListener('click', (event) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ <a> –≤–Ω—É—Ç—Ä–∏ –º–µ–Ω—é
        if (event.target.closest('a')) {
             // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º, —á—Ç–æ–±—ã —É—Å–ø–µ–ª —Å—Ä–∞–±–æ—Ç–∞—Ç—å onclick —Å—Å—ã–ª–∫–∏
            setTimeout(closeShelfMenu, 50);
        }
    });
    // --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô
    initializeNovelPageFeatures(novel, chapters);
    window.currentNovelChapters = chapters;
    window.currentNovelHasVolumes = novel.has_volumes;

    initTooltips();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    window.currentNovelChaptersV2 = chapters;
    window.currentNovelHasVolumesV2 = novel.has_volumes;
    window.currentNovelCanEditV2 = canEdit;
    
    // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ê –û–ü–ò–°–ê–ù–ò–ï –ü–†–ò –ü–û–Ø–í–õ–ï–ù–ò–ò –°–ê–ô–î–ë–ê–†–ê
    setupAutoTabSwitching();

    // --- ‚ú® –î–û–ë–ê–í–¨ –≠–¢–û–¢ –í–´–ó–û–í –ó–î–ï–°–¨ ‚ú® ---
    setTimeout(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–ù–£–¢–†–ò setTimeout
        if (STATE.currentUser && STATE.currentUser.user_id != null) {
            console.log(`–ó–∞–ø—É—Å–∫ loadAndDisplayReadingProgress –¥–ª—è novelId: ${novel.novel_id}`); // –î–æ–±–∞–≤–∏–º –ª–æ–≥
            loadAndDisplayReadingProgress(novel.novel_id);
        } else {
            console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è."); // –î–æ–±–∞–≤–∏–º –ª–æ–≥
        }
    }, 100); // –£–≤–µ–ª–∏—á–∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 100 –º—Å
    // --- ‚ú® –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ‚ú® ---
}

// –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ù–ê–ß–ê–õ–ê –ß–¢–ï–ù–ò–Ø (v3 - –≤—Å–µ–≥–¥–∞ —Å —Å–∞–º–æ–π –ø–µ—Ä–≤–æ–π –≥–ª–∞–≤—ã)
function startReading() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –≥–ª–∞–≤—ã –¥–ª—è —ç—Ç–æ–π –Ω–æ–≤–µ–ª–ª—ã
    if (window.currentNovelChapters && window.currentNovelChapters.length > 0) {

        // ‚ú® –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–∞—Ö–æ–¥–∏–º –≥–ª–∞–≤—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
        // –°–Ω–∞—á–∞–ª–∞ –∫–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π
        const chaptersCopy = [...window.currentNovelChapters];

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–∏—é –¢–û–õ–¨–ö–û –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –Ω–æ–º–µ—Ä–∞ (–∏ —Ç–æ–º–∞)
        chaptersCopy.sort((a, b) => {
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–æ–º–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            const volCompare = (a.volume_order || 0) - (b.volume_order || 0);
            if (volCompare !== 0) return volCompare;
            // –ó–∞—Ç–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –≥–ª–∞–≤—ã
            return (parseFloat(a.chapter_number) || 0) - (parseFloat(b.chapter_number) || 0);
        });

        // –ë–µ—Ä–µ–º —Å–∞–º—É—é –ø–µ—Ä–≤—É—é –≥–ª–∞–≤—É –∏–∑ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        const firstChapter = chaptersCopy[0];

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–µ–Ω–∏—è —ç—Ç–æ–π –≥–ª–∞–≤—ã
        navigateTo('chapter-read', {
            id: firstChapter.chapter_id
        });

    } else {
        // –ï—Å–ª–∏ –≥–ª–∞–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        showAlertModal('–ù–µ—Ç –≥–ª–∞–≤', '–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–ª–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è', 'info');
    }
}

// –§–£–ù–ö–¶–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –í–ö–õ–ê–î–û–ö
function setupAutoTabSwitching() {
    function checkScreenSize() {
        const infoTabButton = document.getElementById('info-tab-button');
        const isDesktop = window.innerWidth >= 1024;
        
        if (isDesktop && infoTabButton) {
            const infoTab = document.getElementById('float-info');
            if (infoTab && infoTab.classList.contains('active')) {
                switchDescriptionTab('description');
            }
            infoTabButton.style.display = 'none';
        } else if (infoTabButton) {
            infoTabButton.style.display = 'flex';
        }
    }
    
    checkScreenSize();
    window.addEventListener('resize', checkScreenSize);
}

// –ü–†–û–°–¢–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
function initializeNovelPageFeatures(novel, chapters) {
    const titleElement = document.getElementById('novel-title');

    if (titleElement && novel.alt_titles) {
        titleElement.style.cursor = 'pointer';

        // –£–±–∏—Ä–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ altTitlesHtml –∑–¥–µ—Å—å
        // const altTitlesHtml = novel.alt_titles.split('|') ...

        titleElement.addEventListener('click', (e) => {
            e.stopPropagation();
            // ‚ú® –ü–µ—Ä–µ–¥–∞–µ–º —Å—ã—Ä—É—é —Å—Ç—Ä–æ–∫—É novel.alt_titles ‚ú®
            showAltTitlesPopup(novel.alt_titles); // –£–±—Ä–∞–ª–∏ e.target
        });
    }
}

/**
 * ‚ú® NEW: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ø–∞–ø —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
 * @param {string} altTitlesString - –°—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ '|'
 */
function showAltTitlesPopup(altTitlesString) {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ø–∞–ø –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingPopup = document.getElementById('custom-alt-titles-popup');
    if (existingPopup) {
        existingPopup.remove();
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –º–∞—Å—Å–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –∏ —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
    const titlesArray = altTitlesString.split('|').map(t => t.trim()).filter(Boolean);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML: –∫–∞–∂–¥—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ <p>, –º–µ–∂–¥—É –Ω–∏–º–∏ <hr>
    let titlesHtml = '';
    titlesArray.forEach((title, index) => {
        titlesHtml += `<p>${escapeHtml(title)}</p>`;
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å <hr> –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        if (index < titlesArray.length - 1) {
            titlesHtml += '<hr>';
        }
    });

    // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!titlesHtml) {
        titlesHtml = '<p class="text-muted">–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–µ—Ç.</p>';
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ø–∞–ø
    const popup = document.createElement('div');
    popup.id = 'custom-alt-titles-popup';
    // ‚ú® –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏–∏ ‚ú®
    popup.className = 'custom-alt-titles-popup bottom-sheet';
    popup.innerHTML = `
        <div class="popup-content">
            <div class="popup-header">
                <h3>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è</h3>
                <button class="popup-close" onclick="closeAltTitlesPopup()">√ó</button>
            </div>
            <div class="popup-body">
                ${titlesHtml}
            </div>
        </div>
    `;

    document.body.appendChild(popup);
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Ñ–æ–Ω–∞
    document.body.style.overflow = 'hidden';

    // --- ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö –ó–ê–ö–†–´–¢–ò–Ø ---
    const content = popup.querySelector('.popup-content');

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –§–û–ù (–∞ –Ω–µ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç)
    popup.addEventListener('click', (event) => {
        // –ï—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –ù–ï –ø–æ .popup-content –∏ –ù–ï –ø–æ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
        if (!content.contains(event.target)) {
            closeAltTitlesPopup();
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape
    const escapeHandler = (e) => {
        if (e.key === 'Escape') closeAltTitlesPopup();
    };
    document.addEventListener('keydown', escapeHandler);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Escape –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    popup._escapeHandler = escapeHandler;
    // --- ‚ú® –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ---

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    setTimeout(() => popup.classList.add('show'), 10);
}

// –§–£–ù–ö–¶–ò–Ø –ó–ê–ö–†–´–¢–ò–Ø –ü–û–ü–ê–ü–ê
function closeAltTitlesPopup() {
    const popup = document.getElementById('custom-alt-titles-popup');
    if (popup) {
        if (popup._escapeHandler) {
            document.removeEventListener('keydown', popup._escapeHandler);
        }
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–∫—Ä—ã—Ç–∏—è
        popup.classList.remove('show');
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Ñ–æ–Ω–∞
        document.body.style.overflow = '';
        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            popup.remove();
        }, 300); // –î–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ CSS
    }
}

// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –Ω–æ–≤–µ–ª–ª–∞ –≤ —Å–ø–∏—Å–∫–µ —á—Ç–µ–Ω–∏—è
 */
function isInReadingList(novelId) {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞, –Ω–æ –µ—Å–ª–∏ –Ω–µ—Ç:
    return STATE.currentUser?.reading_list?.includes(novelId) || false;
}

function renderStars(rating) {
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;
    let stars = '';
    
    for (let i = 0; i < 5; i++) {
        if (i < fullStars) {
            stars += '<span class="star">‚òÖ</span>';
        } else if (i === fullStars && hasHalfStar) {
            stars += '<span class="star">‚òÖ</span>';
        } else {
            stars += '<span class="star empty">‚òÜ</span>';
        }
    }
    return stars;
}

function getAccessLabel(accessType) {
    const labels = {
        public: 'üåê –ü—É–±–ª–∏—á–Ω—ã–π',
        private: 'üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π', 
        link_only: 'üîó –ü–æ —Å—Å—ã–ª–∫–µ'
    };
    return labels[accessType] || accessType;
}

function formatDate(dateString) {
    if (!dateString) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU');
}

function switchDescriptionTab(tabName) {
    document.querySelectorAll('.description-tabs .tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`.tab-btn[onclick*="${tabName}"]`).classList.add('active');
    
    document.querySelectorAll('.novel-description-float .tab-content').forEach(content => {
        content.classList.remove('active');
    });
    document.getElementById(`float-${tabName}`).classList.add('active');
}

function formatDescription(text) {
    if (!text) return '<p>–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è</p>';
    return text.split('\n').filter(p => p.trim() !== '').map(p => `<p>${escapeHtml(p)}</p>`).join('');
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–≤–∞—é—â—É—é –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –ø–æ–ª–∫—É –∏ –µ—ë –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é.
 * @param {object} novel - –û–±—ä–µ–∫—Ç –Ω–æ–≤–µ–ª–ª—ã, –≤–∫–ª—é—á–∞—è –ø–æ–ª–µ novel.userShelves (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫).
 * –£–î–ê–õ–ò–¢–¨/ 
function createFloatingShelfButton(novel) {
    const existingButton = document.querySelector('.floating-shelf-button');
    if (existingButton) {
        existingButton.remove();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤–µ–ª–ª–∞ —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–Ω–æ–π –ø–æ–ª–∫–µ
    const currentUserShelves = novel.userShelves || []; // –ú–∞—Å—Å–∏–≤ –ø–æ–ª–æ–∫ ['reading', 'favorite'] –∏–ª–∏ []
    const isOnAnyShelf = currentUserShelves.length > 0;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –ø–æ–ª–æ–∫ –∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è
    const shelfTypes = {
        want_to_read: '–•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å',
        reading: '–ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å',
        completed: '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ',
        favorite: '–í –ª—é–±–∏–º–æ–µ',
        dropped: '–ë—Ä–æ—à–µ–Ω–æ'
    };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é (–ø–æ–ª–æ–∫)
    let shelfLinksHtml = '';
    Object.entries(shelfTypes).forEach(([type, title]) => {
        const isActive = currentUserShelves.includes(type); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —ç—Ç–∞ –ø–æ–ª–∫–∞
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å active-shelf, –µ—Å–ª–∏ –ø–æ–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
        shelfLinksHtml += `
            <a href="#" class="${isActive ? 'active-shelf' : ''}"
               onclick="handleAddToReadingList(${novel.novel_id}, '${type}')">
                <span>${title}</span>
            </a>`;
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–±—Ä–∞—Ç—å —Å –ø–æ–ª–æ–∫" (—Å–∫—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ isOnAnyShelf = false)
    const removeLinkHtml = `
        <hr style="${isOnAnyShelf ? '' : 'display: none;'}">
        <a href="#" class="remove-link ${isOnAnyShelf ? '' : 'hidden'}"
           onclick="handleRemoveFromReadingList(${novel.novel_id})">
            <span>üóëÔ∏è –£–±—Ä–∞—Ç—å —Å –ø–æ–ª–æ–∫</span>
        </a>`;

    // –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å HTML –∫–Ω–æ–ø–∫–∏ –∏ –º–µ–Ω—é
    const buttonHtml = `
        <div class="floating-shelf-button">
            <button class="btn-float" title="–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–ª–∫—É">
                +
            </button>
            <div class="dropdown-menu">
                ${shelfLinksHtml}
                ${removeLinkHtml}
            </div>
        </div>
    `;

    document.body.insertAdjacentHTML('beforeend', buttonHtml);
}

function removeFloatingShelfButton() {
    // ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º –ø–æ –∫–ª–∞—Å—Å—É .floating-shelf-button, –∞ –Ω–µ –ø–æ id
    const floatingButton = document.querySelector('.floating-shelf-button');
    
    if (floatingButton) {
        floatingButton.remove();
    } 
}

/**
 * ‚ú® NEW: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª–∞–≤
 */
function toggleChapterEditMode(button, forceCancel = false) {
    if (forceCancel) {
        STATE.isChapterEditMode = false;
    } else {
        STATE.isChapterEditMode = !STATE.isChapterEditMode;
    }

    const mainBtn = document.getElementById('toggle-chapter-edit-btn');
    const cancelBtn = document.getElementById('cancel-chapter-edit-btn');
    const listContainer = document.getElementById('chapters-list-v2');

    if (STATE.isChapterEditMode) {
        if (mainBtn) mainBtn.textContent = '‚úÖ –ì–æ—Ç–æ–≤–æ';
        if (cancelBtn) cancelBtn.style.display = 'inline-block';
        if (listContainer) listContainer.classList.add('edit-mode');
    } else {
        if (mainBtn) mainBtn.textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
        if (cancelBtn) cancelBtn.style.display = 'none';
        if (listContainer) listContainer.classList.remove('edit-mode');
    }

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫–∏
    rerenderChapterListFromState();
}

/**
 * ‚ú® NEW: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤
 */
function rerenderChapterListFromState() {
    const container = document.getElementById('chapters-list-v2');
    if (container && window.currentNovelChaptersV2) {
        container.innerHTML = renderChaptersListV2(
            window.currentNovelChaptersV2,
            window.currentNovelHasVolumesV2,
            window.currentNovelCanEditV2,
            window.readChapterIds || []
        );
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—É–ª—Ç–∏–ø—ã
        initializeTooltips();
    }
}

function handleCoverError(img) {
    console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏:', img.src);
    img.style.display = 'none';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º fallback
    const fallback = img.nextElementSibling;
    if (fallback && fallback.classList.contains('no-cover')) {
        fallback.style.display = 'flex';
    }
    
    // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ —ç—Ç–æ Google Drive
    if (img.src.includes('googleusercontent.com')) {
        const fileId = img.src.split('/d/')[1];
        if (fileId) {
            // –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é —Ñ–æ—Ä–º—É —Å—Å—ã–ª–∫–∏
            const alternativeUrl = `https://drive.google.com/thumbnail?id=${fileId}&sz=s1000`;
            setTimeout(() => {
                img.src = alternativeUrl;
                img.style.display = 'block';
                if (fallback) fallback.style.display = 'none';
            }, 1000);
        }
    }
}

function handleCoverLoad(img) {
    console.log('–û–±–ª–æ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', img.src);
    const fallback = img.nextElementSibling;
    if (fallback && fallback.classList.contains('no-cover')) {
        fallback.style.display = 'none';
    }
}

// ==========================================
// –ê–î–ê–ü–¢–ò–í–ù–´–ô –î–ò–ó–ê–ô–ù –î–õ–Ø –î–ï–¢–ê–õ–ï–ô –ù–û–í–ï–õ–õ–´
// ==========================================

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Å–∞–π–¥–±–∞—Ä–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 */
function setupResponsiveSidebar() {
    if (window.innerWidth > 768) return; // –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    
    const infoGrid = document.querySelector('.novel-info-grid');
    if (!infoGrid) return;
    
    // –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Ç–∞–±—ã
    const cover = infoGrid.querySelector('.novel-cover-large');
    const info = infoGrid.querySelector('.novel-details-info');
    
    if (!cover || !info) return;
    
    const tabsContainer = document.createElement('div');
    tabsContainer.className = 'mobile-novel-tabs';
    tabsContainer.innerHTML = `
        <div class="tab-buttons">
            <button class="tab-btn active" data-tab="description">–û–ø–∏—Å–∞–Ω–∏–µ</button>
            <button class="tab-btn" data-tab="info">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</button>
        </div>
        <div class="tab-content tab-content-description active">
            ${cover.innerHTML}
            ${info.querySelector('.novel-description')?.outerHTML || ''}
        </div>
        <div class="tab-content tab-content-info">
            ${info.innerHTML.replace(info.querySelector('.novel-description')?.outerHTML || '', '')}
        </div>
    `;
    
    infoGrid.replaceWith(tabsContainer);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–æ–≤
    tabsContainer.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const tab = this.dataset.tab;
            
            tabsContainer.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
            tabsContainer.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
            
            this.classList.add('active');
            tabsContainer.querySelector(`.tab-content-${tab}`).classList.add('active');
        });
    });
}

/**
 * ‚ú® FINAL VERSION: –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤ V2 —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π —Ç–æ–º–æ–≤ –∏ –≥–ª–∞–≤ –≤–Ω—É—Ç—Ä–∏ –Ω–∏—Ö
 */
function renderChaptersListV2(chapters, hasVolumes, canEdit, readChapterIds = []) {
    if (!chapters || chapters.length === 0) {
        return '<p class="text-muted no-chapters">–ü–æ–∫–∞ –Ω–µ—Ç –≥–ª–∞–≤</p>';
    }

    // 1. –°–æ—Ä—Ç–∏—Ä—É–µ–º –í–°–ï –≥–ª–∞–≤—ã –û–î–ò–ù –†–ê–ó –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    const sortedChapters = [...chapters].sort((a, b) => {
        const orderMultiplier = chapterSortOrder === 'asc' ? 1 : -1;
        const numA = parseFloat(a.chapter_number) || 0;
        const numB = parseFloat(b.chapter_number) || 0;
        const numCompare = numA - numB;
        if (numCompare !== 0) return orderMultiplier * numCompare;
        const volA = a.volume_order || 0;
        const volB = b.volume_order || 0;
        const volCompare = volA - volB;
        if (volCompare !== 0) return orderMultiplier * volCompare;
        const nameA = a.volume_name || '';
        const nameB = b.volume_name || '';
        return orderMultiplier * nameA.localeCompare(nameB);
    });

    // 2. –ï—Å–ª–∏ —Ç–æ–º–æ–≤ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if (!hasVolumes) {
        return sortedChapters.map(ch => renderChapterItemV2(ch, canEdit, readChapterIds.includes(ch.chapter_id))).join('');
    }

    // 3. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≥–ª–∞–≤—ã –ø–æ —Ç–æ–º–∞–º (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∏ –∫–ª—é—á–µ–π)
    const volumes = {};
    sortedChapters.forEach(ch => {
        const volName = ch.volume_name || '–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–º'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º "–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–º"
        // –ö–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ–º–æ–≤
        const volKey = `${String(ch.volume_order || 9999).padStart(5, '0')}-${volName}`;
        if (!volumes[volKey]) {
            volumes[volKey] = { name: volName }; // –ù–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∏–º—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        }
        // –°–∞–º–∏ –≥–ª–∞–≤—ã —Ö—Ä–∞–Ω–∏—Ç—å –∑–¥–µ—Å—å –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ
    });

    console.log('–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–æ–º–æ–≤:', volumes);

    // 4. –°–æ—Ä—Ç–∏—Ä—É–µ–º –ö–õ–Æ–ß–ò —Ç–æ–º–æ–≤ —Å —É—á–µ—Ç–æ–º "–û—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ–º–∞" –∏ chapterSortOrder
    const sortedVolumeKeys = Object.keys(volumes).sort((keyA, keyB) => {
        const orderMultiplier = chapterSortOrder === 'asc' ? 1 : -1;
        
        // ‚ú® –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á –ø–æ –∏–º–µ–Ω–∏, –∞ –Ω–µ –ø–æ –Ω–æ–º–µ—Ä—É "09999"
        const isA_Main = keyA.endsWith('-–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–º');
        const isB_Main = keyB.endsWith('-–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–º');

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è "–û—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ–º–∞"
        if (isA_Main && !isB_Main) {
            // A = "–û—Å–Ω–æ–≤–Ω–æ–π", B = "–ù–æ–º–µ—Ä–Ω–æ–π"
            // –¶–µ–ª—å (asc): –û—Å–Ω–æ–≤–Ω–æ–π –ü–ï–†–í–´–ô. A –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –î–û B. -> return -1
            // –¶–µ–ª—å (desc): –û—Å–Ω–æ–≤–Ω–æ–π –ü–û–°–õ–ï–î–ù–ò–ô. A –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï B. -> return 1
            return chapterSortOrder === 'asc' ? -1 : 1; 
        }
        if (!isA_Main && isB_Main) {
            // A = "–ù–æ–º–µ—Ä–Ω–æ–π", B = "–û—Å–Ω–æ–≤–Ω–æ–π"
            // –¶–µ–ª—å (asc): –û—Å–Ω–æ–≤–Ω–æ–π (B) –ü–ï–†–í–´–ô. A –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï B. -> return 1
            // –¶–µ–ª—å (desc): –û—Å–Ω–æ–≤–Ω–æ–π (B) –ü–û–°–õ–ï–î–ù–ò–ô. A –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –î–û B. -> return -1
            return chapterSortOrder === 'asc' ? 1 : -1; 
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–æ–º–æ–≤ (–∏–ª–∏ –µ—Å–ª–∏ –æ–±–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ / –æ–±–∞ –Ω–µ –æ—Å–Ω–æ–≤–Ω—ã–µ)
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ª–Ω–æ–º—É –∫–ª—é—á—É (–∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä —Ç–æ–º–∞)
        return keyA.localeCompare(keyB) * orderMultiplier;
    });


    // 5. –†–µ–Ω–¥–µ—Ä–∏–º —Å–µ–∫—Ü–∏–∏ —Ç–æ–º–æ–≤ –≤ –ü–†–ê–í–ò–õ–¨–ù–û–ú –ü–û–†–Ø–î–ö–ï
    return sortedVolumeKeys.map(volKey => {
        const volume = volumes[volKey]; // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–æ–º–∞

        // –§–ò–õ–¨–¢–†–£–ï–ú –£–ñ–ï –û–¢–°–û–†–¢–ò–†–û–í–ê–ù–ù–´–ô —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤ sortedChapters –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–º–∞
        const chaptersForVolume = sortedChapters.filter(ch => {
            const currentVolName = ch.volume_name || '–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–º';
            const currentVolOrder = ch.volume_order || 9999;
            const currentVolKey = `${String(currentVolOrder).padStart(5, '0')}-${currentVolName}`;
            return currentVolKey === volKey;
        });

        // –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–º–∞ –Ω–µ—Ç –≥–ª–∞–≤ (–Ω–µ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        if (chaptersForVolume.length === 0) return '';

        // –†–µ–Ω–¥–µ—Ä–∏–º —Å–µ–∫—Ü–∏—é —Ç–æ–º–∞ —Å –£–ñ–ï –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≥–ª–∞–≤–∞–º–∏
        return `
            <div class="volume-section-v2">
                <div class="volume-header-v2" onclick="toggleVolumeV2(this)">
                    ${escapeHtml(volume.name)}
                    <span class="volume-chapter-count">(${chaptersForVolume.length} –≥–ª–∞–≤)</span>
                    <span class="volume-toggle-icon">‚ñº</span>
                </div>
                <div class="volume-chapters-v2">
                    ${chaptersForVolume.map(ch => renderChapterItemV2(ch, canEdit, readChapterIds.includes(ch.chapter_id))).join('')}
                </div>
            </div>
        `;
    }).join('');
}

/**
 * –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø: –†–µ–Ω–¥–µ—Ä–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É (–≥–ª–∞–≤—É) –¥–ª—è —Å–ø–∏—Å–∫–∞ V2
 */
function renderChapterItemV2(chapter, canEdit, isRead) {
    const isOwner = STATE.currentUser?.role === 'owner';
    const readClass = isRead ? 'read' : 'unread'; // –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥–ª—è tooltip
    const updatedDateStr = formatDateOnly(chapter.updated_at || chapter.created_at);
    const createdDateStr = formatDateTooltip(chapter.created_at);
    const tooltipText = `–î–æ–±–∞–≤–ª–µ–Ω–æ: ${createdDateStr}`;

    // --- ‚ú® –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ö–ù–û–ü–û–ö ---
    let actionsHtml = '';
    if (canEdit && STATE.isChapterEditMode) {
        // –†–ï–ñ–ò–ú –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "Edit" –∏ "Delete"
        actionsHtml = `
            <button class="btn btn-sm btn-icon" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" onclick="event.stopPropagation(); navigateTo('edit-chapter', {id: '${chapter.chapter_id}'})">
                ‚úèÔ∏è
            </button>
            <button class="btn btn-sm btn-icon btn-danger" title="–£–¥–∞–ª–∏—Ç—å" onclick="event.stopPropagation(); handleDeleteChapter('${chapter.chapter_id}', '${escapeHtml(chapter.chapter_title)}')">
                üóëÔ∏è
            </button>
        `;
    } else if (isOwner) {
        // –û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "Docs" –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        actionsHtml = `
            <a href="https://docs.google.com/document/d/${chapter.file_id}/edit" 
               target="_blank" 
               class="btn btn-sm btn-ghost" 
               title="–û—Ç–∫—Ä—ã—Ç—å –≤ Google Docs"
               onclick="event.stopPropagation()">
                üìÑ Docs
            </a>
        `;
    }
    // -----------------------------

    return `
        <div class="chapter-item-v2 ${readClass}">
            <div class="ch-num">${chapter.chapter_number}</div>
            <div class="ch-title">
                <a href="/?page=chapter-read&id=${chapter.chapter_id}" onclick="handleLinkClick(event)">
                    ${escapeHtml(chapter.chapter_title)}
                </a>
            </div>
            <div class="ch-words">${formatNumber(chapter.word_count || 0)}</div>
            <div class="ch-updated" data-tooltip="${tooltipText}">${updatedDateStr}</div>
            
            ${actionsHtml ? `<div class="ch-actions">${actionsHtml}</div>` : ''}
        </div>
    `;
}

/**
 * –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≥–ª–∞–≤ V2
 */
function toggleChapterOrderV2() {
    chapterSortOrder = chapterSortOrder === 'asc' ? 'desc' : 'asc';

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const sortBtn = document.getElementById('chapter-sort-btn-v2');
    if (sortBtn) {
        sortBtn.textContent = chapterSortOrder === 'asc' ? '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: ‚Üë –°—Ç–∞—Ä—ã–µ' : '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: ‚Üì –ù–æ–≤—ã–µ';
    }

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤
    const container = document.getElementById('chapters-list-v2');
    if (container && window.currentNovelChaptersV2) {
        container.innerHTML = renderChaptersListV2(
            window.currentNovelChaptersV2,
            window.currentNovelHasVolumesV2,
            window.currentNovelCanEditV2,
            window.readChapterIds || [] // –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ ID
        );
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—É–ª—Ç–∏–ø—ã, —Ç–∞–∫ –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω—ã
        initializeTooltips(); 
    }
}

/**
 * –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø: –°–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ç–æ–º V2
 */
function toggleVolumeV2(headerElement) {
    const volumeSection = headerElement.closest('.volume-section-v2');
    if (volumeSection) {
        volumeSection.classList.toggle('collapsed');
    }
}


// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç ---
function formatDateShort(dateString) {
    if (!dateString) return '-';
    try {
        const date = new Date(dateString);
        // –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú
        return date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        }) + ' ' + date.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });
    } catch (e) {
        return dateString;
    }
}

function formatDateTooltip(dateString) {
     if (!dateString) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    try {
        const date = new Date(dateString);
        // –§–æ—Ä–º–∞—Ç: –î–î –ú–µ—Å—è—Ü–∞ –ì–ì–ì–ì, –ß–ß:–ú–ú:–°–°
        return date.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        }) + ', ' + date.toLocaleTimeString('ru-RU');
    } catch (e) {
        return dateString;
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì
 */
function formatDateOnly(dateString) {
    if (!dateString) return '-';
    try {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
    } catch (e) {
        return dateString; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
}

function initializeTooltips() {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π tooltip, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (tooltipElement) {
        tooltipElement.remove();
        tooltipElement = null;
    }

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç tooltip –æ–¥–∏–Ω —Ä–∞–∑
    tooltipElement = document.createElement('div');
    tooltipElement.id = 'dynamic-tooltip';
    tooltipElement.className = 'tooltip-v2';
    document.body.appendChild(tooltipElement);

    const elementsWithTooltip = document.querySelectorAll('[data-tooltip]');

    elementsWithTooltip.forEach(elem => {
        elem.addEventListener('mouseenter', showTooltip);
        elem.addEventListener('mouseleave', hideTooltip);
        elem.addEventListener('mousemove', moveTooltip);
    });
}

function showTooltip(event) {
    const text = event.target.getAttribute('data-tooltip');
    if (!tooltipElement || !text) return;
    tooltipElement.textContent = text;
    tooltipElement.style.display = 'block';
    moveTooltip(event); // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
}

function hideTooltip() {
    if (!tooltipElement) return;
    tooltipElement.style.display = 'none';
}

/**
 * ‚ú® UPDATED: –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç tooltip —Å —É—á–µ—Ç–æ–º –≥—Ä–∞–Ω–∏—Ü —ç–∫—Ä–∞–Ω–∞
 */
function moveTooltip(event) {
    if (!tooltipElement || tooltipElement.style.display === 'none') return;

    const tooltipWidth = tooltipElement.offsetWidth;
    const tooltipHeight = tooltipElement.offsetHeight;
    const cursorPadding = 15; // –û—Ç—Å—Ç—É–ø –æ—Ç –∫—É—Ä—Å–æ—Ä–∞

    let left = event.pageX + cursorPadding;
    let top = event.pageY + cursorPadding;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π
    if (left + tooltipWidth > window.innerWidth) {
        left = event.pageX - tooltipWidth - cursorPadding; // –°–º–µ—â–∞–µ–º –≤–ª–µ–≤–æ –æ—Ç –∫—É—Ä—Å–æ—Ä–∞
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π
    if (top + tooltipHeight > window.innerHeight) {
        top = event.pageY - tooltipHeight - cursorPadding; // –°–º–µ—â–∞–µ–º –≤–≤–µ—Ä—Ö –æ—Ç –∫—É—Ä—Å–æ—Ä–∞
    }

    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —É—Ö–æ–¥–∏–ª–æ –∑–∞ –ª–µ–≤—ã–π/–≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π
    left = Math.max(5, left); // –ú–∏–Ω–∏–º—É–º 5px –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
    top = Math.max(5, top);   // –ú–∏–Ω–∏–º—É–º 5px –æ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è

    tooltipElement.style.left = `${left}px`;
    tooltipElement.style.top = `${top}px`;
}

// ==========================================
// –ß–¢–ï–ù–ò–ï –ì–õ–ê–í–´
// ==========================================

// –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é renderChapterReadPage
async function renderChapterReadPage(chapterId) {
    const container = document.getElementById('page-content-container');
    if (!container) return;

    showLoading(true, { animationType: 'bubbles' });
    
    container.innerHTML = `<div class="page-content chapter-read-page"></div>`;
    
    try {
        // –í–ê–ñ–ù–û: –Ø –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –æ—Ç 'getChapter'
        // —Ç–µ–ø–µ—Ä—å —Ç–∞–∫–∂–µ –≤–∫–ª—é—á–∞–µ—Ç:
        // response.chapter.allChapters (–º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –≥–ª–∞–≤ –Ω–æ–≤–µ–ª–ª—ã)
        // response.chapter.prevChapterId (ID –∏–ª–∏ null)
        // response.chapter.nextChapterId (ID –∏–ª–∏ null)
        const response = await apiRequest('getChapter', { id: chapterId });
        
        if (response.success && response.chapter) {
            const chapter = response.chapter;
            window.currentChapterData = chapter;

            // --- ‚ú® –ù–ê–ß–ê–õ–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º ‚ú® ---
            if (STATE.currentUser) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –≥–ª–∞–≤–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ (—á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –ª–∏—à–Ω–∏–π –∑–∞–ø—Ä–æ—Å)
                if (!window.readChapterIds || !window.readChapterIds.includes(chapterId)) {
                    console.log(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–∞–µ–º –≥–ª–∞–≤—É ${chapterId} –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—É—é...`);
                    // –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ë–ï–ó await, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
                    handleMarkAsRead(chapterId, chapter.novel_id, true)
                        .then(() => {
                            updateMarkReadUnreadButtons(chapterId);
                            if (window.readChapterIds && !window.readChapterIds.includes(chapterId)) {
                               window.readChapterIds.push(chapterId);
                            }
                        })
                        .catch(error => {
                            // –õ–æ–≥ –æ—à–∏–±–∫–∏ —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ –≤–Ω—É—Ç—Ä–∏ handleMarkAsRead
                            // console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—Ç–∏—Ç—å –≥–ª–∞–≤—É ${chapterId}:`, error);
                        });
                } else {
                    console.log(`–ì–ª–∞–≤–∞ ${chapterId} —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–∞—è.`);
                }
            }
            // --- ‚ú® –ö–û–ù–ï–¶: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º ‚ú® ---
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–≤–µ—Ä–ª–µ—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            window.currentChapterList = chapter.allChapters || [];
            window.currentNovelIdForNav = chapter.novel_id;
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
            const breadcrumbs = getBreadcrumbs('chapter-read', {
                novelId: chapter.novel_id,
                novelTitle: chapter.novel_title,
                chapterTitle: `–ì–ª–∞–≤–∞ ${chapter.chapter_number}`
            });

            // –†–µ–Ω–¥–µ—Ä–∏–º –≤—Å—ë
            renderChapterContentV2(chapter, breadcrumbs); 

            const overlay = document.getElementById('chapter-load-overlay');
            if (overlay) overlay.style.display = 'none';
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º JS –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞ —Ö–µ–¥–µ—Ä–∞
            setupReaderHeaderScroll();
        } else {
            throw new Error('–ì–ª–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
    } catch (error) {
        container.innerHTML = `
            <div class="error-page">
                <h3>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤—ã</h3>
                <p>${error.message}</p>
                <button class="btn btn-primary" onclick="goBackInHistory()">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è</button>
            </div>
        `;
    } finally {
        showLoading(false);
        const overlay = document.getElementById('chapter-load-overlay');
        if (overlay) overlay.style.display = 'none';
    }
}

// –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é renderChapterContentV2
function renderChapterContentV2(chapter, breadcrumbsHtml) { 
    const container = document.querySelector('.chapter-read-page');
    if (!container) return;
    
    // --- 1. HTML –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ö–µ–¥–µ—Ä–∞ ---
    const readerHeaderHtml = `
        <header class="reader-header" id="reader-header">
            <div class="reader-header-left">
                <a href="/?page=novel-details&id=${chapter.novel_id}" onclick="handleLinkClick(event)" class="btn-reader-back" title="–ö –Ω–æ–≤–µ–ª–ª–µ">
                    <span>‚Üê</span>
                </a>
            </div>
            <div class="reader-header-center">
                <button class="btn-reader-title" onclick="toggleChapterQuickNav()">
                    <span>
                        –ì–ª. ${chapter.chapter_number}: ${escapeHtml(chapter.chapter_title)}
                    </span>
                    <span class="title-caret">‚ñº</span>
                </button>
            </div>
            <div class="reader-header-right">
                <button class="btn btn-ghost btn-sm" onclick="toggleReadingSettings()" title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á—Ç–µ–Ω–∏—è">
                    ‚öôÔ∏è
                </button>
            </div>
        </header>
    `;

    // --- 2. HTML –¥–ª—è –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ---
    const bottomNavHtml = `
        <div class="reader-bottom-nav">
            ${chapter.prevChapterId ? 
                `<a href="/?page=chapter-read&id=${chapter.prevChapterId}" onclick="handleLinkClick(event)" class="btn btn-nav-prev">
                    ‚Üê <span class="nav-text">–ü—Ä–µ–¥—ã–¥—É—â–∞—è</span>
                 </a>` : 
                '<span></span>' /* –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è */
            }
            
            <a href="/?page=novel-details&id=${chapter.novel_id}" onclick="handleLinkClick(event)" class="btn btn-nav-toc">
                –û–≥–ª–∞–≤–ª–µ–Ω–∏–µ
            </a>
            
            ${chapter.nextChapterId ? 
                `<a href="/?page=chapter-read&id=${chapter.nextChapterId}" onclick="handleLinkClick(event)" class="btn btn-nav-next">
                    <span class="nav-text">–°–ª–µ–¥—É—é—â–∞—è</span> ‚Üí
                 </a>` : 
                '<span></span>' /* –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è */
            }
        </div>
    `;

    // --- 3. HTML –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Å –∫—Ä–æ—à–∫–∞–º–∏) ---
    const contentHtml = `
        <article class="chapter-content-wrapper">
            
            ${breadcrumbsHtml} 
            
            <div class="chapter-text" id="chapter-text">
                ${chapter.content ? formatChapterText(chapter.content) : `
                    <div class="no-content">
                        <p>–¢–µ–∫—Å—Ç –≥–ª–∞–≤—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω</p>
                    </div>
                `}
            </div>
            
            ${bottomNavHtml}
            
        </article>
    `;
    
    // –°–Ω–∞—á–∞–ª–∞ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ö–µ–¥–µ—Ä, –ø–æ—Ç–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    container.innerHTML = readerHeaderHtml + contentHtml;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    const settings = getReadingSettings();
    setTimeout(() => applyReadingSettings(settings), 100);
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –æ–≤–µ—Ä–ª–µ–π –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥–ª–∞–≤–∞–º
 */
function toggleChapterQuickNav() {
    let overlay = document.getElementById('quick-nav-overlay');
    
    // –ï—Å–ª–∏ –æ–≤–µ—Ä–ª–µ–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!overlay) {
        overlay = renderChapterQuickNav();
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º
    const isVisible = overlay.classList.toggle('show');
    document.body.style.overflow = isVisible ? 'hidden' : '';
    
    // –ï—Å–ª–∏ –ø–æ–∫–∞–∑–∞–ª–∏, —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–∏—Å–∫–µ
    if (isVisible) {
        const searchInput = document.getElementById('quick-nav-search');
        if (searchInput) {
            searchInput.focus();
        }
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç HTML –¥–ª—è –æ–≤–µ—Ä–ª–µ—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è 1 —Ä–∞–∑)
 */
function renderChapterQuickNav() {
    const chapters = window.currentChapterList || [];
    const novelId = window.currentNovelIdForNav || null;

    const sortedChaptersForNav = [...chapters].sort((a, b) => {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–º–µ—Ä–∞ –≥–ª–∞–≤ –≤ —á–∏—Å–ª–∞ (parseFloat –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥—Ä–æ–±–Ω—ã—Ö)
        const numA = parseFloat(a.chapter_number) || 0;
        const numB = parseFloat(b.chapter_number) || 0;

        return numA - numB;

    });

    const overlay = document.createElement('div');
    overlay.id = 'quick-nav-overlay';
    
    const listHtml = sortedChaptersForNav.length > 0
        ? sortedChaptersForNav.map(ch => `
            <a href="/?page=chapter-read&id=${ch.chapter_id}"
               class="quick-nav-item"
               onclick="handleLinkClick(event); toggleChapterQuickNav()">
                <span class="quick-nav-number">–ì–ª. ${ch.chapter_number}</span>
                <span class="quick-nav-title">${escapeHtml(ch.chapter_title)}</span>
            </a>
          `).join('')
        : '<p class="text-muted">–°–ø–∏—Å–æ–∫ –≥–ª–∞–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω</p>';

    overlay.innerHTML = `
        <div class="quick-nav-header">
            <input type="text" id="quick-nav-search" class="form-input" 
                   placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é..."
                   oninput="filterQuickNav(this.value)">
            <button class="quick-nav-close" onclick="toggleChapterQuickNav()">√ó</button>
        </div>
        <div class="quick-nav-list">
            ${listHtml}
        </div>
        ${novelId ? `
            <div class="quick-nav-footer">
                <a href="/?page=novel-details&id=${novelId}" 
                   class="btn btn-secondary"
                   onclick="handleLinkClick(event); toggleChapterQuickNav()">
                    –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—é
                </a>
            </div>
        ` : ''}
    `;
    
    document.body.appendChild(overlay);
    return overlay;
}

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤ –æ–≤–µ—Ä–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 */
function filterQuickNav(query) {
    const list = document.querySelector('.quick-nav-list');
    if (!list) return;
    
    const items = list.getElementsByTagName('a');
    const normalizedQuery = query.toLowerCase().trim();
    
    for (let item of items) {
        const text = item.textContent.toLowerCase();
        if (text.includes(normalizedQuery)) {
            item.style.display = 'flex';
        } else {
            item.style.display = 'none';
        }
    }
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–≤—Ç–æ-—Å–∫—Ä—ã—Ç–∏–µ —Ö–µ–¥–µ—Ä–∞ (–° –õ–û–ì–ê–ú–ò, V10 - –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ scrollTop)
 */
function setupReaderHeaderScroll() {
    const header = document.getElementById('reader-header');
    if (!header) {
        console.error("–•–µ–¥–µ—Ä —á—Ç–µ–Ω–∏—è ('reader-header') –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        return;
    }
    console.log("setupReaderHeaderScroll: –•–µ–¥–µ—Ä –Ω–∞–π–¥–µ–Ω, –≤—ã—Å–æ—Ç–∞:", header.offsetHeight);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º lastScrollTop –ü–†–ê–í–ò–õ–¨–ù–´–ú —Ç–µ–∫—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    let lastScrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
    const delta = 250;
    const headerHeight = header.offsetHeight;

    // –¶–µ–ª—å - window
    const scrollTarget = window;
    const scrollTargetName = 'window';

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞
    currentScrollHandler = (event) => {
        // ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è scrollTop ‚ú®
        let st = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Å–∫—Ä–æ–ª–ª —É –≤–µ—Ä—Ö–∞
        if (st > 5 && Math.abs(lastScrollTop - st) <= delta) {
             return;
         }

        // --- –õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
        if (st > lastScrollTop && st > headerHeight){
          header.classList.add('is-hidden');
        } else {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ —Å–∫—Ä–æ–ª–ª–∏–º –≤–≤–µ—Ä—Ö –ò–õ–ò –ø–æ—á—Ç–∏ —É —Å–∞–º–æ–≥–æ –≤–µ—Ä—Ö–∞
          if (st < lastScrollTop || st <= 5) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∞—Å—Å –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
              if (header.classList.contains('is-hidden')) {
                  header.classList.remove('is-hidden');
              }
          }
        }
        // --------------------------------------------------------

        lastScrollTop = st <= 0 ? 0 : st;
    };

    // –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å —Ñ–∞–∑–æ–π –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º)
    setTimeout(() => {
        if (currentScrollHandler) {
             scrollTarget.addEventListener('scroll', currentScrollHandler, {
                 capture: true,
                 passive: true
             });
            console.log(`setupReaderHeaderScroll: Scroll listener ADDED (delayed & capturing) to '${scrollTargetName}'.`);
        } else {
            console.log(`setupReaderHeaderScroll: Listener was cleared before delayed attachment.`);
        }
    }, 100);

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ mousemove (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    let mouseMoveTimeout;
    const mouseMoveHandler = (e) => {
        clearTimeout(mouseMoveTimeout);
        mouseMoveTimeout = setTimeout(() => {
            if (e.clientY < 80) {
                 // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∞—Å—Å –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                 if (header.classList.contains('is-hidden')) {
                     console.log("MouseMove near top: Forcing header visible");
                     header.classList.remove('is-hidden');
                 }
            }
        }, 100);
    };
    document.addEventListener('mousemove', mouseMoveHandler);
    console.log("setupReaderHeaderScroll: MouseMove listener added.");

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å (window) –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ mousemove
    currentScrollHandler._scrollTarget = scrollTarget;
    currentScrollHandler._mouseMoveHandler = mouseMoveHandler;

     // –ö–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –≤ renderPage –ù–ï –º–µ–Ω—è–µ–º!
}

// ==========================================
// –§–û–†–ú–ê –ù–û–í–ï–õ–õ–´ (–í–ò–†–¢–£–ê–õ–¨–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê)
// ==========================================

async function renderNovelFormPage(novelId = null) {
    const container = document.getElementById('page-content-container');
    if (!container) return;
    
    const isEdit = !!novelId;
    let novelData = null;
    
    if (isEdit) {
        showLoading(true, { title: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...' });
        try {
            // ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è API-–¥–µ–π—Å—Ç–≤–∏—è 'getNovel'
            const response = await apiRequest('getNovel', { id: novelId }, true);
            if (response.success && response.novel) {
                novelData = response.novel;
            } else {
                throw new Error(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–µ–ª–ª—ã.');
            }
        } catch (error) {
            showToast(error.message, 'error');
            showLoading(false);
            goBackInHistory(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return;
        }
        showLoading(false);
    }
    
    if (STATE.genresAndTags.genres.length === 0) {
        await loadGenresAndTags();
    }

    const pageType = isEdit ? 'edit-novel' : 'add-novel';
    // ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
    const breadcrumbs = getBreadcrumbs(pageType, { 
        id: novelId, 
        title: novelData ? novelData.title : '–ù–æ–≤–µ–ª–ª–∞' 
    });
    
    container.innerHTML = `
        <div class="page-content">
            ${breadcrumbs}
            <div class="novel-form-page">
                <h1>${isEdit ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã' : '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–µ–ª–ª—É'}</h1>
                
                <form id="novel-form" class="novel-form">
                    <input type="hidden" name="novel_id" value="${novelId || ''}">
                    
                    <fieldset class="form-section">
                        <legend>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</legend>
                        
                        <div class="form-group">
                            <label for="novel-title">–ù–∞–∑–≤–∞–Ω–∏–µ *</label>
                            <input type="text" id="novel-title" name="title" class="form-input" required
                                   value="${novelData ? escapeHtml(novelData.title) : ''}" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã">
                        </div>

                        <div class="form-group">
                            <label for="alt-title-input">–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è</label>
                            <div class="input-group">
                                <input type="text" id="alt-title-input" class="form-input"
                                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '+'">
                                <button type="button" class="btn btn-secondary" onclick="addAltTitleTag()" style="border-radius: 0 var(--radius-md) var(--radius-md) 0;">+</button>
                            </div>
                            <div id="alt-titles-container" class="tags-container" style="margin-top: 0.75rem;"></div>
                            <input type="hidden" id="novel-alt-titles" name="alt_titles" value="${novelData ? escapeHtml(novelData.alt_titles || '') : ''}">
                        </div>
                        
                        <div class="form-group">
                            <label for="novel-author">–ê–≤—Ç–æ—Ä *</label>
                            <input type="text" id="novel-author" name="author" class="form-input" required
                                   value="${novelData ? escapeHtml(novelData.author) : ''}" placeholder="–ò–º—è –∞–≤—Ç–æ—Ä–∞">
                        </div>
                        
                        <div class="form-group">
                            <label for="novel-description">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                            <textarea id="novel-description" name="description" class="form-textarea" rows="8"
                                      placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—é–∂–µ—Ç–∞...">${novelData ? escapeHtml(novelData.description || '') : ''}</textarea>
                            <small class="form-help">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–ª–∏–Ω–∞ - –¥–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤</small>
                        </div>
                    </fieldset>
                    
                    <fieldset class="form-section">
                        <legend>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</legend>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label for="original-language">–Ø–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞</label>
                                <select id="original-language" name="language" class="form-select">
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ...</option>
                                    ${STATE.config.LANGUAGES ? STATE.config.LANGUAGES.map(lang => 
                                        `<option value="${lang}" ${novelData && novelData.language === lang ? 'selected' : ''}>${lang}</option>`
                                    ).join('') : ''}
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="novel-year">–ì–æ–¥</label>
                                <input type="number" id="novel-year" name="year" class="form-input"
                                       value="${novelData ? escapeHtml(novelData.year || '') : ''}" placeholder="2025">
                            </div>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label for="original-chapter-count">–ì–ª–∞–≤ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ</label>
                                <input type="number" id="original-chapter-count" name="original_chapter_count" class="form-input"
                                       placeholder="0" value="${novelData ? escapeHtml(novelData.original_chapter_count || '') : ''}" min="0">
                            </div>
                            <div class="form-group">
                                <label for="original-word-count">–°–ª–æ–≤–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ</label>
                                <input type="number" id="original-word-count" name="original_word_count" class="form-input"
                                       placeholder="0" value="${novelData ? escapeHtml(novelData.original_word_count || '') : ''}" min="0">
                            </div>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label for="original-status">–°—Ç–∞—Ç—É—Å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞</label>
                                <select id="original-status" name="original_status" class="form-select">
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ...</option>
                                    ${STATE.config.STATUS_OPTIONS ? STATE.config.STATUS_OPTIONS.map(status => 
                                        `<option value="${status}" ${novelData && novelData.original_status === status ? 'selected' : ''}>${status}</option>`
                                    ).join('') : ''}
                                </select>
                            </div>
                             <div class="form-group">
                                <label for="translation-status">–°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥–∞</label>
                                <select id="translation-status" name="translation_status" class="form-select">
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ...</option>
                                    ${STATE.config.STATUS_OPTIONS ? STATE.config.STATUS_OPTIONS.map(status => 
                                        `<option value="${status}" ${novelData && novelData.translation_status === status ? 'selected' : ''}>${status}</option>`
                                    ).join('') : ''}
                                </select>
                            </div>
                        </div>

                         <div class="form-row">
                            <div class="form-group">
                                <label for="era">–≠—Ä–∞</label>
                                <select id="era" name="era" class="form-select">
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ...</option>
                                    ${STATE.config.ERAS ? STATE.config.ERAS.map(era => 
                                        `<option value="${era}" ${novelData && novelData.era === era ? 'selected' : ''}>${era}</option>`
                                    ).join('') : ''}
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="perspective">–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞</label>
                                <select id="perspective" name="perspective" class="form-select">
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ...</option>
                                    ${STATE.config.PERSPECTIVES ? STATE.config.PERSPECTIVES.map(p => 
                                        `<option value="${p}" ${novelData && novelData.perspective === p ? 'selected' : ''}>${p}</option>`
                                    ).join('') : ''}
                                </select>
                            </div>
                             <div class="form-group">
                                <label for="orientation">–¢–∏–ø –æ—Ç–Ω–æ—à–µ–Ω–∏–π</label>
                                <select id="orientation" name="orientation" class="form-select">
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ...</option>
                                    ${STATE.config.ORIENTATIONS ? STATE.config.ORIENTATIONS.map(o => 
                                        `<option value="${o}" ${novelData && novelData.orientation === o ? 'selected' : ''}>${o}</option>`
                                    ).join('') : ''}
                                </select>
                            </div>
                        </div>
                    </fieldset>
                    
                    <fieldset class="form-section">
                        <legend>–¢–µ–≥–∏ –∏ –º–µ—Ç–∫–∏</legend>
                        
                        <div class="form-group">
                            <label>–¢–µ–≥–∏</label>
                            <input type="text" id="tags-input" class="form-input" 
                                   placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Ç–µ–≥..."
                                   list="tags-datalist"
                                   autocomplete="off">
                            <datalist id="tags-datalist">
                                ${STATE.genresAndTags.tags.map(t => 
                                    `<option value="${escapeHtml(t.name)}">`
                                ).join('')}
                            </datalist>
                            <div id="tags-container" class="tags-container">
                                ${novelData && novelData.tags ? novelData.tags.map(t => 
                                    `<span class="selected-tag" data-value="${escapeHtml(t.name)}">
                                        ${escapeHtml(t.name)} 
                                        <button type="button" onclick="removeTag(this)">√ó</button>
                                    </span>`
                                ).join('') : ''}
                            </div>
                            <small class="form-help">–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</small>
                        </div>
                    </fieldset>

                    <fieldset class="form-section">
                        <legend>–û–±–ª–æ–∂–∫–∞ –∏ —Å—Å—ã–ª–∫–∏</legend>
                        <div class="form-group">
                            <label>–û–±–ª–æ–∂–∫–∞</label>
                            <div class="cover-input">
                                <label class="form-radio">
                                    <input type="radio" name="cover-type" value="url" checked>
                                    URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                </label>
                                <label class="form-radio">
                                    <input type="radio" name="cover-type" value="file">
                                    –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
                                </label>
                            </div>
                            <input type="url" id="cover-url" name="cover_url"
                                   class="form-input" 
                                   placeholder="https://example.com/cover.jpg"
                                   value="${novelData && novelData.cover_url ? escapeHtml(novelData.cover_url) : ''}">
                            <input type="file" id="cover-file" accept="image/*" 
                                   class="form-input hidden">
                            <small class="form-help">üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF, WebP (–º–∞–∫—Å 10 –ú–ë)</small>
                            
                            <!-- –ü–†–ï–î–ü–†–û–°–ú–û–¢–† -->
                            <div id="cover-preview-container" class="cover-preview hidden">
                                <div class="preview-header">
                                    <span id="cover-preview-filename">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</span>
                                    <button type="button" id="remove-preview" class="btn-icon" title="–£–¥–∞–ª–∏—Ç—å">‚ùå</button>
                                </div>
                                <img id="cover-preview-image" alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±–ª–æ–∂–∫–∏">
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="novel-links">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏</label>
                            <textarea id="novel-links" name="additional_links" 
                                      class="form-textarea" rows="2"
                                      placeholder="–°—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã, —Å–∞–π—Ç—ã –∏ —Ç.–¥.">${novelData && novelData.additional_links ? escapeHtml(novelData.additional_links) : ''}</textarea>
                        </div>
                    </fieldset>

                    <fieldset class="form-section">
                        <legend>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞</legend>
                        <div class="form-group">
                            <label for="access-type">–¢–∏–ø –¥–æ—Å—Ç—É–ø–∞</label>
                            <select id="access-type" name="access_type" class="form-select">
                                <option value="public" ${!novelData || novelData.access_type === 'public' ? 'selected' : ''}>
                                    –ü—É–±–ª–∏—á–Ω—ã–π (–≤—Å–µ –≤–∏–¥—è—Ç)
                                </option>
                                <option value="link_only" ${novelData && novelData.access_type === 'link_only' ? 'selected' : ''}>
                                    –ü–æ —Å—Å—ã–ª–∫–µ
                                </option>
                                <option value="private" ${novelData && novelData.access_type === 'private' ? 'selected' : ''}>
                                    –ü—Ä–∏–≤–∞—Ç–Ω—ã–π (—Ç–æ–ª—å–∫–æ —è)
                                </option>
                            </select>
                            <small class="form-help">–ü—É–±–ª–∏—á–Ω—ã–µ –Ω–æ–≤–µ–ª–ª—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ</small>
                        </div>
                        <div class="form-group">
                            <label class="form-checkbox">
                                <input type="checkbox" id="is-personal-novel" name="is_personal"
                                    ${novelData && novelData.is_personal ? 'checked' : ''}>
                                –°–æ–∑–¥–∞—Ç—å –∫–∞–∫ –ª–∏—á–Ω—É—é –Ω–æ–≤–µ–ª–ª—É
                            </label>
                            <small class="form-help">
                                –ù–æ–≤–µ–ª–ª–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤ –≤–∞—à–µ–π –ª–∏—á–Ω–æ–π –ø–∞–ø–∫–µ Google Drive –∏ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–∞–º.
                            </small>
                        </div>
                    </fieldset>
                    
                    <div class="form-actions">
                        <button type="submit" class="btn btn-primary btn-lg">
                            ${isEdit ? 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–µ–ª–ª—É'}
                        </button>
                        <button type="button" class="btn btn-secondary" onclick="goBackInHistory()">
                            ‚ùå –û—Ç–º–µ–Ω–∞
                        </button>
                    </div>
                </form>
            </div>
        </div>
    `;
    
    setupNovelForm();
    setupCoverPreview();
    setupAuthorAutocomplete();
    setupAltTitlesInput();
}

function setupNovelForm() {
    const form = document.getElementById('novel-form');
    if (form) {
        form.addEventListener('submit', handleNovelSubmit);
    }

    form.addEventListener('keydown', (e) => {
        // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç Enter –∏ –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - –Ω–µ textarea
        if (e.key === 'Enter') {
            // –ò –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ù–ï textarea –ò –ù–ï –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∞–ª—å—Ç. –Ω–∞–∑–≤–∞–Ω–∏–π
            if (e.target.tagName !== 'TEXTAREA' && e.target.id !== 'alt-title-input') {
                e.preventDefault(); // –û—Ç–º–µ–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
            }
        }
    });
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤/–∂–∞–Ω—Ä–æ–≤ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    setupTagsInput('tags-input', 'tags-container', STATE.genresAndTags.tags);
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–±–ª–æ–∂–∫–∏
    const coverTypeRadios = document.querySelectorAll('input[name="cover-type"]');
    const coverUrl = document.getElementById('cover-url');
    const coverFile = document.getElementById('cover-file');
    
    if (coverFile) {
        coverFile.addEventListener('change', function() {
            if (this.files.length > 0) {
                showToast(`–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: ${this.files[0].name}`, 'info');
            }
        });
    } // ‚Üê –í–û–¢ –≠–¢–ê –°–ö–û–ë–ö–ê –ë–´–õ–ê –ü–†–û–ü–£–©–ï–ù–ê!
    
    coverTypeRadios.forEach(radio => {
        radio.addEventListener('change', (e) => {
            if (e.target.value === 'url') {
                coverUrl.classList.remove('hidden');
                coverFile.classList.add('hidden');
            } else {
                coverUrl.classList.add('hidden');
                coverFile.classList.remove('hidden');
            }
        });
    });
}

// ==========================================
// –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò –ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò
// ==========================================

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –≤ Base64 —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–∂–∞—Ç–∏–µ–º
 * @param {File} file - –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {number} maxWidth - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 800px)
 * @param {number} quality - –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è 0-1 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.8)
 */
function fileToBase64(file, maxWidth = 800, quality = 0.8) {
    return new Promise((resolve, reject) => {
        if (!file.type.startsWith('image/')) {
            reject(new Error('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º'));
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (–º–∞–∫—Å 10MB)
        if (file.size > 10 * 1024 * 1024) {
            reject(new Error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å 10MB)'));
            return;
        }
        
        const reader = new FileReader();
        
        reader.onload = (e) => {
            const img = new Image();
            
            img.onload = () => {
                // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                const canvas = document.createElement('canvas');
                let width = img.width;
                let height = img.height;
                
                // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –µ—Å–ª–∏ –±–æ–ª—å—à–µ maxWidth
                if (width > maxWidth) {
                    height = (height * maxWidth) / width;
                    width = maxWidth;
                }
                
                canvas.width = width;
                canvas.height = height;
                
                const ctx = canvas.getContext('2d');
                ctx.drawImage(img, 0, 0, width, height);
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Base64 —Å —Å–∂–∞—Ç–∏–µ–º
                const base64 = canvas.toDataURL('image/jpeg', quality);
                
                // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è
                const sizeKB = Math.round((base64.length * 3) / 4 / 1024);
                console.log(`üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∂–∞—Ç–æ: ${Math.round(file.size / 1024)}KB ‚Üí ${sizeKB}KB`);
                
                resolve(base64);
            };
            
            img.onerror = () => reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'));
            img.src = e.target.result;
        };
        
        reader.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
        reader.readAsDataURL(file);
    });
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–ª–æ–∂–∫–∏
 */
function setupCoverPreview() {
    const coverUrlInput = document.getElementById('cover-url');
    const coverFileInput = document.getElementById('cover-file');
    const coverTypeRadios = document.querySelectorAll('input[name="cover-type"]');
    const removePreviewBtn = document.getElementById('remove-preview');

    // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    let currentPreviewAttempt = 0;

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–±–ª–æ–∂–∫–∏
    coverTypeRadios.forEach(radio => {
        radio.addEventListener('change', (e) => {
            if (e.target.value === 'url') {
                coverUrlInput.classList.remove('hidden');
                coverFileInput.classList.add('hidden');
            } else {
                coverUrlInput.classList.add('hidden');
                coverFileInput.classList.remove('hidden');
            }
            hideCoverPreview();
            currentPreviewAttempt++; // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏
        });
    });

    // –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä URL
    if (coverUrlInput) {
        coverUrlInput.addEventListener('input', debounce((e) => {
            const url = e.target.value.trim();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π –∏ –ø–æ–ª–Ω—ã–π
            if (!url) {
                hideCoverPreview();
                return;
            }
            
            // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
            if (!isValidImageUrl(url)) {
                hideCoverPreview();
                return;
            }
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
            currentPreviewAttempt++;
            const thisAttempt = currentPreviewAttempt;
            
            showCoverPreview(url, 'url', '', thisAttempt, currentPreviewAttempt);
        }, 800)); // –£–≤–µ–ª–∏—á–∏–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 800–º—Å
    }

    // –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞
    if (coverFileInput) {
        coverFileInput.addEventListener('change', async (e) => {
            const file = e.target.files[0];
            if (file) {
                if (!file.type.startsWith('image/')) {
                    showToast('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'error');
                    hideCoverPreview();
                    return;
                }
                
                if (file.size > 10 * 1024 * 1024) {
                    showToast('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å 10MB)', 'error');
                    hideCoverPreview();
                    e.target.value = '';
                    return;
                }

                try {
                    const base64 = await fileToBase64(file);
                    currentPreviewAttempt++;
                    showCoverPreview(base64, 'file', file.name, currentPreviewAttempt, currentPreviewAttempt);
                    showToast(`–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: ${file.name}`, 'info');
                } catch (error) {
                    showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
                    hideCoverPreview();
                }
            } else {
                hideCoverPreview();
            }
        });
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    if (removePreviewBtn) {
        removePreviewBtn.addEventListener('click', () => {
            hideCoverPreview();
            if (coverUrlInput) coverUrlInput.value = '';
            if (coverFileInput) coverFileInput.value = '';
            currentPreviewAttempt++; // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–ø—ã—Ç–∫—É
        });
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function isValidImageUrl(url) {
    try {
        const urlObj = new URL(url);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
        if (!['http:', 'https:'].includes(urlObj.protocol)) {
            return false;
        }
        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        const pathname = urlObj.pathname.toLowerCase();
        const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp', '.svg'];
        const hasImageExtension = imageExtensions.some(ext => pathname.endsWith(ext));
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º URL –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–º–æ–≥—É—Ç –±—ã—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        return true;
    } catch (e) {
        return false;
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±–ª–æ–∂–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
 */
function showCoverPreview(src, type, filename = '', attemptId, currentAttemptId) {
    const previewContainer = document.getElementById('cover-preview-container');
    const previewImage = document.getElementById('cover-preview-image');
    const previewFilename = document.getElementById('cover-preview-filename');

    if (!previewContainer || !previewImage) return;

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    previewImage.onerror = null;
    previewImage.onload = null;

    previewImage.onerror = () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–∞ –ø–æ–ø—ã—Ç–∫–∞ –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞
        if (attemptId !== currentAttemptId) {
            return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–æ–ø—ã—Ç–∫–∏
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è URL (–Ω–µ –¥–ª—è —Ñ–∞–π–ª–æ–≤)
        if (type === 'url') {
            hideCoverPreview();
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª –≤–≤–æ–¥–∏—Ç—å
            // (–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π)
            showToast('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL', 'warning', 3000);
        }
    };

    previewImage.onload = () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–∞ –ø–æ–ø—ã—Ç–∫–∞ –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞
        if (attemptId !== currentAttemptId) {
            return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–æ–ø—ã—Ç–∫–∏
        }
        
        previewContainer.classList.remove('hidden');
        if (previewFilename) {
            previewFilename.textContent = filename || (type === 'url' ? '–û–±–ª–æ–∂–∫–∞ –ø–æ URL' : '–û–±–ª–æ–∂–∫–∞');
        }
    };

    previewImage.src = src;
}

function hideCoverPreview() {
    const previewContainer = document.getElementById('cover-preview-container');
    const previewImage = document.getElementById('cover-preview-image');
    
    if (previewContainer) previewContainer.classList.add('hidden');
    if (previewImage) {
        previewImage.onerror = null;
        previewImage.onload = null;
        previewImage.src = '';
    }
}

function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

async function handleNovelSubmit(e) {
    e.preventDefault();

    if (STATE.isSubmittingNovel) {
        showToast('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞...', 'warning');
        return;
    }

    STATE.isSubmittingNovel = true;
    showLoading(true, { title: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã', description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...', progress: true });

    const form = e.target;
    const novelData = {};
    const formData = new FormData(form);
    formData.forEach((value, key) => { novelData[key] = value; });

    novelData.is_personal = form.querySelector('#is-personal-novel')?.checked || false;
    novelData.tags = Array.from(document.getElementById('tags-container').querySelectorAll('.selected-tag')).map(tag => tag.dataset.value);

    const coverType = document.querySelector('input[name="cover-type"]:checked')?.value;
    const coverFile = document.getElementById('cover-file');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –æ–±–ª–æ–∂–∫–∏
    if (coverType === 'file' && coverFile?.files.length > 0) {
        try {
            updateProgress(20, '–°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
            novelData.cover_base64 = await fileToBase64(coverFile.files[0], 800, 0.85);
            novelData.cover_url = ''; // –í–∞–∂–Ω–æ: –æ—á–∏—â–∞–µ–º URL, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        } catch (error) {
            showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏: ' + error.message, 'error');
            STATE.isSubmittingNovel = false;
            showLoading(false);
            return;
        }
    }

    try {
        updateProgress(60, '–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
        const action = novelData.novel_id ? 'updateNovel' : 'createNovel';
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        const response = await apiPostRequest(action, novelData);

        // ==========================================================
        // ‚ú® –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –õ–û–ì–ò–ö–ò ‚ú®
        // ==========================================================

        // 1. –ü–†–û–í–ï–†–Ø–ï–ú –û–¢–í–ï–¢ –°–ï–†–í–ï–†–ê –ù–ê –õ–Æ–ë–£–Æ –û–®–ò–ë–ö–£
        // –°–µ—Ä–≤–µ—Ä —Å–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ï—Å–ª–∏ success: false,
        // –º—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.
        if (!response.success) {
            throw new Error(response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        // 2. –ï–°–õ–ò –í–°–Å –£–°–ü–ï–®–ù–û (–¥–∞–∂–µ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤ —Ñ–æ–Ω–µ)
        // –ú—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ü–ï–†–ï–ó–ê–ì–†–£–ñ–ê–ï–ú –°–¢–†–ê–ù–ò–¶–£.
        // –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç –±—Ä–∞—É–∑–µ—Ä –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–µ–ª–ª,
        // –≤ –∫–æ—Ç–æ—Ä–æ–º —É–∂–µ —Ç–æ—á–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±–ª–æ–∂–∫—É.
        
        updateProgress(100, '–ì–æ—Ç–æ–≤–æ!');
        showToast('–ù–æ–≤–µ–ª–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...', 'success');
        clearCache(); // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            window.location.href = window.location.origin + window.location.pathname;
        }, 1500);

    } catch (error) {
        // –≠—Ç–æ—Ç –±–ª–æ–∫ —Ç–µ–ø–µ—Ä—å –ª–æ–≤–∏—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –æ—à–∏–±–∫–∏: –∏ —Å–∂–∞—Ç–∏—è, –∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞.
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        showToast('‚ùå –û—à–∏–±–∫–∞: ' + error.message, 'error');
        STATE.isSubmittingNovel = false; // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–Ω–æ–ø–∫–∏
        showLoading(false); // –ü—Ä—è—á–µ–º –æ–≤–µ—Ä–ª–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
    }
    // `finally` –±–ª–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –º—ã —É—Ö–æ–¥–∏–º –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É.
}

// ==========================================
// –§–û–†–ú–ê –ì–õ–ê–í–´ (–í–ò–†–¢–£–ê–õ–¨–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê)
// ==========================================

async function renderChapterFormPage(novelId = null, chapterId = null) {
    const container = document.getElementById('page-content-container');
    if (!container) return;

    const isEdit = !!chapterId;
    
    // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –í–ù–ï –±–ª–æ–∫–∞ try
    let chapterData = null;
    let novelData = null;
    let nextChapterNumber = '';
    let lastVolumeName = '';
    let existingVolumes = [];
    let uniqueVolumes = [];
    let datalistOptions = '';

    showLoading(true, { title: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...' });

    try {
        // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–ª–∞–≤—ã
        if (isEdit) {
            const chapterResponse = await apiRequest('getChapter', { id: chapterId }, true);
            if (chapterResponse.success && chapterResponse.chapter) {
                chapterData = chapterResponse.chapter;
                novelId = chapterData.novel_id;
            } else {
                throw new Error(chapterResponse.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–ª–∞–≤—É.');
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–µ–ª–ª—ã
        if (novelId) {
            const novelResponse = await apiRequest('getNovel', { id: novelId }, true);
            if (novelResponse.success && novelResponse.novel) {
                novelData = novelResponse.novel;
            } else {
                throw new Error(novelResponse.error || '–ù–æ–≤–µ–ª–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
            }
        } else {
            throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω ID –Ω–æ–≤–µ–ª–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤—ã.');
        }

        // ‚ú® –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≥–ª–∞–≤—ã
        if (!isEdit) {
            console.log('üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –¥–ª—è –Ω–æ–≤–µ–ª–ª—ã:', novelId);
            const nextNumResponse = await apiRequest('getNextChapterNumber', { novel_id: novelId });
            console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', nextNumResponse);
            
            if (nextNumResponse.success) {
                nextChapterNumber = nextNumResponse.next_number;
                console.log('‚úÖ –°–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã:', nextChapterNumber);
            } else {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä:', nextNumResponse.error);
            }
        }
        
        // ‚ú® –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–º–∞
        if (!isEdit && novelData.chapters && novelData.chapters.length > 0) {
            console.log('üìö –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–º. –í—Å–µ–≥–æ –≥–ª–∞–≤:', novelData.chapters.length);
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤—ã –ø–æ –Ω–æ–º–µ—Ä—É –∏ –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é
            const sortedChapters = [...novelData.chapters].sort((a, b) => b.chapter_number - a.chapter_number);
            const lastChapter = sortedChapters[0];
            
            console.log('üìñ –ü–æ—Å–ª–µ–¥–Ω—è—è –≥–ª–∞–≤–∞:', lastChapter);
            
            if (lastChapter.volume_name) {
                lastVolumeName = lastChapter.volume_name;
                console.log('‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–º:', lastVolumeName);
            } else {
                console.log('‚ÑπÔ∏è –£ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–ª–∞–≤—ã –Ω–µ—Ç —Ç–æ–º–∞');
            }
        } else {
            console.log('‚ÑπÔ∏è –ù–µ—Ç –≥–ª–∞–≤ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–º–∞ (isEdit:', isEdit, ', –≥–ª–∞–≤:', novelData?.chapters?.length || 0, ')');
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–º–æ–≤ –¥–ª—è datalist
        existingVolumes = novelData.chapters.map(ch => ch.volume_name).filter(Boolean);
        uniqueVolumes = [...new Set(existingVolumes)];
        datalistOptions = uniqueVolumes.map(vol => `<option value="${escapeHtml(vol)}"></option>`).join('');
       
    } catch (error) {
        showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message, 'error');
        showLoading(false);
        goBackInHistory();
        return;
    }
    
    showLoading(false);

    const breadcrumbs = getBreadcrumbs(isEdit ? 'edit-chapter' : 'add-chapter', {
        novelId: novelData.novel_id,
        novelTitle: novelData.title
    });
    
    container.innerHTML = `
        <div class="page-content chapter-form-page">
            ${breadcrumbs}
            <h1>${isEdit ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã' : '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–ª–∞–≤—É'}</h1>
            <p class="text-muted">–ù–æ–≤–µ–ª–ª–∞: ${escapeHtml(novelData.title)}</p>
            
            <form id="chapter-form" class="chapter-form">
                <input type="hidden" id="chapter-novel-id" name="novel_id" value="${novelId}">
                ${chapterId ? `<input type="hidden" name="chapter_id" value="${chapterId}">` : ''}
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="volume-name">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–º–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)</label>
                        <input type="text" id="volume-name" name="volume_name" 
                               class="form-input"
                               value="${chapterData && chapterData.volume_name ? escapeHtml(chapterData.volume_name) : escapeHtml(lastVolumeName)}"
                               placeholder="${lastVolumeName ? '–¢–µ–∫—É—â–∏–π —Ç–æ–º: ' + escapeHtml(lastVolumeName) : '–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–º'}"
                               list="volume-datalist">
                        <datalist id="volume-datalist">
                            ${datalistOptions}
                        </datalist>
                    </div>
                    
                    <div class="form-group">
                        <label for="chapter-number">–ù–æ–º–µ—Ä –≥–ª–∞–≤—ã *</label>
                        <input type="number" id="chapter-number" name="chapter_number" 
                               class="form-input" required step="any" min="0"
                               value="${chapterData ? chapterData.chapter_number : nextChapterNumber}"
                               placeholder="1">
                        <small class="form-help" id="chapter-number-hint">–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä–æ–±–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (1.5, 2.1)</small>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="chapter-title">–ù–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã *</label>
                    <input type="text" id="chapter-title" name="chapter_title" 
                           class="form-input" required
                           value="${chapterData ? escapeHtml(chapterData.chapter_title) : ''}"
                           placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã">
                </div>
                
                <div class="form-group">
                    <label for="chapter-content">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≥–ª–∞–≤—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                    <textarea id="chapter-content" name="content" 
                              class="form-textarea" rows="15"
                              placeholder="–¢–µ–∫—Å—Ç –≥–ª–∞–≤—ã... –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç –≤ Google Docs.">${chapterData && chapterData.content ? escapeHtml(chapterData.content) : ''}</textarea>
                </div>
                
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary btn-lg">
                        ${isEdit ? 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '‚ûï –°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤—É'}
                    </button>
                    <button type="button" class="btn btn-secondary" 
                            onclick="navigateTo('novel-details', {id: '${novelId}'})">
                        ‚ùå –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
            </form>
        </div>
    `;
    
    setupChapterForm(novelId, chapterId);
}

function setupChapterForm(novelId, chapterId) {
    const form = document.getElementById('chapter-form');
    if (form) {
        form.addEventListener('submit', handleChapterSubmit);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –≥–ª–∞–≤—ã –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    const numberInput = document.getElementById('chapter-number');
    const hint = document.getElementById('chapter-number-hint'); // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑

    let checkAttempt = 0; // –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏

    if (numberInput && hint) {
        numberInput.addEventListener('input', function() {
            clearTimeout(chapterNumberCheckTimeout);
            const number = this.value.trim();

            // ‚úÖ –û—á–∏—â–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
            if (!number) {
                hint.textContent = '–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä–æ–±–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (1.5, 2.1)';
                hint.style.color = ''; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç
                numberInput.style.borderColor = ''; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ä–∞–º–∫—É
                lastCheckedNumber = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ
                checkAttempt++;
                return;
            }

            const currentAttempt = ++checkAttempt; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —ç—Ç–æ–π –ø–æ–ø—ã—Ç–∫–∏
            
            // –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 500–º—Å
            chapterNumberCheckTimeout = setTimeout(async () => {
                if (currentAttempt !== checkAttempt) {
                    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ (—É—Å—Ç–∞—Ä–µ–ª–∞)');
                    return;
                }

                // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã—Å—Ç—Ä–æ —Å—Ç—ë—Ä
                const currentNumber = numberInput.value.trim();
                if (!currentNumber) {
                     hint.textContent = '–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä–æ–±–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (1.5, 2.1)';
                     hint.style.color = '';
                     numberInput.style.borderColor = '';
                     lastCheckedNumber = null;
                     return;
                }
                if (currentNumber === lastCheckedNumber) return; // –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ –∂–µ —Å–∞–º–æ–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ

                lastCheckedNumber = currentNumber; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
                hint.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
                hint.style.color = '';
                numberInput.style.borderColor = '';

                try { // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º try...catch
                  const exists = await checkChapterNumberExists(novelId, currentNumber, chapterId);

                  // –°–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –ü–û–°–õ–ï await
                  if (currentAttempt !== checkAttempt) {
                     console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω (—É—Å—Ç–∞—Ä–µ–ª)');
                     return;
                  }
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–∫–∞ –∂–¥–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞
                  if (numberInput.value.trim() !== currentNumber) return;

                  if (exists) {
                      hint.textContent = '‚ö†Ô∏è –ì–ª–∞–≤–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!';
                      hint.style.color = '#d32f2f'; // –ö—Ä–∞—Å–Ω—ã–π
                      numberInput.style.borderColor = '#d32f2f';
                  } else {
                      hint.textContent = '‚úì –ù–æ–º–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω';
                      hint.style.color = '#4CAF50'; // –ó–µ–ª–µ–Ω—ã–π
                      numberInput.style.borderColor = '#4CAF50';
                  }
                } catch (error) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –æ—à–∏–±–∫–∏
                    if (currentAttempt !== checkAttempt) return;
                    if (numberInput.value.trim() !== currentNumber) return;
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ –≥–ª–∞–≤—ã:", error);
                    hint.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏';
                    hint.style.color = '#d32f2f';
                    numberInput.style.borderColor = '#d32f2f';
                }

            }, 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ 500 –º—Å
        });
    }
}

async function handleChapterSubmit(e) {
    e.preventDefault();
    
    showLoading(true, {
        title: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–ª–∞–≤—ã',
        description: '–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Google Drive...'
    });
    
    const form = e.target;
    const formData = new FormData(form);
    const chapterData = {};
    
    formData.forEach((value, key) => {
        if (value) chapterData[key] = value;
    });
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã
    chapterData.chapter_number = normalizeChapterNumber(chapterData.chapter_number);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    const exists = await checkChapterNumberExists(
        chapterData.novel_id, 
        chapterData.chapter_number, 
        chapterData.chapter_id
    );
    
    if (exists) {
        showToast('–ì–ª–∞–≤–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', 'error');
        showLoading(false);
        return;
    }
    
    try {
        const action = chapterData.chapter_id ? 'updateChapter' : 'addChapter';
        const response = await apiPostRequest(action, chapterData);
        
        if (response.success) {
            showToast('–ì–ª–∞–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', 'success');
            clearCache();
            
            setTimeout(() => {
                navigateTo('novel-details', { id: chapterData.novel_id });
            }, 1000);
        } else {
            throw new Error(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–ª–∞–≤—ã:', error);
        showToast('‚ùå –û—à–∏–±–∫–∞: ' + error.message, 'error');
    } finally {
        showLoading(false);
    }
}

// ==========================================
// –°–¢–†–ê–ù–ò–¶–ê –ê–í–¢–û–†–ê
// ==========================================

// Function to render the Author Page
async function renderAuthorPage(authorName) {
    const container = document.getElementById('page-content-container');
    if (!container) return;

    showLoading(true, { animationType: 'book' });

    const authorNovels = STATE.novels.filter(n => n.author === authorName && !n.is_deleted);

    const authorData = {
        name: authorName,
        aliases: "–ê–≤—Ç–æ—Ä Alias 1 | Á¨îÂêç | ÏûëÍ∞Ä Ïù¥Î¶Ñ" // –ü—Ä–∏–º–µ—Ä –∞–ª–∏–∞—Å–æ–≤
    };

    const breadcrumbs = getBreadcrumbs('author', { name: authorName });

    // ‚ú® –û–ë–ù–û–í–õ–ï–ù–ù–´–ô HTML ‚ú®
    container.innerHTML = `
        <div class="page-content author-page">
            ${breadcrumbs}
            <div class="author-header">
                <button class="btn btn-ghost btn-sm author-back-btn" onclick="goBackInHistory()">
                    ‚Üê –ù–∞–∑–∞–¥
                </button>
                <h1>${escapeHtml(authorData.name)}</h1>
                ${authorData.aliases ? `
                    <div class="author-aliases">
                        <small>–¢–∞–∫–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω –∫–∞–∫:</small>
                        <span>${escapeHtml(authorData.aliases.split('|').join(' ‚Ä¢ '))}</span>
                    </div>
                ` : ''}

                <div class="author-novel-count">
                    <span class="count-value">${authorNovels.length}</span>
                    <span class="count-separator">‚Ä¢</span>
                    <span class="count-label">${getNounEnding(authorNovels.length, '–ù–æ–≤–µ–ª–ª–∞', '–ù–æ–≤–µ–ª–ª—ã', '–ù–æ–≤–µ–ª–ª')}</span>
                </div>
                </div>

            <div class="author-novels">
                <h2>–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞</h2>
                ${authorNovels.length > 0 ? `
                    <div class="novels-grid">
                        ${authorNovels.map(novel => renderNovelCard(novel)).join('')}
                    </div>
                ` : `
                    <p class="text-muted">–£ —ç—Ç–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π.</p>
                `}
            </div>
        </div>
    `;

    showLoading(false);
}

/**
 * ‚ú® NEW - –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞—Ç–µ–ª—è (V2 - —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π)
 */
async function renderCreatorPage(creatorId) {
    const container = document.getElementById('page-content-container');
    showLoading(true, { title: '–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞—Ç–µ–ª—è...' });

    try {
        const response = await apiRequest('getUserPublicProfile', { userId: creatorId });
        if (!response.success) throw new Error(response.error);

        const { user, novels } = response;
        const visibleNovels = novels.filter(n => !n.is_deleted); // –§–∏–ª—å—Ç—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ

        const novelsHtml = visibleNovels.length > 0
            ? visibleNovels.map(novel => renderNovelCard(novel)).join('')
            : '<p class="text-muted">–£ —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω—ã—Ö –Ω–æ–≤–µ–ª–ª.</p>';

        const breadcrumbs = getBreadcrumbs('creator', { name: user.username });

        // ‚ú® –û–ë–ù–û–í–õ–ï–ù–ù–´–ô HTML ‚ú®
        container.innerHTML = `
            <div class="page-content creator-page">
                ${breadcrumbs}
                <div class="profile-header creator-header">
                    <button class="btn btn-ghost btn-sm creator-back-btn" onclick="goBackInHistory()">
                        ‚Üê –ù–∞–∑–∞–¥
                    </button>
                    <div class="profile-avatar-placeholder">
                        <span>${escapeHtml(user.username[0] || '?')}</span>
                    </div>
                    <div class="profile-info">
                        <h1 class="profile-username">
                            ${escapeHtml(user.username)}
                            <span class="profile-user-id">(id: ${user.user_id})</span>
                        </h1>

                        <div class="author-novel-count">
                             <span class="count-value">${visibleNovels.length}</span>
                             <span class="count-separator">‚Ä¢</span>
                             <span class="count-label">${getNounEnding(visibleNovels.length, '–ù–æ–≤–µ–ª–ª–∞', '–ù–æ–≤–µ–ª–ª—ã', '–ù–æ–≤–µ–ª–ª')}</span>
                         </div>
                        </div>
                </div>

                <div class="creator-novels">
                    <h2>–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—è</h2>
                     ${visibleNovels.length > 0 ? `
                        <div class="novels-grid">
                            ${novelsHtml}
                        </div>
                    ` : `
                        <p class="text-muted">–£ —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π.</p>
                    `}
                </div>
            </div>
        `;
    } catch (error) {
        container.innerHTML = `<div class="error-page"><h3>–û—à–∏–±–∫–∞</h3><p>${error.message}</p></div>`;
    } finally {
        showLoading(false);
    }
}

// ==========================================
// –ü–û–ò–°–ö –° –ê–í–¢–û–î–û–ü–û–õ–ù–ï–ù–ò–ï–ú
// ==========================================

function setupSearchAutocomplete() {
    const searchInput = document.getElementById('search-input');
    if (!searchInput) return;
    
    let autocompleteList = null;
    
    searchInput.addEventListener('input', function() {
        const query = this.value.toLowerCase().trim();
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–∏—Å–æ–∫
        if (autocompleteList) {
            autocompleteList.remove();
            autocompleteList = null;
        }
        
        if (query.length < 2) return;
        
        // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        const matches = STATE.novels.filter(novel => 
            novel.title.toLowerCase().includes(query) ||
            novel.author.toLowerCase().includes(query)
        ).slice(0, 5);
        
        if (matches.length === 0) return;
        
        // –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        autocompleteList = document.createElement('div');
        autocompleteList.className = 'autocomplete-list';
        autocompleteList.style.width = this.offsetWidth + 'px'; // –ó–∞–¥–∞—ë–º —à–∏—Ä–∏–Ω—É, —Ä–∞–≤–Ω—É—é —à–∏—Ä–∏–Ω–µ –∏–Ω–ø—É—Ç–∞
        
        matches.forEach(novel => {
            const item = document.createElement('div');
            item.className = 'autocomplete-item';
            item.innerHTML = `
                <div class="autocomplete-title">${highlightMatch(novel.title, query)}</div>
                <div class="autocomplete-author">${highlightMatch(novel.author, query)}</div>
            `;
            item.addEventListener('click', () => {
                navigateTo('novel-details', { id: novel.novel_id });
                autocompleteList.remove();
            });
            autocompleteList.appendChild(item);
        });
        
        this.parentElement.appendChild(autocompleteList);
    });
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
    document.addEventListener('click', (e) => {
        if (!searchInput.contains(e.target) && autocompleteList) {
            autocompleteList.remove();
            autocompleteList = null;
        }
    });
}

function setupAuthorAutocomplete() {
    const authorInput = document.getElementById('novel-author');
    if (!authorInput) return;

    let autocompleteList = null;
    let debounceTimer = null;

    // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞
    authorInput.addEventListener('input', function() {
        const query = this.value.trim();
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫
        if (autocompleteList) {
            autocompleteList.remove();
            autocompleteList = null;
        }
        
        // –î–µ–±–∞—É–Ω—Å
        if (debounceTimer) clearTimeout(debounceTimer);
        
        if (query.length < 2) return;

        debounceTimer = setTimeout(async () => {
            try {
                const response = await apiRequest('searchAuthors', { query });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
                if (authorInput.value.trim() !== query) return;
                if (!response.success || !response.authors || response.authors.length === 0) return;

                // –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ - –¢–û–ß–ù–û –ö–ê–ö –í –ü–û–ò–°–ö–ï
                autocompleteList = document.createElement('div');
                autocompleteList.className = 'autocomplete-list author-autocomplete';
                autocompleteList.style.width = authorInput.offsetWidth + 'px'; // –®–∏—Ä–∏–Ω–∞ –∫–∞–∫ —É –∏–Ω–ø—É—Ç–∞

                response.authors.forEach(author => {
                    const item = document.createElement('div');
                    item.className = 'autocomplete-item';
                    item.innerHTML = highlightMatch(author.name, query);
                    
                    item.addEventListener('click', () => {
                        authorInput.value = author.name;
                        autocompleteList.remove();
                        autocompleteList = null;
                    });
                    
                    autocompleteList.appendChild(item);
                });

                // ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                authorInput.parentElement.appendChild(autocompleteList);

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–æ–≤:', error);
            }
        }, 300);
    });

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ - –¢–û–ß–ù–û –ö–ê–ö –í –ü–û–ò–°–ö–ï
    document.addEventListener('click', (e) => {
        if (!authorInput.contains(e.target) && autocompleteList) {
            autocompleteList.remove();
            autocompleteList = null;
        }
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
    authorInput.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && autocompleteList) {
            autocompleteList.remove();
            autocompleteList = null;
        }
    });
}

function highlightMatch(text, query) {
    const index = text.toLowerCase().indexOf(query.toLowerCase());
    if (index === -1) return escapeHtml(text);
    
    const before = escapeHtml(text.substring(0, index));
    const match = escapeHtml(text.substring(index, index + query.length));
    const after = escapeHtml(text.substring(index + query.length));
    
    return `${before}<strong>${match}</strong>${after}`;
}

// ==========================================
// –§–ò–õ–¨–¢–†–´
// ==========================================

function toggleFilters() {
    const panel = document.getElementById('filters-panel');
    if (panel) {
        panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
    }
}

function applyFilters() {
    const languageFilter = document.getElementById('language-filter');
    const eraFilter = document.getElementById('era-filter');
    const statusFilter = document.getElementById('status-filter');
    const perspectiveFilter = document.getElementById('perspective-filter');
    const orientationFilter = document.getElementById('orientation-filter');
    
    STATE.currentFilters.language = languageFilter ? languageFilter.value : '';
    STATE.currentFilters.era = eraFilter ? eraFilter.value : '';
    STATE.currentFilters.status = statusFilter ? statusFilter.value : '';
    STATE.currentFilters.perspective = perspectiveFilter ? perspectiveFilter.value : '';
    STATE.currentFilters.orientation = orientationFilter ? orientationFilter.value : '';

    applyFiltersAndSort();
}

function clearFilters() {
    // –°–±—Ä–æ—Å –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
    document.getElementById('language-filter').value = '';
    document.getElementById('era-filter').value = '';
    document.getElementById('perspective-filter').value = '';
    document.getElementById('orientation-filter').value = '';
    document.getElementById('original-status-filter').value = '';
    document.getElementById('translation-status-filter').value = '';
    document.getElementById('chapters-min').value = '';
    document.getElementById('chapters-max').value = '';
    document.getElementById('words-min').value = '';
    document.getElementById('words-max').value = '';

    // --- –ò–ó–ú–ï–ù–ï–ù–û: –°–±—Ä–æ—Å –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã —Ç–µ–≥–æ–≤ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ---
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∞—Å—Å—ã –Ω–∞ –∫–∞—Ä—Ç–µ —Ç–µ–≥–æ–≤
    const tagMapContainer = document.getElementById('filter-tags-map');
    if (tagMapContainer) {
        tagMapContainer.querySelectorAll('.filter-tag-item').forEach(item => {
            item.classList.remove('include-active', 'exclude-active');
        });
    }
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
    updateSelectedTagsDisplay('selected-include-tags', [], 'include');
    updateSelectedTagsDisplay('selected-exclude-tags', [], 'exclude');
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–æ–≤
    document.querySelectorAll('input[name="include-tag-mode"][value="any"]').forEach(radio => radio.checked = true);
    document.querySelectorAll('input[name="exclude-tag-mode"][value="any"]').forEach(radio => radio.checked = true);
    // --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ STATE
    STATE.currentFilters = {
        language: '', era: '', perspective: '', orientation: '',
        originalStatus: '', translationStatus: '',
        chaptersMin: null, chaptersMax: null, wordsMin: null, wordsMax: null,
        includeTags: [], includeTagMode: 'any',
        excludeTags: [], excludeTagMode: 'any',
    };

    // –í—ã–∑–æ–≤ –æ–±—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    applyFiltersAndSort();
    showToast('–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã', 'info');
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç/—Å–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ø–∞–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
function toggleSortPopup() {
    const popup = document.getElementById('sort-popup');
    const sortButton = document.getElementById('sort-btn');
    if (!popup || !sortButton) return;

    const isVisible = popup.style.display === 'block';

    if (isVisible) {
        popup.style.display = 'none';
        document.removeEventListener('click', closeSortPopupOnClickOutside, true);
    } else {
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ–ø–∞–ø –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π
        const rect = sortButton.getBoundingClientRect();
        popup.style.left = `${rect.left + window.scrollX}px`;
        popup.style.top = `${rect.bottom + window.scrollY + 5}px`; // 5px –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É
        popup.style.display = 'block';

        // –û—Ç–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –æ–ø—Ü–∏—é
        updateActiveSortOption();

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ
        setTimeout(() => { // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ —Ç–µ–∫—É—â–∏–π –∫–ª–∏–∫
            document.addEventListener('click', closeSortPopupOnClickOutside, true);
        }, 0);
    }
}

/**
 * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ø–∞–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –≤–Ω–µ –µ–≥–æ
 */
function closeSortPopupOnClickOutside(event) {
    const popup = document.getElementById('sort-popup');
    const sortButton = document.getElementById('sort-btn');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –±—ã–ª –Ω–µ –ø–æ –ø–æ–ø–∞–ø—É –∏ –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ
    if (popup && sortButton && !popup.contains(event.target) && !sortButton.contains(event.target)) {
        popup.style.display = 'none';
        document.removeEventListener('click', closeSortPopupOnClickOutside, true);
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –æ–ø—Ü–∏—é –≤ –ø–æ–ø–∞–ø–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
function updateActiveSortOption() {
    const popup = document.getElementById('sort-popup');
    if (!popup) return;
    const currentSortValue = `${STATE.sortBy}_${STATE.sortOrder}`;
    popup.querySelectorAll('.sort-option').forEach(option => {
        option.classList.toggle('active', option.dataset.value === currentSortValue);
    });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ–ø—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
function handleSortOptionClick(value, text) {
    const [field, order] = value.split('_');
    STATE.sortBy = field;
    STATE.sortOrder = order;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    try {
        localStorage.setItem('novel-sort-preference', value);
    } catch (err) {
        console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤ localStorage:", err);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    updateSortButtonText();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø
    const popup = document.getElementById('sort-popup');
    if (popup) popup.style.display = 'none';
    document.removeEventListener('click', closeSortPopupOnClickOutside, true);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    applyFiltersAndSort();
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
function updateSortButtonText() {
    const sortButton = document.getElementById('sort-btn');
    if (!sortButton) return;
    const currentSortValue = `${STATE.sortBy}_${STATE.sortOrder}`;
    const options = { // –¢–µ–∫—Å—Ç—ã –æ–ø—Ü–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏
        "updated_desc": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Üì",
        "updated_asc": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Üë",
        "added_desc": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ ‚Üì",
        "added_asc": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ ‚Üë",
        "title_asc": "–ù–∞–∑–≤–∞–Ω–∏–µ –ê-–Ø",
        "title_desc": "–ù–∞–∑–≤–∞–Ω–∏–µ –Ø-–ê"
    };
    sortButton.querySelector('span:last-child').textContent = options[currentSortValue] || '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞';
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É...
 */
function applyFiltersAndSort() {
    // --- –®–ê–ì 0: –°–ß–ò–¢–´–í–ê–ù–ò–ï –ó–ù–ê–ß–ï–ù–ò–ô –§–ò–õ–¨–¢–†–û–í –ò–ó –§–û–†–ú–´ ---
    STATE.currentFilters.language = document.getElementById('language-filter')?.value || '';
    STATE.currentFilters.era = document.getElementById('era-filter')?.value || '';
    STATE.currentFilters.perspective = document.getElementById('perspective-filter')?.value || '';
    STATE.currentFilters.orientation = document.getElementById('orientation-filter')?.value || '';
    STATE.currentFilters.originalStatus = document.getElementById('original-status-filter')?.value || '';
    STATE.currentFilters.translationStatus = document.getElementById('translation-status-filter')?.value || '';

    STATE.currentFilters.chaptersMin = parseInt(document.getElementById('chapters-min')?.value) || null;
    STATE.currentFilters.chaptersMax = parseInt(document.getElementById('chapters-max')?.value) || null;
    STATE.currentFilters.wordsMin = parseInt(document.getElementById('words-min')?.value) || null;
    STATE.currentFilters.wordsMax = parseInt(document.getElementById('words-max')?.value) || null;

    // --- –ò–ó–ú–ï–ù–ï–ù–û: –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–≥–∏ –∏ —Ä–µ–∂–∏–º—ã –∏–∑ –Ω–æ–≤–æ–≥–æ UI ---
    // –¢–µ–≥–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ STATE.currentFilters —Ñ—É–Ω–∫—Ü–∏–µ–π updateFiltersFromTagMap()
    // –°—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∂–∏–º—ã –∏–∑ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫
    STATE.currentFilters.includeTagMode = document.querySelector('input[name="include-tag-mode"]:checked')?.value || 'any';
    STATE.currentFilters.excludeTagMode = document.querySelector('input[name="exclude-tag-mode"]:checked')?.value || 'any';
    // --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

    console.log("Applying filters:", STATE.currentFilters); // –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    let novelsToProcess = [...STATE.novels];

    // --- –®–ê–ì 1: –§–ò–õ–¨–¢–†–ê–¶–ò–Ø ---
    novelsToProcess = novelsToProcess.filter(novel => {
        // –ü—Ä–æ—Å—Ç—ã–µ —Å–µ–ª–µ–∫—Ç—ã
        if (STATE.currentFilters.language && novel.language !== STATE.currentFilters.language) return false;
        if (STATE.currentFilters.era && novel.era !== STATE.currentFilters.era) return false;
        if (STATE.currentFilters.perspective && novel.perspective !== STATE.currentFilters.perspective) return false;
        if (STATE.currentFilters.orientation && novel.orientation !== STATE.currentFilters.orientation) return false;
        if (STATE.currentFilters.originalStatus && novel.original_status !== STATE.currentFilters.originalStatus) return false;
        if (STATE.currentFilters.translationStatus && novel.translation_status !== STATE.currentFilters.translationStatus) return false;

        // –î–∏–∞–ø–∞–∑–æ–Ω—ã –≥–ª–∞–≤
        const chapterCount = novel.original_chapter_count || 0;
        if (STATE.currentFilters.chaptersMin !== null && chapterCount < STATE.currentFilters.chaptersMin) return false;
        if (STATE.currentFilters.chaptersMax !== null && chapterCount > STATE.currentFilters.chaptersMax) return false;

        // –î–∏–∞–ø–∞–∑–æ–Ω—ã —Å–ª–æ–≤ (translation_word_count)
        const wordCount = novel.translation_word_count || 0;
        if (STATE.currentFilters.wordsMin !== null && wordCount < STATE.currentFilters.wordsMin) return false;
        if (STATE.currentFilters.wordsMax !== null && wordCount > STATE.currentFilters.wordsMax) return false;


        // –§–∏–ª—å—Ç—Ä—ã –ø–æ —Ç–µ–≥–∞–º (—Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        const novelTags = novel.tags ? novel.tags.map(t => String(t.name || '').trim()) : []; // –î–æ–±–∞–≤–∏–º trim –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        console.log(`üìò –ù–æ–≤–µ–ª–ª–∞ ID: ${novel.novel_id}, –¢–µ–≥–∏: [${novelTags.join(', ')}]`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è
        if (!checkTaxonomyFilter(novelTags, STATE.currentFilters.includeTags, STATE.currentFilters.includeTagMode)) {
            console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –í–ö–õ–Æ–ß–ï–ù–ò–Ø (Include tags: [${STATE.currentFilters.includeTags.join(', ')}])`);
            return false;
        } 

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        if (!checkTaxonomyFilter(novelTags, STATE.currentFilters.excludeTags, STATE.currentFilters.excludeTagMode, true)) {
            console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø (Exclude tags: [${STATE.currentFilters.excludeTags.join(', ')}])`);
            return false;
        }

        return true; // –ü—Ä–æ—à–ª–∞ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
    });

    // --- –®–ê–ì 2: –°–û–†–¢–ò–†–û–í–ö–ê ---
    const sortField = STATE.sortBy;
    const sortMultiplier = STATE.sortOrder === 'asc' ? 1 : -1;

    novelsToProcess.sort((a, b) => {
        let valA, valB;

        if (sortField === 'title' || sortField === 'author') {
            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫ (—Å —É—á–µ—Ç–æ–º –ª–æ–∫–∞–ª–∏)
            valA = a[sortField] || '';
            valB = b[sortField] || '';
            return valA.localeCompare(valB, 'ru', { sensitivity: 'base' }) * sortMultiplier;
        } else if (sortField === 'updated' || sortField === 'added') {
            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞—Ç (created_at –∏–ª–∏ updated_at)
            const fieldName = sortField === 'updated' ? 'updated_at' : 'created_at';
             // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Date –æ–±—ä–µ–∫—Ç—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ null/undefined
             valA = a[fieldName] ? new Date(a[fieldName]) : new Date(0); // –†–∞–Ω–Ω—è—è –¥–∞—Ç–∞ –¥–ª—è null
             valB = b[fieldName] ? new Date(b[fieldName]) : new Date(0);
             return (valA - valB) * sortMultiplier;
        }
        // –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ —á–∏—Å–ª–∞–º (–≥–ª–∞–≤—ã, —Å–ª–æ–≤–∞), –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        // else if (sortField === 'chapters') { ... }

        return 0; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    });

    // --- –®–ê–ì 3: –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø –ò –†–ï–ù–î–ï–†–ò–ù–ì ---
    STATE.filteredNovels = novelsToProcess; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    STATE.currentPage = 1; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    renderNovelsGrid(STATE.filteredNovels); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É
    renderPagination(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    updateFilterInfo(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö/—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)

}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ-—Å—Ç—Ä–æ–∫–∏ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å)
function updateFilterInfo() {
  const filterInfoEl = document.getElementById('filter-info');
  if (!filterInfoEl) return;

  // ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ‚ú®
  const sortButton = document.getElementById('sort-btn');
  let sortText = '';
  if (sortButton) {
      // –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–Ω–æ–ø–∫–∏ (–±–µ–∑ –∏–∫–æ–Ω–∫–∏)
      const buttonTextElement = sortButton.querySelector('span:last-child');
      if (buttonTextElement) {
          sortText = buttonTextElement.textContent.trim();
      }
  }
  // ------------------------------------------

  // TODO: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É, –æ–ø–∏—Å—ã–≤–∞—é—â—É—é –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
  // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  filterInfoEl.textContent = sortText ? ` | –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: ${sortText}` : '';
}

/** –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤/–∂–∞–Ω—Ä–æ–≤ */
function getSelectedTags(containerId) {
    const container = document.getElementById(containerId);
    if (!container) return [];
    return Array.from(container.querySelectorAll('.filter-tag.active')).map(tag => tag.dataset.value);
}

/**
  * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∂–∞–Ω—Ä–∞–º/—Ç–µ–≥–∞–º
  * @param {string[]} itemTaxonomies - –ñ–∞–Ω—Ä—ã/—Ç–µ–≥–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ (–Ω–æ–≤–µ–ª–ª—ã).
  * @param {string[]} selectedTaxonomies - –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤ —Ñ–∏–ª—å—Ç—Ä–µ –∂–∞–Ω—Ä—ã/—Ç–µ–≥–∏.
  * @param {'any'|'all'} mode - –†–µ–∂–∏–º ('–õ—é–±–æ–π –∏–∑' –∏–ª–∏ '–í—Å–µ –∏–∑').
  * @param {boolean} isExclude - True, –µ—Å–ª–∏ —ç—Ç–æ —Ñ–∏–ª—å—Ç—Ä –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø.
  * @returns {boolean} True, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É.
  */
function checkTaxonomyFilter(itemTaxonomies, selectedTaxonomies, mode, isExclude = false) {
    if (!Array.isArray(itemTaxonomies)) itemTaxonomies = [];
    if (selectedTaxonomies.length === 0) {
        return true;
    }

    const lowerItemTaxonomies = itemTaxonomies.map(t => String(t || '').toLowerCase());
    let result = true; // –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if (isExclude) {
        const hasExcluded = selectedTaxonomies.some(tax =>
            lowerItemTaxonomies.includes(String(tax || '').toLowerCase())
        );
        result = !hasExcluded;
        // --- –õ–û–ì –†–ï–ó–£–õ–¨–¢–ê–¢–ê ---
        console.log(`   üîç checkTaxonomyFilter (EXCLUDE): itemTags=[${lowerItemTaxonomies.join(', ')}], selected=[${selectedTaxonomies.join(', ')}], hasExcluded=${hasExcluded}, result=${result}`);
        // ---------------------
    } else {
        if (mode === 'any') {
            const hasIncluded = selectedTaxonomies.some(tax =>
                lowerItemTaxonomies.includes(String(tax || '').toLowerCase())
            );
            result = hasIncluded;
             // --- –õ–û–ì –†–ï–ó–£–õ–¨–¢–ê–¢–ê ---
             console.log(`   üîç checkTaxonomyFilter (INCLUDE any): itemTags=[${lowerItemTaxonomies.join(', ')}], selected=[${selectedTaxonomies.join(', ')}], hasIncluded=${hasIncluded}, result=${result}`);
             // ---------------------
        }
        else if (mode === 'all') {
            const hasAllIncluded = selectedTaxonomies.every(tax =>
                lowerItemTaxonomies.includes(String(tax || '').toLowerCase())
            );
            result = hasAllIncluded;
             // --- –õ–û–ì –†–ï–ó–£–õ–¨–¢–ê–¢–ê ---
             console.log(`   üîç checkTaxonomyFilter (INCLUDE all): itemTags=[${lowerItemTaxonomies.join(', ')}], selected=[${selectedTaxonomies.join(', ')}], hasAllIncluded=${hasAllIncluded}, result=${result}`);
             // ---------------------
        }
    }
    return result; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
}

// ==========================================
// –†–ê–°–®–ò–†–ï–ù–ù–´–ï –§–ò–õ–¨–¢–†–´ –° –†–ï–ñ–ò–ú–ê–ú–ò
// ==========================================

/**
 * –ó–∞–ø–æ–ª–Ω—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
 */
function setupAdvancedFilters() {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å–µ–ª–µ–∫—Ç—ã
    populateSelect('language-filter', STATE.config.LANGUAGES);
    populateSelect('era-filter', STATE.config.ERAS);
    populateSelect('orientation-filter', STATE.config.ORIENTATIONS);
    populateSelect('perspective-filter', STATE.config.PERSPECTIVES);
    populateSelect('original-status-filter', STATE.config.STATUS_OPTIONS);
    populateSelect('translation-status-filter', STATE.config.STATUS_OPTIONS);

    // –£–î–ê–õ–ï–ù–û: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∂–∞–Ω—Ä–æ–≤ –∏ —Ç–µ–≥–æ–≤

    // –î–û–ë–ê–í–õ–ï–ù–û: –†–µ–Ω–¥–µ—Ä–∏–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É —Ç–µ–≥–æ–≤
    renderFilterTagMap();

    initTooltips()
}

/** –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è select */
function populateSelect(selectId, optionsArray) {
    const select = document.getElementById(selectId);
    if (select && optionsArray && optionsArray.length > 0) {
        // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—É—é –æ–ø—Ü–∏—é ("–í—ã–±–µ—Ä–∏—Ç–µ...")
        const firstOption = select.options[0];
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        select.innerHTML = '';
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –æ–ø—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
        if (firstOption && firstOption.value === '') {
             select.appendChild(firstOption);
        }
        // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–ø—Ü–∏–∏ (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
        select.innerHTML += optionsArray.map(opt =>
            `<option value="${escapeHtml(opt)}">${escapeHtml(opt)}</option>`
        ).join('');
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –¥–ª—è –∫–∞—Ä—Ç—ã —Ç–µ–≥–æ–≤ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö.
 */
function renderFilterTagMap() {
    const container = document.getElementById('filter-tags-map');
    if (!container || !STATE.genresAndTags?.tags) {
        if (container) container.innerHTML = '<p class="text-danger">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–≥–∏.</p>';
        return;
    }

    if (STATE.genresAndTags.tags.length === 0) {
        container.innerHTML = '<p class="text-muted">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤.</p>';
        return;
    }

    container.innerHTML = STATE.genresAndTags.tags.map(tag => `
        <div class="filter-tag-item"
             data-value="${escapeHtml(tag.name)}"
             data-description="${tag.description ? escapeHtml(tag.description) : ''}" {/* –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∞—Ç—Ä–∏–±—É—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è */} >
            <span class="filter-tag-name">${escapeHtml(tag.name)}</span>
            <button class="tag-filter-btn include-btn" title="–í–∫–ª—é—á–∏—Ç—å" onclick="handleTagFilterClick(this, 'include')">+</button>
            <button class="tag-filter-btn exclude-btn" title="–ò—Å–∫–ª—é—á–∏—Ç—å" onclick="handleTagFilterClick(this, 'exclude')">-</button>
        </div>
    `).join('');

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ STATE.currentFilters, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    updateTagMapSelectionFromState();
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ '+' –∏–ª–∏ '-' –Ω–∞ —Ç–µ–≥–µ –≤ –∫–∞—Ä—Ç–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤.
 */
function handleTagFilterClick(buttonElement, mode) { // mode: 'include' or 'exclude'
    const tagItem = buttonElement.closest('.filter-tag-item');
    if (!tagItem) return;

    const tagName = tagItem.dataset.value;
    const isIncludeActive = tagItem.classList.contains('include-active');
    const isExcludeActive = tagItem.classList.contains('exclude-active');

    // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (mode === 'include') {
        if (isIncludeActive) { // –ö–ª–∏–∫–Ω—É–ª–∏ + –Ω–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º -> –≤—ã–∫–ª—é—á–∏—Ç—å
            tagItem.classList.remove('include-active');
        } else { // –ö–ª–∏–∫–Ω—É–ª–∏ + –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–º –∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–º
            tagItem.classList.remove('exclude-active'); // –°–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
            tagItem.classList.add('include-active');    // –í–∫–ª—é—á–∞–µ–º
        }
    } else if (mode === 'exclude') {
        if (isExcludeActive) { // –ö–ª–∏–∫–Ω—É–ª–∏ - –Ω–∞ —É–∂–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–º -> –≤—ã–∫–ª—é—á–∏—Ç—å
            tagItem.classList.remove('exclude-active');
        } else { // –ö–ª–∏–∫–Ω—É–ª–∏ - –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–º –∏–ª–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º
            tagItem.classList.remove('include-active'); // –°–Ω–∏–º–∞–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
            tagItem.classList.add('exclude-active');    // –ò—Å–∫–ª—é—á–∞–µ–º
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ STATE –∏ —Å–ø–∏—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
    updateFiltersFromTagMap();

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    applyFiltersAndSort();
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç STATE.currentFilters.includeTags/excludeTags
 * –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ #selected-include-tags / #selected-exclude-tags
 * –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Å–æ–≤ .include-active / .exclude-active –≤ #filter-tags-map.
 */
function updateFiltersFromTagMap() {
    const tagMapContainer = document.getElementById('filter-tags-map');
    if (!tagMapContainer) return;

    STATE.currentFilters.includeTags = [];
    STATE.currentFilters.excludeTags = [];

    tagMapContainer.querySelectorAll('.filter-tag-item').forEach(item => {
        const tagName = item.dataset.value;
        if (item.classList.contains('include-active')) {
            STATE.currentFilters.includeTags.push(tagName);
        } else if (item.classList.contains('exclude-active')) {
            STATE.currentFilters.excludeTags.push(tagName);
        }
    });

    updateSelectedTagsDisplay('selected-include-tags', STATE.currentFilters.includeTags, 'include');
    updateSelectedTagsDisplay('selected-exclude-tags', STATE.currentFilters.excludeTags, 'exclude');
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.
 */
function updateSelectedTagsDisplay(containerId, tagNames, type) { // type: 'include' or 'exclude'
    const container = document.getElementById(containerId);
    if (!container) return;
    container.innerHTML = tagNames.map(name =>
        `<span class="selected-tag ${type}">${escapeHtml(name)}</span>`
    ).join('');
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª–∞—Å—Å—ã include-active/exclude-active –Ω–∞ –∫–∞—Ä—Ç–µ —Ç–µ–≥–æ–≤
 * –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ STATE.currentFilters.
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã.
 */
 function updateTagMapSelectionFromState() {
    const tagMapContainer = document.getElementById('filter-tags-map');
    if (!tagMapContainer) return;

    tagMapContainer.querySelectorAll('.filter-tag-item').forEach(item => {
        const tagName = item.dataset.value;
        item.classList.remove('include-active', 'exclude-active'); // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º

        if (STATE.currentFilters.includeTags.includes(tagName)) {
            item.classList.add('include-active');
        } else if (STATE.currentFilters.excludeTags.includes(tagName)) {
            item.classList.add('exclude-active');
        }
    });

    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    updateSelectedTagsDisplay('selected-include-tags', STATE.currentFilters.includeTags, 'include');
    updateSelectedTagsDisplay('selected-exclude-tags', STATE.currentFilters.excludeTags, 'exclude');

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫
    const includeMode = STATE.currentFilters.includeTagMode || 'any';
    const excludeMode = STATE.currentFilters.excludeTagMode || 'any';
    document.querySelector(`input[name="include-tag-mode"][value="${includeMode}"]`).checked = true;
    document.querySelector(`input[name="exclude-tag-mode"][value="${excludeMode}"]`).checked = true;
}


function renderFilterTags(containerId, items, type) {
    const container = document.getElementById(containerId);
    if (!container) return;
    
    container.innerHTML = items.map(item => `
        <button class="filter-tag" data-value="${escapeHtml(item.name)}" data-type="${type}"
                onclick="toggleFilterTag(this)">
            ${escapeHtml(item.name)}
        </button>
    `).join('');
}

function setFilterMode(type, mode) {
    if (type === 'genre') {
        STATE.currentFilters.genreMode = mode;
        document.querySelectorAll('.genre-mode-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.mode === mode);
        });
    } else if (type === 'tag') {
        STATE.currentFilters.tagMode = mode;
        document.querySelectorAll('.tag-mode-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.mode === mode);
        });
    }
}

// ==========================================
// –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –ñ–ê–ù–†–ê–ú –ò –¢–ï–ì–ê–ú –ò–ó –ë–ï–ô–î–ñ–ï–ô
// ==========================================

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–æ–≤–µ–ª–ª—ã –ø–æ –∂–∞–Ω—Ä—É –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –±–µ–π–¥–∂
 */
function filterByGenre(genreName) {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞
    navigateTo('home');
    
    // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setTimeout(() => {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
        resetFilters();
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∂–∞–Ω—Ä
        const genreButtons = document.querySelectorAll('#filter-genres-container .filter-tag');
        genreButtons.forEach(btn => {
            if (btn.dataset.value === genreName) {
                btn.classList.add('active');
                toggleFilterTag(btn);
            }
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        applyFilters();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showToast(`–§–∏–ª—å—Ç—Ä: –∂–∞–Ω—Ä "${genreName}"`, 'info');
    }, 300);
}

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–æ–≤–µ–ª–ª—ã –ø–æ —Ç–µ–≥—É –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –±–µ–π–¥–∂
 */
function filterByTag(tagName) {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞
    navigateTo('home');
    
    // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setTimeout(() => {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
        resetFilters();
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–≥
        const tagButtons = document.querySelectorAll('#filter-tags-container .filter-tag');
        tagButtons.forEach(btn => {
            if (btn.dataset.value === tagName) {
                btn.classList.add('active');
                toggleFilterTag(btn);
            }
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        applyFilters();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showToast(`–§–∏–ª—å—Ç—Ä: —Ç–µ–≥ "${tagName}"`, 'info');
    }, 300);
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö tooltip –¥–ª—è –∂–∞–Ω—Ä–æ–≤ –∏ —Ç–µ–≥–æ–≤
 */
/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö tooltip –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-description (—Å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º).
 */
function initTooltips() {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π tooltip-—ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const oldTooltip = document.getElementById('custom-tooltip');
    if (oldTooltip) {
        oldTooltip.remove();
    }

    // –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç tooltip –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const tooltip = document.createElement('div');
    tooltip.id = 'custom-tooltip';
    tooltip.className = 'custom-tooltip'; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Å—Ç–∏–ª—å .custom-tooltip –µ—Å—Ç—å –≤ CSS
    document.body.appendChild(tooltip);

    // --- –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π ---
    document.body.removeEventListener('mouseover', handleTooltipMouseOver); // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å (–µ—Å–ª–∏ –±—ã–ª)
    document.body.removeEventListener('mouseout', handleTooltipMouseOut);
    document.body.removeEventListener('mousemove', handleTooltipMouseMove);

    document.body.addEventListener('mouseover', handleTooltipMouseOver);
    document.body.addEventListener('mouseout', handleTooltipMouseOut);
    document.body.addEventListener('mousemove', handleTooltipMouseMove);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è mouseover
function handleTooltipMouseOver(e) {
    const target = e.target.closest('[data-description]');
    const tooltip = document.getElementById('custom-tooltip');
    if (target && tooltip) {
        const description = target.dataset.description;
        if (description && description.trim() !== '') {
            tooltip.textContent = description;
            updateTooltipPosition(e, tooltip); // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º
            tooltip.classList.add('show'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
        } else {
            tooltip.classList.remove('show'); // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å, –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è mouseout
function handleTooltipMouseOut(e) {
    const target = e.target.closest('[data-description]');
    const tooltip = document.getElementById('custom-tooltip');
    if (target && tooltip) {
         tooltip.classList.remove('show'); // –ü—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –ø—Ä–∏ —É—Ö–æ–¥–µ –º—ã—à–∏
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è mousemove (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
function handleTooltipMouseMove(e) {
    const tooltip = document.getElementById('custom-tooltip');
    if (tooltip && tooltip.style.display === 'block') {
        updateTooltipPosition(e, tooltip);
    }
}

// –§—É–Ω–∫—Ü–∏—è updateTooltipPosition –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function updateTooltipPosition(e, tooltip) {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ tooltip —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–æ–º –∫ offsetWidth/offsetHeight
    if (!tooltip) return;
    const tooltipWidth = tooltip.offsetWidth;
    const tooltipHeight = tooltip.offsetHeight;
    const cursorPadding = 15;

    let left = e.pageX + cursorPadding;
    let top = e.pageY + cursorPadding;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –∫—Ä–∞—è –æ–∫–Ω–∞
    const scrollX = window.scrollX || window.pageXOffset;
    const scrollY = window.scrollY || window.pageYOffset;
    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è
    if (left + tooltipWidth > scrollX + viewportWidth) {
        left = e.pageX - tooltipWidth - cursorPadding;
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
    if (left < scrollX) {
         left = e.pageX + cursorPadding; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø—Ä–∞–≤–∞ –æ—Ç –∫—É—Ä—Å–æ—Ä–∞
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è
    if (top + tooltipHeight > scrollY + viewportHeight) {
        top = e.pageY - tooltipHeight - cursorPadding;
    }
     // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è
    if (top < scrollY) {
         top = e.pageY + cursorPadding; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–Ω–∏–∑—É –æ—Ç –∫—É—Ä—Å–æ—Ä–∞
    }

    tooltip.style.left = `${left}px`;
    tooltip.style.top = `${top}px`;
}

// ==========================================
// –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –í–ò–î–û–í
// ==========================================

function toggleViewMode(mode) {
    if (!['grid', 'list'].includes(mode) || STATE.viewMode === mode) return; // –ü—Ä–æ–≤–µ—Ä–∫–∞

    STATE.viewMode = mode;
    localStorage.setItem('novel-view-mode', mode);

    const gridBtn = document.getElementById('grid-view');
    const listBtn = document.getElementById('list-view');

    // ‚ú® –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–±–µ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è ‚ú®
    if (gridBtn && listBtn) {
        gridBtn.classList.toggle('active', mode === 'grid');
        listBtn.classList.toggle('active', mode === 'list');
    }

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–µ—Ç–∫—É —Å —É—á–µ—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const novelsToShow = STATE.filteredNovels.length > 0 ? STATE.filteredNovels : STATE.novels;
    renderNovelsGrid(novelsToShow); // –§—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ —É—á—Ç–µ—Ç STATE.viewMode
}

// ==========================================
// –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–ö–ò)
// ==========================================

function showModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.add('show', 'visible');
        modal.setAttribute('aria-hidden', 'false'); // ‚ú® –î–æ–±–∞–≤–ª–µ–Ω–æ
        document.body.style.overflow = 'hidden';
    }
}

function hideModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        if (document.activeElement) document.activeElement.blur(); // <-- –î–û–ë–ê–í–õ–ï–ù–û: –°–Ω–∏–º–∞–µ–º —Ñ–æ–∫—É—Å
        modal.classList.remove('show', 'visible');
        modal.setAttribute('aria-hidden', 'true');
        document.body.style.overflow = '';
    }
}

function showAdminTab(tabName, buttonElement) {
    // –ü—Ä—è—á–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–Ω—Ç—ã –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('#admin-content .admin-tab-content').forEach(content => {
        content.style.display = 'none';
    });
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å 'active' —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.admin-tabs .tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –¥–µ–ª–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–π –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É
    const activeContent = document.getElementById(`admin-tab-${tabName}`);
    if (activeContent) {
        activeContent.style.display = 'block';
    }
    if (buttonElement) {
        buttonElement.classList.add('active');
    }
}

// ==========================================
// –ö–ê–°–¢–û–ú–ù–´–ï –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê
// ==========================================

/**
 * –ö–∞—Å—Ç–æ–º–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–≤–º–µ—Å—Ç–æ confirm)
 */
function showConfirmModal(title, message, onConfirm, onCancel) {
    const modal = document.createElement('div');
    modal.className = 'modal show visible';
    modal.innerHTML = `
        <div class="modal-content confirm-modal">
            <h3>${escapeHtml(title)}</h3>
            <p class="modal-text">${escapeHtml(message)}</p>
            <div class="modal-actions">
                <button class="btn btn-primary confirm-yes">–î–∞</button>
                <button class="btn btn-secondary confirm-no">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    const yesBtn = modal.querySelector('.confirm-yes');
    const noBtn = modal.querySelector('.confirm-no');
    
    const cleanup = () => {
        modal.remove();
    };
    
    yesBtn.onclick = () => {
        cleanup();
        if (onConfirm) onConfirm();
    };
    
    noBtn.onclick = () => {
        cleanup();
        if (onCancel) onCancel();
    };
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
    const escHandler = (e) => {
        if (e.key === 'Escape') {
            cleanup();
            if (onCancel) onCancel();
            document.removeEventListener('keydown', escHandler);
        }
    };
    document.addEventListener('keydown', escHandler);
}

/**
 * –ö–∞—Å—Ç–æ–º–Ω–æ–µ –æ–∫–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (–≤–º–µ—Å—Ç–æ alert)
 */
function showAlertModal(title, message, type = 'info') {
    const icons = {
        success: '‚úÖ',
        error: '‚ùå',
        warning: '‚ö†Ô∏è',
        info: '‚ÑπÔ∏è'
    };
    
    const modal = document.createElement('div');
    modal.className = 'modal show visible';
    modal.innerHTML = `
        <div class="modal-content alert-modal alert-${type}">
            <div class="alert-icon">${icons[type] || icons.info}</div>
            <h3>${escapeHtml(title)}</h3>
            <p class="modal-text">${escapeHtml(message)}</p>
            <div class="modal-actions">
                <button class="btn btn-primary alert-ok">OK</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    const okBtn = modal.querySelector('.alert-ok');
    
    const cleanup = () => {
        modal.remove();
    };
    
    okBtn.onclick = cleanup;
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
    const escHandler = (e) => {
        if (e.key === 'Escape') {
            cleanup();
            document.removeEventListener('keydown', escHandler);
        }
    };
    document.addEventListener('keydown', escHandler);
}

/**
 * –ö–∞—Å—Ç–æ–º–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ (–≤–º–µ—Å—Ç–æ prompt)
 */
function showPromptModal(title, message, defaultValue = '', onConfirm, onCancel) {
    const modal = document.createElement('div');
    modal.className = 'modal show visible';
    modal.innerHTML = `
        <div class="modal-content prompt-modal">
            <h3>${escapeHtml(title)}</h3>
            <p class="modal-text">${escapeHtml(message)}</p>
            <input type="text" class="form-input prompt-input" value="${escapeHtml(defaultValue)}">
            <div class="modal-actions">
                <button class="btn btn-primary prompt-ok">OK</button>
                <button class="btn btn-secondary prompt-cancel">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    const input = modal.querySelector('.prompt-input');
    const okBtn = modal.querySelector('.prompt-ok');
    const cancelBtn = modal.querySelector('.prompt-cancel');
    
    const cleanup = () => {
        modal.remove();
    };
    
    okBtn.onclick = () => {
        const value = input.value.trim();
        cleanup();
        if (onConfirm) onConfirm(value);
    };
    
    cancelBtn.onclick = () => {
        cleanup();
        if (onCancel) onCancel();
    };
    
    // Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            okBtn.click();
        }
    });
    
    // ESC –¥–ª—è –æ—Ç–º–µ–Ω—ã
    const escHandler = (e) => {
        if (e.key === 'Escape') {
            cleanup();
            if (onCancel) onCancel();
            document.removeEventListener('keydown', escHandler);
        }
    };
    document.addEventListener('keydown', escHandler);
    
    // –§–æ–∫—É—Å –Ω–∞ input
    setTimeout(() => input.focus(), 100);
}

// ==========================================
// –ö–û–†–ó–ò–ù–ê
// ==========================================

async function renderTrashTabContent() {
    const container = document.getElementById('admin-tab-trash'); // ID –≤–∫–ª–∞–¥–∫–∏
    if (!container) return;
    container.innerHTML = '<div class="loading-spinner"><div class="spinner"></div> –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã...</div>';

    try {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
        const response = await apiRequest('getTrash');
        if (!response.success) throw new Error(response.error);

        const items = response.items || [];

        // –°–æ–±–∏—Ä–∞–µ–º HTML –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        const itemsHtml = items.map(item => {
            // ‚ú® –ò–°–ü–û–õ–¨–ó–£–ï–ú –ì–û–¢–û–í–û–ï –ü–û–õ–ï 'title' ‚ú®
            const title = item.title || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ${item.item_type}`;

            return `
                <div class="item trash-item">
                    <div class="trash-item-info">
                        <strong>${item.item_type === 'novel' ? '–ù–æ–≤–µ–ª–ª–∞' : '–ì–ª–∞–≤–∞'}</strong>
                        <p>${escapeHtml(title)}</p>
                        <small>ID: ${item.item_id} | –£–¥–∞–ª–µ–Ω–æ: ${formatDateShort(item.deleted_at)}</small>
                    </div>
                    <div class="table-actions trash-item-actions">
                         <button class="btn btn-sm btn-icon" title="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (—Å–∫–æ—Ä–æ)" disabled>üëÅÔ∏è</button>
                         <button class="btn btn-sm btn-success" title="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
                                onclick="restoreFromTrash('${item.item_type}', '${item.item_id}')">
                            ‚Ü©Ô∏è
                         </button>
                         <button class="btn btn-sm btn-danger" title="–£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞"
                                 onclick="deleteFromTrashPermanent('${item.item_type}', '${item.item_id}')">
                             üóëÔ∏è
                         </button>
                    </div>
                </div>`;
        }).join('');

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–∫–ª–∞–¥–∫–∏
        container.innerHTML = `
            <h3><i class="fas fa-trash"></i> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω–æ–π</h3>
            <div class="admin-actions">
                 <button class="btn btn-danger" onclick="emptyTrashConfirm()">
                    <i class="fas fa-times-circle"></i> –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
                </button>
            </div>
            <div class="items-list">
                ${items.length > 0 ? itemsHtml : '<p class="text-muted" style="text-align: center; padding: 2rem;">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>'}
            </div>
        `;
    } catch (error) {
        container.innerHTML = `<p class="text-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: ${error.message}</p>`;
    }
}

async function openTrash() {
    showLoading(true, { title: '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã' });
    
    try {
        const response = await apiRequest('getTrash');
        
        if (response.success) {
            renderTrashModal(response.items || []);
        } else {
            showToast('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', 'error');
        }
    } catch (error) {
        showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
    } finally {
        showLoading(false);
    }
}

function renderTrashModal(items) {
    const modal = document.getElementById('trash-modal');
    if (!modal) {
        createTrashModal();
        renderTrashModal(items);
        return;
    }
    
    const container = modal.querySelector('.trash-items');
    if (!container) return;
    
    if (items.length === 0) {
        container.innerHTML = '<p class="text-muted">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>';
    } else {
        container.innerHTML = items.map(item => `
            <div class="trash-item">
                <div class="trash-item-info">
                    <strong>${escapeHtml(item.item_type === 'novel' ? '–ù–æ–≤–µ–ª–ª–∞' : '–ì–ª–∞–≤–∞')}</strong>
                    <p>${escapeHtml(item.title || item.name)}</p>
                    <small>–£–¥–∞–ª–µ–Ω–æ: ${formatDate(item.deleted_at)}</small>
                </div>
                <div class="trash-item-actions">
                    <button class="btn btn-sm btn-success" 
                            onclick="restoreFromTrash('${item.item_type}', '${item.item_id}')">
                        ‚Ü©Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                    </button>
                    <button class="btn btn-sm btn-danger" 
                            onclick="deleteFromTrashPermanent('${item.item_type}', '${item.item_id}')">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞
                    </button>
                </div>
            </div>
        `).join('');
    }
    
    showModal('trash-modal');
}

function restoreFromTrash(itemType, itemId) {
    showConfirmModal('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞', '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç?', async () => {
        showLoading(true, { title: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ' });
        try {
            const response = await apiPostRequest('restoreFromTrash', { itemType, itemId });
            if (response.success) {
                showToast('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
                clearCache();
                renderTrashTabContent(); // ‚ú® –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏
            } else { throw new Error(response.error || '–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è'); }
        } catch (error) { showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error'); } 
        finally { showLoading(false); }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞" –≤ —Å—Ç—Ä–æ–∫–µ –∫–æ—Ä–∑–∏–Ω—ã
function deleteFromTrashPermanent(itemType, itemId) {
    showConfirmModal(
        '–£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞?',
        '–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –≠–ª–µ–º–µ–Ω—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é (–≤–∫–ª—é—á–∞—è —Ñ–∞–π–ª—ã –Ω–∞ –î–∏—Å–∫–µ, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ). –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
        async () => {
            showLoading(true, { title: '–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ...' });
            try {
                // ‚ú® –í–´–ó–´–í–ê–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ‚ú®
                const action = itemType === 'novel' ? 'permanentDeleteNovel' : 'permanentDeleteChapter';
                const params = itemType === 'novel' ? { novelId: itemId } : { chapterId: itemId };

                // permanent: true –ë–û–õ–¨–®–ï –ù–ï –ù–£–ñ–ï–ù

                const response = await apiPostRequest(action, params);

                if (response.success) {
                    showToast('–≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞', 'success');
                    renderTrashTabContent(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
                } else {
                    throw new Error(response.error || `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ${itemType}`);
                }
            } catch (error) {
                showToast(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`, 'error');
            } finally {
                showLoading(false);
            }
        }
    );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"
function emptyTrashConfirm() {
    showConfirmModal(
        '–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É?',
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É? –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –Ω–µ–π –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –ù–ê–í–°–ï–ì–î–ê (–≤–∫–ª—é—á–∞—è —Ñ–∞–π–ª—ã –Ω–∞ –î–∏—Å–∫–µ). –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.',
        async () => {
            showLoading(true, { title: '–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã...' });
            try {
                const response = await apiPostRequest('emptyTrash', {}); // –í—ã–∑—ã–≤–∞–µ–º emptyTrash –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                if (response.success) {
                    showToast(response.message || '–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', 'success');
                    renderTrashTabContent(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É
                } else {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                    throw new Error(response.message || response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É');
                }
            } catch (error) {
                 // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –≤–∏–¥–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞, —Ç.–∫. —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º
                 showAlertModal('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ', error.message, 'error');
                 // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å
                 renderTrashTabContent();
            } finally {
                showLoading(false);
            }
        }
    );
}

function formatDate(dateString) {
    if (!dateString) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
    });
}

//=============================
// –ê–¥–º–∏–Ω–∫–∞
//=============================

function openAdminPanel() {
    showModal('admin-modal');
    loadAdminData();
}

async function loadAdminData() {
    const content = document.getElementById('admin-content');
    if (!content) return;

    content.innerHTML = `
        <div class="modal-loading-overlay">
            <div class="spinner spinner-lg"></div>
        </div>
    `;

    try {
        const [statsResponse, usersResponse, genresAndTagsResponse] = await Promise.all([
            apiRequest('getSystemStats'),
            apiRequest('getAllUsers'),
            apiRequest('getGenresAndTags')
        ]);

        // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—Ö –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const statsData = statsResponse?.success ? statsResponse.stats : null;
        const usersData = usersResponse?.success ? usersResponse.users : [];
        // –ò–∑–≤–ª–µ–∫–∞–µ–º genres –∏ tags –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º
        const genresAndTagsData = genresAndTagsResponse?.success
                                    ? genresAndTagsResponse // –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç {genres: [], tags: []}
                                    : { genres: [], tags: [] }; // –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ

        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –±—ã–ª–∏
        if (!statsResponse?.success) console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", statsResponse?.error);
        if (!usersResponse?.success) console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", usersResponse?.error);
        if (!genresAndTagsResponse?.success) console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∂–∞–Ω—Ä–æ–≤/—Ç–µ–≥–æ–≤:", genresAndTagsResponse?.error);

        // –ü–µ—Ä–µ–¥–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        renderAdminPanel(statsData, usersData, genresAndTagsData);
        // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    } catch (error) { // –≠—Ç–∞ –æ—à–∏–±–∫–∞ –ª–æ–≤–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–º–∏–º apiRequest (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–µ—Ç—å)
        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∫–∏:", error);
        content.innerHTML = `<p class="text-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}</p>`;
    }
}

function renderUsersTableRows(users) {
    if (!users || users.length === 0) {
        return '<tr><td colspan="6" class="text-center">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
    }
    return users.map(user => `
        <tr>
            <td>${user.user_id}</td>
            <td>${escapeHtml(user.username)}</td>
            <td>${escapeHtml(user.email || '-')}</td>
            <td><span class="role-badge role-${user.role}">${getDisplayRoleName(user.role)}</span></td>
            <td>${formatDate(user.created_at)}</td>
            <td class="table-actions">
                <button class="btn btn-sm btn-secondary" onclick="editUserRole(${user.user_id}, '${user.role}')">–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å</button>
                ${user.role !== 'owner' ? `<button class="btn btn-sm btn-danger" onclick="handleDeleteUser(${user.user_id}, '${escapeHtml(user.username)}')">–£–¥–∞–ª–∏—Ç—å</button>` : ''}
            </td>
        </tr>`).join('');
}

function renderAdminPanel(stats, users, genresAndTags) {
    const content = document.getElementById('admin-content');
    if (!content) return;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—à–∏ –≤–∫–ª–∞–¥–∫–∏
    const tabs = {
        stats: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        users: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
        genres: 'üè∑Ô∏è –ñ–∞–Ω—Ä—ã',
        tags: 'üîñ –¢–µ–≥–∏',
        trash: 'üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞',
        database: 'üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
        settings: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'
    };

    // –°–æ–∑–¥–∞—ë–º HTML –¥–ª—è –∫–Ω–æ–ø–æ–∫-–≤–∫–ª–∞–¥–æ–∫
    const tabsHtml = Object.entries(tabs).map(([key, title], index) => `
        <button class="tab-btn ${index === 0 ? 'active' : ''}" onclick="showAdminTab('${key}', this)">
            ${title}
        </button>
    `).join('');
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –≤—Å—é –±–∞–∑–æ–≤—É—é HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    content.innerHTML = `
        <nav class="admin-tabs">${tabsHtml}</nav>
        <div id="admin-tab-stats" class="admin-tab-content" style="display: block;"></div>
        <div id="admin-tab-users" class="admin-tab-content" style="display: none;"></div>
        <div id="admin-tab-genres" class="admin-tab-content" style="display: none;"></div>
        <div id="admin-tab-tags" class="admin-tab-content" style="display: none;"></div>
        <div id="admin-tab-trash" class="admin-tab-content" style="display: none;"></div>
        <div id="admin-tab-database" class="admin-tab-content" style="display: none;"></div>
        <div id="admin-tab-settings" class="admin-tab-content" style="display: none;"></div>
    `;
    
    // --- –¢–µ–ø–µ—Ä—å –Ω–∞–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –≤–∫–ª–∞–¥–∫—É —Ä–µ–∞–ª—å–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º ---

    // –í–∫–ª–∞–¥–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    const statsContent = document.getElementById('admin-tab-stats');
    if (statsContent) {
        statsContent.innerHTML = `
            <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</h3>
            <div class="stats-grid">
                <div class="stat-card"><div class="stat-value">${stats?.novels || 0}</div><div class="stat-label">–ù–æ–≤–µ–ª–ª</div></div>
                <div class="stat-card"><div class="stat-value">${stats?.chapters || 0}</div><div class="stat-label">–ì–ª–∞–≤</div></div>
                <div class="stat-card"><div class="stat-value">${stats?.genres || 0}</div><div class="stat-label">–ñ–∞–Ω—Ä–æ–≤</div></div>
                <div class="stat-card"><div class="stat-value">${stats?.tags || 0}</div><div class="stat-label">–¢–µ–≥–æ–≤</div></div>
                <div class="stat-card"><div class="stat-value">${stats?.trashItems || 0}</div><div class="stat-label">–í –∫–æ—Ä–∑–∏–Ω–µ</div></div>
            </div>`;
    }

    // –í–∫–ª–∞–¥–∫–∞ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    const usersContent = document.getElementById('admin-tab-users');
    if (usersContent) {
        usersContent.innerHTML = `
            <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h3>
            <div class="users-filters">
                <input type="search" id="user-search-input" class="form-input" placeholder="–ü–æ–∏—Å–∫ –ø–æ ID, –∏–º–µ–Ω–∏ –∏–ª–∏ email...">
                <button class="btn btn-primary" id="user-search-btn">–ù–∞–π—Ç–∏</button>
            </div>
            <div class="table-responsive">
                <table class="users-table">
                    <thead>
                        <tr><th>ID</th><th>–ò–º—è</th><th>Email</th><th>–†–æ–ª—å</th><th>–°–æ–∑–¥–∞–Ω</th><th>–î–µ–π—Å—Ç–≤–∏—è</th></tr>
                    </thead>
                    <tbody>
                        ${renderUsersTableRows(users)}
                    </tbody>
                </table>
            </div>`;
        
        // --- –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ü–†–ò–í–Ø–ó–ö–ê –°–û–ë–´–¢–ò–ô ---
        // –î–ª—è –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
        document.getElementById('user-search-btn').addEventListener('click', handleSearchUsers);

        // –î–ª—è –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        document.getElementById('user-search-input').addEventListener('keypress', e => {
            if (e.key === 'Enter') {
                handleSearchUsers();
            }
        });

        // 2. –û–¢–î–ï–õ–¨–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "–ù–∞–π—Ç–∏"
        document.querySelector('#admin-tab-users .btn-primary').addEventListener('click', handleSearchUsers);
    }

    // –í–∫–ª–∞–¥–∫–∞ "–ñ–∞–Ω—Ä—ã"
    const genresContent = document.getElementById('admin-tab-genres');
    if (genresContent) {
        let genresHtml = '<p class="text-muted">–ñ–∞–Ω—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.</p>'; // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (genresAndTags?.genres && genresAndTags.genres.length > 0) {
            genresHtml = genresAndTags.genres.map(g => `
                <div class="item">
                    <span>${escapeHtml(g.name)}</span>
                    ${g.description ? `<p class="item-description">${escapeHtml(g.description)}</p>` : ''}
                    <button class="btn btn-sm btn-danger" onclick="/* handleDeleteGenre('${g.id}', '${escapeHtml(g.name)}') */ alert('–ñ–∞–Ω—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã')">–£–¥–∞–ª–∏—Ç—å</button>
                </div>`).join('');
        } else if (genresAndTags?.genres) {
            genresHtml = '<p class="text-muted">–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤.</p>';
        }

        genresContent.innerHTML = `
            <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞–º–∏ (–û—Ç–∫–ª—é—á–µ–Ω–æ)</h3>
            <div class="admin-form">
                <input type="text" id="new-genre-input" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞" class="form-input" disabled>
                <input type="text" id="new-genre-desc" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)" class="form-input" disabled>
                <button class="btn btn-primary" onclick="alert('–ñ–∞–Ω—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã')" disabled>–î–æ–±–∞–≤–∏—Ç—å –∂–∞–Ω—Ä</button>
            </div>
            <div class="items-list">
                ${genresHtml}
            </div>`;
    } else {
        console.error("–≠–ª–µ–º–µ–Ω—Ç #admin-tab-genres –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    }

    // –í–∫–ª–∞–¥–∫–∞ "–¢–µ–≥–∏" (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
    const tagsContent = document.getElementById('admin-tab-tags');
    if (tagsContent) {
        let tagsHtml = '<p class="text-muted">–¢–µ–≥–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</p>';
        if (genresAndTags?.tags && Array.isArray(genresAndTags.tags)) {
            if (genresAndTags.tags.length > 0) {
                 tagsHtml = genresAndTags.tags.map(t => `
                    <div class="item" data-tag-name="${escapeHtml(t.name.toLowerCase())}">
                        <div class="tag-content">
                            <span>${escapeHtml(t.name)}</span>
                            ${t.description ? `<p class="item-description" data-full-description="${escapeHtml(t.description)}">${escapeHtml(t.description)}</p>` : ''}
                        </div>
                        <div class="table-actions">
                            <button class="btn btn-sm btn-icon btn-secondary" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" onclick="openEditTagModal('${t.id}', '${escapeHtml(t.name)}', this)">
                                ‚úèÔ∏è
                            </button>
                            <button class="btn btn-sm btn-danger" title="–£–¥–∞–ª–∏—Ç—å" onclick="handleDeleteTag('${t.id}', '${escapeHtml(t.name)}')">
                                üóëÔ∏è
                            </button>
                        </div>
                    </div>`).join('');
            } else {
                tagsHtml = '<p class="text-muted" style="padding: 15px;">–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤.</p>'; // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
            }
        } else {
             console.warn("–î–∞–Ω–Ω—ã–µ —Ç–µ–≥–æ–≤ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–ª–∏ –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ renderAdminPanel:", genresAndTags);
        }

        tagsContent.innerHTML = `
            <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏</h3>
            <div class="admin-form">
                <div class="form-input-container">
                    <input type="text" id="new-tag-input" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞" class="form-input">
                    <textarea id="new-tag-desc" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)" class="form-input"></textarea>
                </div>
                <button class="btn btn-primary btn-add" onclick="handleAddTag()" title="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥">+</button>
            </div>

            <div class="tag-search-container">
                <input type="search" id="tag-search-input" class="form-input" placeholder="üîç –ü–æ–∏—Å–∫ —Ç–µ–≥–æ–≤..." oninput="filterAdminTags(this.value)">
            </div>

            <div class="items-list" id="admin-tags-list">
                ${tagsHtml}
            </div>`;
    } else {
        console.error("–≠–ª–µ–º–µ–Ω—Ç #admin-tab-tags –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    }

    // –í–∫–ª–∞–¥–∫–∞ "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
    const dbContent = document.getElementById('admin-tab-database');
    if (dbContent) {
        dbContent.innerHTML = `
            <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö</h3>
            <div class="admin-actions">
                <button class="btn btn-warning" onclick="updateDatabaseStructure()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î</button>
                <button class="btn btn-secondary" onclick="handleCleanupSessions()">üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏</button>
                <button class="btn btn-danger" onclick="clearDatabaseConfirm()">‚ö†Ô∏è –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</button>
                <button class="btn btn-danger" onclick="clearDriveFolderConfirm()">‚ö†Ô∏è –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É Drive</button>
                <button class="btn btn-danger" onclick="clearDataConfirm()">‚ö†Ô∏è –û—á–∏—Å—Ç–∏—Ç—å –í–°–ï –î–ê–ù–ù–´–ï</button>
            </div>`;
    }

    const settingsContent = document.getElementById('admin-tab-settings'); // –ù–æ–≤–æ–µ ID
    if (settingsContent) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        const themeOptions = Object.keys(ROLE_THEMES).map(themeKey =>
            `<option value="${themeKey}" ${STATE.currentRoleTheme === themeKey ? 'selected' : ''}>
                ${themeKey.charAt(0).toUpperCase() + themeKey.slice(1)}
             </option>`
        ).join('');

        settingsContent.innerHTML = `
            <h3>üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</h3>
            <div class="form-group">
                <label for="role-theme-select">–¢–µ–º–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–æ–ª–µ–π</label>
                <select id="role-theme-select" class="form-select" onchange="handleRoleThemeChange(this)">
                    ${themeOptions}
                </select>
                <small class="form-help">–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞ —Å–∞–π—Ç–µ.</small>
            </div>
        `;
    }

    renderTrashTabContent();
}

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É.
 */
function filterAdminTags(query) {
    const listContainer = document.getElementById('admin-tags-list');
    if (!listContainer) return;

    const items = listContainer.querySelectorAll('.item');
    const normalizedQuery = query.toLowerCase().trim();

    items.forEach(item => {
        const tagName = item.dataset.tagName || ''; // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞
        if (tagName.includes(normalizedQuery)) {
            item.style.display = 'flex'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
        } else {
            item.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º
        }
    });
}

// 1. –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞—ë—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function showRoleChangeModal(userId, currentRole) {
    const roles = ['reader', 'creator', 'admin']; // –†–æ–ª—å 'owner' –Ω–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å
    
    const optionsHtml = roles.map(role => 
        `<option value="${role}" ${role === currentRole ? 'selected' : ''}>
            ${getDisplayRoleName(role)}
        </option>`
    ).join('');

    const modal = document.createElement('div');
    modal.className = 'modal show visible';
    modal.innerHTML = `
        <div class="modal-content prompt-modal">
            <h3>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏</h3>
            <p class="modal-text">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${userId}</p>
            <select class="form-select" id="role-select">${optionsHtml}</select>
            <div class="modal-actions">
                <button class="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                <button class="btn btn-secondary">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);

    const cleanup = () => modal.remove();
    
    modal.querySelector('.btn-primary').onclick = async () => {
        const newRole = modal.querySelector('#role-select').value;
        cleanup();
        clearCache();
        
        // 2. –í—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É, –Ω–æ —É–∂–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é
        showLoading(true, { title: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏...' });
        try {
            const response = await apiPostRequest('updateUserRole', { user_id: userId, new_role: newRole });
            if (response.success) {
                showToast('–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!', 'success');
                loadAdminData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∫–∏
            } else {
                throw new Error(response.error);
            }
        } catch (error) {
            showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
        } finally {
            showLoading(false);
        }
    };
    
    modal.querySelector('.btn-secondary').onclick = cleanup;
}

/**
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–≥–∞.
 */
function openEditTagModal(tagId, tagName, buttonElement) {
    // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç .item, —á—Ç–æ–±—ã –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –æ–ø–∏—Å–∞–Ω–∏—è
    const itemElement = buttonElement.closest('.item');
    const descriptionElement = itemElement.querySelector('.item-description');
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞ –∏–ª–∏ –ø—É—Å—Ç–æ, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç
    const currentDescription = descriptionElement ? descriptionElement.dataset.fullDescription || '' : '';

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    const existingModal = document.getElementById('edit-tag-modal');
    if (existingModal) {
        existingModal.remove();
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.id = 'edit-tag-modal';
    modal.className = 'modal show visible'; // –ö–ª–∞—Å—Å—ã –¥–ª—è –ø–æ–∫–∞–∑–∞
    modal.innerHTML = `
        <div class="modal-content">
            <button class="close-btn" onclick="document.getElementById('edit-tag-modal').remove()">√ó</button>
            <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–≥–∞</h3>
            <input type="hidden" id="edit-tag-id" value="${tagId}">

            <div class="form-group">
                <label for="edit-tag-name">–ù–∞–∑–≤–∞–Ω–∏–µ *</label>
                <input type="text" id="edit-tag-name" class="form-input" value="${escapeHtml(tagName)}" required>
            </div>

            <div class="form-group">
                <label for="edit-tag-description">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea id="edit-tag-description" class="form-textarea" rows="4">${escapeHtml(currentDescription)}</textarea>

            <div class="modal-actions">
                <button class="btn btn-primary" onclick="handleUpdateTag()">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                <button class="btn btn-secondary" onclick="document.getElementById('edit-tag-modal').remove()">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    const nameInput = document.getElementById('edit-tag-name');
    if (nameInput) {
        nameInput.focus();
        nameInput.select(); // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    }
}

// 3. –°—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é `editUserRole` —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –≤—ã–∑–æ–≤ –Ω–æ–≤–æ–π
function editUserRole(userId, currentRole) {
    showRoleChangeModal(userId, currentRole);
}

async function handleRoleThemeChange(selectElement) {
    const newTheme = selectElement.value;
    showLoading(true, { title: '–°–º–µ–Ω–∞ —Ç–µ–º—ã —Ä–æ–ª–µ–π...' });
    try {
        const response = await apiPostRequest('setRoleTheme', { theme: newTheme });
        if (response.success) {
            showToast('–¢–µ–º–∞ —Ä–æ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!', 'success');
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            STATE.currentRoleTheme = newTheme;
            // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–¥–º–∏–Ω–∫—É –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
            loadAdminData();
        } else {
            throw new Error(response.error);
        }
    } catch (error) {
        showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
    } finally {
        showLoading(false);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
async function handleSearchUsers() {
    const query = document.getElementById('user-search-input').value;
    showLoading(true, { title: '–ü–æ–∏—Å–∫...' });
    try {
        const response = await apiRequest('searchUsers', { query });
        if (response.success) {
            const tableBody = document.querySelector('#admin-tab-users tbody');
            if (tableBody) {
                tableBody.innerHTML = renderUsersTableRows(response.users);
            }
        } else { 
            throw new Error(response.error); 
        }
    } catch (error) {
        showToast('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ' + error.message, 'error');
    } finally {
        showLoading(false);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
function handleDeleteUser(userId, username) {
    showConfirmModal(
        '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è',
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ù–ê–í–°–ï–ì–î–ê —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${username}" (ID: ${userId})? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.`,
        async () => {
            showLoading(true, { title: '–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...' });
            try {
                const response = await apiPostRequest('deleteUser', { user_id: userId });
                if (response.success) {
                    showToast(response.message, 'success');
                    loadAdminData(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å—é –∞–¥–º–∏–Ω–∫—É
                } else { throw new Error(response.error); }
            } catch (error) {
                showToast('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + error.message, 'error');
            } finally {
                showLoading(false);
            }
        }
    );
}

async function addGenre() {
    const input = document.getElementById('new-genre-input');
    // 1. –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    const descInput = document.getElementById('new-genre-desc'); 
    
    const name = input?.value.trim();
    // 2. –°—á–∏—Ç—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ —Å—Ç–∞–≤–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)
    const description = descInput?.value.trim() || ''; 
    
    if (!name) {
        showToast('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞', 'warning');
        return;
    }
    
    try {
        // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–∞ –ø–æ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await apiPostRequest('addGenre', { name, description }); 
        
        if (response.success) {
            showToast('–ñ–∞–Ω—Ä –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
            input.value = '';
            descInput.value = ''; // 4. –û—á–∏—â–∞–µ–º –æ–±–∞ –ø–æ–ª—è
            clearCache();
            loadAdminData();
        } else {
            throw new Error(response.error || '–û—à–∏–±–∫–∞');
        }
    } catch (error) {
        showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
    }
}

async function deleteGenre(id) {
    showConfirmModal(
        '–£–¥–∞–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞', // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∂–∞–Ω—Ä?', // –°–æ–æ–±—â–µ–Ω–∏–µ
        async () => {
            // –≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º—ë—Ç "–î–∞"
            try {
                const response = await apiPostRequest('deleteGenre', { id });
                
                if (response.success) {
                    showToast('–ñ–∞–Ω—Ä —É–¥–∞–ª—ë–Ω', 'success');
                    clearCache();
                    loadAdminData();
                } else {
                    throw new Error(response.error || '–û—à–∏–±–∫–∞');
                }
            } catch (error) {
                showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
            }
        }
    );
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–µ–π –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏.
 */
async function handleAddTag() {
    const input = document.getElementById('new-tag-input');
    const descInput = document.getElementById('new-tag-desc');
    const name = input?.value.trim();
    const description = descInput?.value.trim() || '';

    if (!name) {
        showToast('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞', 'warning');
        return;
    }

    // --- –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç ---
    const existingTags = Array.from(document.querySelectorAll('#admin-tab-tags .item span'))
                              .map(span => span.textContent.trim().toLowerCase());
    if (existingTags.includes(name.toLowerCase())) {
        showToast(`–¢–µ–≥ "${name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, 'warning');
        return;
    }
    // --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ ---

    showLoading(true, { title: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞...' }); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
    try {
        const response = await apiPostRequest('addTag', { name, description });
        if (response.success) {
            showToast('–¢–µ–≥ –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
            if (input) input.value = '';
            if (descInput) descInput.value = '';
            clearCache(); // –û—á–∏—â–∞–µ–º –∫—ç—à
            await loadAdminData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∫–∏
        } else {
            throw new Error(response.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞');
        }
    } catch (error) {
        showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
    } finally {
        showLoading(false); // –ü—Ä—è—á–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
    }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–µ–≥–∞ –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞.
 */
async function handleUpdateTag() {
    const id = document.getElementById('edit-tag-id').value;
    const nameInput = document.getElementById('edit-tag-name');
    const descriptionInput = document.getElementById('edit-tag-description');

    const name = nameInput?.value.trim();
    const description = descriptionInput?.value.trim() || '';

    if (!name) {
        showToast('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'warning');
        if (nameInput) nameInput.focus(); // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ
        return;
    }

    showLoading(true, { title: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...' });

    try {
        // –í—ã–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ updateTag –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        const response = await apiPostRequest('updateTag', { id, name, description });

        if (response.success) {
            showToast('–¢–µ–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
            document.getElementById('edit-tag-modal')?.remove(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
            clearCache(); // –û—á–∏—â–∞–µ–º –∫—ç—à
            await loadAdminData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∫–∏
        } else {
            throw new Error(response.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞');
        }
    } catch (error) {
        showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
    } finally {
        showLoading(false);
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏.
 */
function handleDeleteTag(id, name) {
    showConfirmModal(
        '–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞',
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ "${escapeHtml(name)}"? –û–Ω –±—É–¥–µ—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π.`,
        async () => {
            showLoading(true, { title: '–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞...' }); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
            try {
                const response = await apiPostRequest('deleteTag', { id });
                if (response.success) {
                    showToast('–¢–µ–≥ —É–¥–∞–ª—ë–Ω (–ø–æ–º–µ—á–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º)', 'success');
                    clearCache(); // –û—á–∏—â–∞–µ–º –∫—ç—à
                    await loadAdminData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∫–∏
                } else {
                    throw new Error(response.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞');
                }
            } catch (error) {
                showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
            } finally {
                showLoading(false); // –ü—Ä—è—á–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
            }
        }
    );
}

function updateDatabaseStructure() {
    showConfirmModal(
        '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î',
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö? –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è.',
        async () => {
            showLoading(true, { title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î' });
            try {
                // ‚ú® –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –∏—Å–ø–æ–ª—å–∑—É–µ–º apiRequest –≤–º–µ—Å—Ç–æ apiPostRequest
                const response = await apiRequest('updateDatabaseStructure', {});
                
                if (response.success) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –æ–Ω–æ —Ç–µ–ø–µ—Ä—å —É–º–Ω–æ–µ!
                    showToast(response.message, 'success');
                } else {
                    throw new Error(response.error || '–û—à–∏–±–∫–∞');
                }
            } catch (error) {
                showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
            } finally {
                showLoading(false);
            }
        }
    );
}

function clearDatabaseConfirm() {
    // –ü–µ—Ä–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    showConfirmModal(
        '–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        '–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –Ω–æ–≤–µ–ª–ª—ã, –≥–ª–∞–≤—ã, –∂–∞–Ω—Ä—ã –∏ —Ç–µ–≥–∏. –í—ã —É–≤–µ—Ä–µ–Ω—ã?',
        () => {
            // –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–î–∞", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–µ, –±–æ–ª–µ–µ —Å—Ç—Ä–∞—à–Ω–æ–µ –æ–∫–Ω–æ
            showConfirmModal(
                '–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
                '–í—ã –ê–ë–°–û–õ–Æ–¢–ù–û —É–≤–µ—Ä–µ–Ω—ã? –î–∞–Ω–Ω—ã–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.',
                async () => {
                    // –ï—Å–ª–∏ –∏ –∑–¥–µ—Å—å –Ω–∞–∂–∞–ª–∏ "–î–∞", –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–∞—Å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                    showLoading(true, { title: '–û—á–∏—Å—Ç–∫–∞ –ë–î' });
                    
                    try {
                        const response = await apiPostRequest('clearDatabase', {});
                        
                        if (response.success) {
                            showToast('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞', 'success');
                            clearCache();
                            setTimeout(() => location.reload(), 2000);
                        } else {
                            throw new Error(response.error || '–û—à–∏–±–∫–∞');
                        }
                    } catch (error) {
                        showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
                    } finally {
                        showLoading(false);
                    }
                }
            );
        }
    );
}

function clearDriveFolderConfirm() {
    // –ü–µ—Ä–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    showConfirmModal(
        '–û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ Drive',
        '–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï —Ñ–∞–π–ª—ã –Ω–æ–≤–µ–ª–ª –∏–∑ –ø–∞–ø–∫–∏ –Ω–∞ Google Drive. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
        () => {
            // –í—Ç–æ—Ä–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            showConfirmModal(
                '–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
                '–í—ã –¢–û–ß–ù–û —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞—Ç—Ä–æ–Ω–µ—Ç –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–µ–ª–ª—ã.',
                async () => {
                    // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
                    showLoading(true, { title: '–û—á–∏—Å—Ç–∫–∞ Drive' });
                    
                    try {
                        const response = await apiPostRequest('clearDriveFolder', {});
                        
                        if (response.success) {
                            showToast('–ü–∞–ø–∫–∞ Drive –æ—á–∏—â–µ–Ω–∞', 'success');
                        } else {
                            throw new Error(response.error || '–û—à–∏–±–∫–∞');
                        }
                    } catch (error) {
                        showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
                    } finally {
                        showLoading(false);
                    }
                }
            );
        }
    );
}

function handleCleanupSessions() {
    showConfirmModal(
        '–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π',
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∏—Å—Ç—ë–∫—à–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–Ω–æ–≤–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.',
        async () => {
            showLoading(true, { title: '–û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π...' });
            try {
                const response = await apiRequest('cleanupSessions'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º apiRequest
                if (response.success) {
                    showToast(`–£–¥–∞–ª–µ–Ω–æ –∏—Å—Ç—ë–∫—à–∏—Ö —Å–µ—Å—Å–∏–π: ${response.deletedCount}`, 'success');
                } else { throw new Error(response.error); }
            } catch (error) {
                showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
            } finally {
                showLoading(false);
            }
        }
    );
}

function clearDataConfirm() {
    showConfirmModal(
        '–ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–•',
        '–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –Ω–æ–≤–µ–ª–ª—ã, –≥–ª–∞–≤—ã, –∞–≤—Ç–æ—Ä–æ–≤, –∂–∞–Ω—Ä—ã –∏ —Ç–µ–≥–∏. –¢–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–µ—Å—Å–∏–π –æ—Å—Ç–∞–Ω—É—Ç—Å—è. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û. –í—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ —É–≤–µ—Ä–µ–Ω—ã?',
        async () => {
            showLoading(true, { title: '–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...' });
            try {
                const response = await apiPostRequest('clearAllDataExceptUsers', {});
                if (response.success) {
                    showToast(response.message, 'success');
                    setTimeout(() => location.reload(), 2000);
                } else { throw new Error(response.error); }
            } catch (error) {
                showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
            } finally {
                showLoading(false);
            }
        }
    );
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ ESC
document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
        document.querySelectorAll('.modal.show').forEach(modal => {
            hideModal(modal.id);
        });
    }
});

// ==========================================
// –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
// ==========================================

async function loadNovels() {
    try {
        const response = await apiRequest('getAllNovels');
        
        if (response.success) {
            STATE.novels = response.novels || [];
            STATE.filteredNovels = STATE.novels;
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–µ–ª–ª:', STATE.novels.length);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–µ–ª–ª:', error);
        STATE.novels = [];
        STATE.filteredNovels = [];
    }
}

async function loadConfig() {
    try {
        const response = await apiRequest('getConfig');
        
        if (response.success) {
            STATE.config = response.config || {};
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
    }
}

async function loadUser() {
    try {
        // –¢–æ–∫–µ–Ω —É–∂–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ apiRequest –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
        const response = await apiRequest('getCurrentUser');
        
        if (response.success && response.user && response.user.auth_type !== 'anonymous') {
            STATE.currentUser = response.user;
            console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', STATE.currentUser.username, '–†–æ–ª—å:', STATE.currentUser.role);
            updateUserDisplay();
        } else {
            STATE.currentUser = null;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        STATE.currentUser = null;
    }
}

async function loadGenresAndTags() {
    try {
        const response = await apiRequest('getGenresAndTags');
        
        if (response.success) {
            STATE.genresAndTags = {
                genres: response.genres || [],
                tags: response.tags || []
            };
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∂–∞–Ω—Ä–æ–≤/—Ç–µ–≥–æ–≤:', error);
    }
}


// ==========================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ==========================================

/**
 * ‚ú® FINAL - –ü–æ–ª–Ω–∞—è, –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 */
async function initializeApp() {
    if (STATE.isInitialized) return;
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

    // –°–†–ê–ó–£ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ localStorage
    const savedUser = localStorage.getItem('currentUser');
    const savedRole = localStorage.getItem('userRole');
    
    if (savedUser) {
        try {
            STATE.currentUser = JSON.parse(savedUser);
            
            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            if (savedRole === 'admin' || savedRole === 'owner') {
                const adminBtn = document.getElementById('admin-btn');
                if (adminBtn) adminBtn.style.display = 'inline-flex';
            }
            
            updateUserDisplay();
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
        }
    }

    // --- –≠–¢–ê–ü 1: –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –û–¢–†–ò–°–û–í–ö–ê ---
    applyTheme(currentThemePalette, currentThemeMode);
    setupEventListeners();
    const loadingEl = document.getElementById('loading');
    if (loadingEl) loadingEl.style.display = 'none';

    const urlParams = new URLSearchParams(window.location.search);
    const page = urlParams.get('page') || 'home';

    const pageNumberFromUrl = parseInt(urlParams.get('p')) || 1;
    STATE.currentPage = pageNumberFromUrl;
    
    // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (page === 'home' || page === 'catalog') {
        renderCatalogPage(true); // –°–∫–µ–ª–µ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞
    } else {
            const pageContainer = document.getElementById('page-content-container');
            if (pageContainer) {
                showSection('page-content-container');
                
                // ‚ú® –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ‚ú®
                if (page === 'chapter-read') {
                    // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —á—Ç–µ–Ω–∏—è, –º—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                    // –∑–∞–≥–ª—É—à–∫—É-–∫–Ω–∏–≥—É. –ú—ã –∂–¥—ë–º, –ø–æ–∫–∞ renderChapterReadPage
                    // —Å–∞–º –≤—ã–∑–æ–≤–µ—Ç –æ–≤–µ—Ä–ª–µ–π —Å –ø—É–∑—ã—Ä—å–∫–∞–º–∏.
                    pageContainer.innerHTML = '';
                } else {
                    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü (–¥–µ—Ç–∞–ª–∏, –ø—Ä–æ—Ñ–∏–ª—å –∏ —Ç.–¥.)
                    // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É-–∫–Ω–∏–≥—É, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ.
                    pageContainer.innerHTML = `
                      <div class="page-loading-animation">
                          <div class="book">
                              <div class="book__pg-shadow"></div>
                              <div class="book__pg"></div>
                              <div class="book__pg book__pg--2"></div>
                              <div class="book__pg book__pg--3"></div>
                              <div class="book__pg book__pg--4"></div>
                              <div class="book__pg book__pg--5"></div>
                          </div>
                          <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
                      </div>`;
                }
                // ‚ú® –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ‚ú®
            }
        }

    // --- –≠–¢–ê–ü 2: –ï–î–ò–ù–´–ô –ó–ê–ü–†–û–° –î–ê–ù–ù–´–• ---
    try {
        // ‚ú® –î–ï–õ–ê–ï–ú –í–°–ï–ì–û –û–î–ò–ù –ó–ê–ü–†–û–° –í–ú–ï–°–¢–û –ß–ï–¢–´–†–Å–•! ‚ú®
        const response = await apiRequest('getInitialData');
        if (!response.success) throw new Error(response.error);

        // –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–≤–æ–∏–º –º–µ—Å—Ç–∞–º
        STATE.currentUser = (response.user && response.user.user_id !== null && response.user.user_id !== undefined) ? response.user : null;
        STATE.novels = response.novels;
        STATE.filteredNovels = response.novels;
        STATE.config = response.config;
        STATE.genresAndTags = response.genresAndTags;
        STATE.currentRoleTheme = response.roleTheme || 'default';

        // --- –≠–¢–ê–ü 3: –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¢–†–ò–°–û–í–ö–ê ---
        updateUserDisplay();
        setupSearchAutocomplete();

        try {
            const savedSort = localStorage.getItem('novel-sort-preference');
            if (savedSort && savedSort.includes('_')) {
                const [field, order] = savedSort.split('_');
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ)
                // –ù—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–æ–ª–µ–π –∏ –ø–æ—Ä—è–¥–∫–æ–≤
                const validFields = ['updated', 'added', 'title']; // –î–æ–±–∞–≤—å –≤—Å–µ —Å–≤–æ–∏ –ø–æ–ª—è
                const validOrders = ['asc', 'desc'];
                if (validFields.includes(field) && validOrders.includes(order)) {
                    STATE.sortBy = field;
                    STATE.sortOrder = order;
                    console.log(`üóÇÔ∏è –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${field} ${order}`);
                }
            }
        } catch (err) {
            console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏–∑ localStorage:", err);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ select'–∞ –ü–û–°–õ–ï —á—Ç–µ–Ω–∏—è –∏–∑ localStorage
        const sortSelectEl = document.getElementById('sort-select'); // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å
        if(sortSelectEl) sortSelectEl.value = `${STATE.sortBy}_${STATE.sortOrder}`;

        updateSortButtonText();

        const savedViewMode = localStorage.getItem('novel-view-mode');
        if (savedViewMode && ['grid', 'list'].includes(savedViewMode)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            STATE.viewMode = savedViewMode;
        } else {
            STATE.viewMode = 'grid'; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }

        const gridBtn = document.getElementById('grid-view');
        const listBtn = document.getElementById('list-view');
        if (gridBtn && listBtn) {
            gridBtn.classList.toggle('active', STATE.viewMode === 'grid');
            listBtn.classList.toggle('active', STATE.viewMode === 'list');
            console.log(`üñºÔ∏è –í–∏–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${STATE.viewMode}`);
        }

        const params = {};
        urlParams.forEach((value, key) => {
            if (key !== 'page' && key !== 'p') params[key] = value;
        });
        
        // ‚ú® –ó–ê–ú–ï–ù–ê: –í–º–µ—Å—Ç–æ renderPage(page, params) —Å—Ä–∞–∑—É –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã/—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É,
        // –µ—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –∫–∞—Ç–∞–ª–æ–≥. –ò–Ω–∞—á–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É. ‚ú®
        if (page === 'home' || page === 'catalog') {
             // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)
             setupAdvancedFilters(); // –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ applyFiltersAndSort
             applyFiltersAndSort(); // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É/—Ñ–∏–ª—å—Ç—Ä—ã
        } else {
             await renderPage(page, params); // –†–µ–Ω–¥–µ—Ä–∏–º –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        }
        
        STATE.isInitialized = true;
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showToast('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}

// ==========================================
// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
// ==========================================

function setupEventListeners() {
    // –ü–æ–∏—Å–∫
    bindClick('search-btn', performSearch);
    
    const searchInput = document.getElementById('search-input');
    if (searchInput) {
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') performSearch();
        });
    }
    
    // –§–∏–ª—å—Ç—Ä—ã
    bindClick('filter-toggle', toggleFilters);
    bindClick('apply-filters', applyFilters);
    bindClick('clear-filters', clearFilters);
    bindClick('sort-btn', toggleSortPopup);

    // ‚ú® –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö –°–û–†–¢–ò–†–û–í–ö–ò ‚ú®
    //const sortSelect = document.getElementById('sort-select');
    //if (sortSelect) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ STATE
    //    sortSelect.value = `${STATE.sortBy}_${STATE.sortOrder}`;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    //    sortSelect.addEventListener('change', (e) => {
    //        const [field, order] = e.target.value.split('_');
    //        STATE.sortBy = field;
    //        STATE.sortOrder = order;
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ localStorage (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    //        try {
    //            localStorage.setItem('novel-sort-preference', e.target.value); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É 'updated_desc' –∏ —Ç.–ø.
    //        } catch (err) {
    //            console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤ localStorage:", err);
    //      }
    //        applyFiltersAndSort(); // –ü–µ—Ä–µ–ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    //    });
    //}
    
    // –ö–Ω–æ–ø–∫–∏
    bindClick('add-novel-btn', () => navigateTo('add-novel'));
    bindClick('admin-btn', openAdminPanel);
    
    setupThemeSwitcher();
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–æ–≤
    bindClick('grid-view', () => toggleViewMode('grid'));
    bindClick('list-view', () => toggleViewMode('list'));
    
    // –õ–æ–≥–æ—Ç–∏–ø - –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    const logo = document.querySelector('.logo');
    if (logo) {
        logo.addEventListener('click', () => navigateTo('home'));
        logo.style.cursor = 'pointer';
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø—Ü–∏–π –≤–Ω—É—Ç—Ä–∏ –ø–æ–ø–∞–ø–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    document.querySelectorAll('#sort-popup .sort-option').forEach(option => {
        option.addEventListener('click', () => {
            handleSortOptionClick(option.dataset.value, option.textContent);
        });
    });

    // ‚ú® –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ‚ú®
    updateSortButtonText();
    
    // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    document.addEventListener('keydown', (e) => {
        // Ctrl+K - —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫
        if (e.ctrlKey && e.key === 'k') {
            e.preventDefault();
            const searchInput = document.getElementById('search-input');
            if (searchInput) searchInput.focus();
        }
        
        // Ctrl+N - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–µ–ª–ª—É (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)
        if (e.ctrlKey && e.key === 'n' && STATE.currentUser) {
            e.preventDefault();
            navigateTo('add-novel');
        }
    });
    
    console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

function bindClick(id, handler) {
    const el = document.getElementById(id);
    if (el && typeof handler === 'function') {
        el.addEventListener('click', handler);
    }
}

function performSearch() {
    const input = document.getElementById('search-input');
    if (!input) return;
    
    const query = input.value.toLowerCase().trim();
    
    if (!query) {
        STATE.filteredNovels = [];
        STATE.currentPage = 1;
        renderNovelsGrid(STATE.novels);
        renderPagination();
        return;
    }
    
    STATE.filteredNovels = STATE.novels.filter(novel => 
        novel.title.toLowerCase().includes(query) ||
        novel.author.toLowerCase().includes(query) ||
        (novel.description && novel.description.toLowerCase().includes(query))
    );
    
    STATE.currentPage = 1;
    renderNovelsGrid(STATE.filteredNovels);
    renderPagination();
}

// ==========================================
// –£–¢–ò–õ–ò–¢–´
// ==========================================

function showSection(id) {
    const el = document.getElementById(id);
    if (el) el.style.display = 'block';
}

function hideSection(id) {
    const el = document.getElementById(id);
    if (el) el.style.display = 'none';
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç/—Å–∫—Ä—ã–≤–∞–µ—Ç –æ–≤–µ—Ä–ª–µ–π –∑–∞–≥—Ä—É–∑–∫–∏.
 * @param {boolean} show - –ü–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ —Å–∫—Ä—ã—Ç—å.
 * @param {object} options - –û–ø—Ü–∏–∏:
 * - title {string}: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞.
 * - description {string}: –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞.
 * - progress {boolean}: –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä.
 * - animationType {string}: 'bubbles' –∏–ª–∏ 'book' –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –í–ú–ï–°–¢–û —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞.
 */
function showLoading(show, options = {}) {
    const overlay = document.getElementById('loading-overlay');
    if (!overlay) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —Å–∞–º –æ–≤–µ—Ä–ª–µ–π (—Ç–µ–º–Ω—ã–π —Ñ–æ–Ω)
    overlay.style.display = show ? 'flex' : 'none';

    if (show) {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        overlay.innerHTML = '';

        // --- –ö–õ–Æ–ß–ï–í–û–ï –†–ï–®–ï–ù–ò–ï: –ß—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å? ---
        if (options.animationType) {
            // –ü–û–ö–ê–ó–´–í–ê–ï–ú –ö–ê–°–¢–û–ú–ù–£–Æ –ê–ù–ò–ú–ê–¶–ò–Æ
            overlay.innerHTML = '<div id="custom-loading-animation"></div>'; // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            overlay.classList.add('custom-animation-mode'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ–Ω–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

            // –í—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
            if (options.animationType === 'bubbles') {
                showBubbleLoadingAnimation(); // –ù–æ–≤–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
            } else if (options.animationType === 'book') {
                showBookLoadingAnimation(); // –ù–æ–≤–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
            }
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∞–Ω–∏–º–∞—Ü–∏–∏
        } else {
            // –ü–û–ö–ê–ó–´–í–ê–ï–ú –°–¢–ê–ù–î–ê–†–¢–ù–û–ï –û–ö–ù–û
            overlay.classList.remove('custom-animation-mode'); // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
            overlay.innerHTML = `
                <div class="loading-box">
                    <div class="loading-spinner-large"></div>
                    <h3 id="loading-title">${options.title || '–ó–∞–≥—Ä—É–∑–∫–∞...'}</h3>
                    <p id="loading-description">${options.description || ''}</p>
                    ${options.progress ? `
                        <div class="progress-container" id="progress-container">
                            <div class="progress-bar">
                                <div class="progress-fill" id="progress-fill" style="width: 0%;"></div>
                            </div>
                            <span id="progress-text">0%</span>
                        </div>` : ''}
                </div>
            `;
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (options.progress) {
                updateProgress(0, options.description || '');
            }
        }
    } else {
        // –ü—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º
        overlay.classList.remove('custom-animation-mode');
        overlay.innerHTML = '';
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
 * @param {number} percent - –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100)
 * @param {string} text - –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
 */
function updateProgress(percent, text = '') {
    const progressFill = document.getElementById('progress-fill');
    const progressText = document.getElementById('progress-text');
    const loadingDesc = document.getElementById('loading-description');
    
    if (progressFill) {
        progressFill.style.width = `${Math.min(100, Math.max(0, percent))}%`;
    }
    
    if (progressText) {
        progressText.textContent = `${Math.round(percent)}%`;
    }
    
    if (text && loadingDesc) {
        loadingDesc.textContent = text;
    }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –í–´–ë–†–ê–ù–ù–û–ô –¢–ï–ú–´.
 * @param {string} role - –°–∏—Å—Ç–µ–º–Ω–∞—è —Ä–æ–ª—å (owner, admin, reader).
 * @returns {string} –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
 */
function getDisplayRoleName(role) {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'default')
    const currentThemeName = STATE.currentRoleTheme || 'default';
    const currentTheme = ROLE_THEMES[currentThemeName] || ROLE_THEMES['default'];
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
    return currentTheme[role] || role; // –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–µ—Ä–Ω–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è
}

// ==========================================
// –ö–ê–°–¢–û–ú–ù–´–ï –ê–ù–ò–ú–ê–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò
// ==========================================

/**
 * ‚ú® UPDATED v3: –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º—ã—Ç–∏–µ –∏ –∑–∞—Ç–µ–º–Ω—è–µ—Ç —Ä–∞–∑–º—ã—Ç—ã–µ –ø—É–∑—ã—Ä—å–∫–∏.
 */
function showBubbleLoadingAnimation() {
    const container = document.querySelector('#loading-overlay #custom-loading-animation');
    if (!container){
        console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #custom-loading-animation –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–Ω—É—Ç—Ä–∏ #loading-overlay!");
        return;
    }

    let bubblesHtml = '<div class="bubbles-container">';

    const bubbleCount = 50; // –û—Å—Ç–∞–≤–ª—è–µ–º 50
    const blurProbability = 0.4; // –û—Å—Ç–∞–≤–ª—è–µ–º 40%
    // ‚ú® 1. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∏–ª—É —Ä–∞–∑–º—ã—Ç–∏—è ‚ú®
    const blurAmount = '4px';  // –ü–æ–ø—Ä–æ–±—É–µ–º 3px (–±—ã–ª–æ 1.5px)

    for (let i = 0; i < bubbleCount; i++) {
        const size = 5 + Math.random() * 25;
        const left = Math.random() * 100;
        const delay = Math.random() * 5;
        const duration = 5 + Math.random() * 5;
        let opacity = 0.1 + Math.random() * 0.3; // –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å

        let individualStyle = '';

        if (Math.random() < blurProbability) {
            individualStyle += `filter: blur(${blurAmount});`;
            // ‚ú® 2. –ó–∞—Ç–µ–º–Ω—è–µ–º: –£–º–µ–Ω—å—à–∞–µ–º opacity –µ—â–µ —Å–∏–ª—å–Ω–µ–µ –¥–ª—è —Ä–∞–∑–º—ã—Ç—ã—Ö ‚ú®
            opacity = Math.max(0.02, opacity * 0.4); // –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 60%, –º–∏–Ω–∏–º—É–º 0.02 (–±—ã–ª–æ * 0.7)
        }

        bubblesHtml += `
            <div class="bubble" style="
                left: ${left}%;
                width: ${size}px;
                height: ${size}px;
                opacity: ${opacity};
                animation-delay: ${delay}s;
                animation-duration: ${duration}s;
                ${individualStyle}
            "></div>`;
    }
    bubblesHtml += '</div>';

    container.innerHTML = bubblesHtml;
}

/**
 * –ê–Ω–∏–º–∞—Ü–∏—è —Ä—ã–±–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–õ–æ–≥–æ–≤–æ –°–æ–ª—ë–Ω–æ–π –†—ã–±–∫–∏")
 */
function showFishLoading() {
    const overlay = document.getElementById('loading-overlay');
    if (!overlay) return;
    
    const loadingBox = overlay.querySelector('.loading-box');
    if (!loadingBox) return;
    
    loadingBox.classList.add('fish-loading');
    
    // –°–æ–∑–¥–∞—ë–º —Ä—ã–±–æ–∫
    const fishContainer = document.createElement('div');
    fishContainer.className = 'fish-container';
    
    const fishes = ['üêü', 'üê†', 'üê°', 'ü¶à', 'üêô'];
    
    for (let i = 0; i < 5; i++) {
        const fish = document.createElement('div');
        fish.className = 'swimming-fish';
        fish.textContent = fishes[i % fishes.length];
        fish.style.top = `${20 + i * 15}%`;
        fish.style.animationDelay = `${i * 0.5}s`;
        fish.style.animationDuration = `${4 + Math.random() * 2}s`;
        fishContainer.appendChild(fish);
    }
    
    loadingBox.appendChild(fishContainer);
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –∫–Ω–∏–≥–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Å—Ç–æ–º–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏.
 */
function showBookLoadingAnimation() {
    const container = document.getElementById('custom-loading-animation');
    if (!container) return;

    // HTML –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–Ω–∏–≥–∏ (–∏–∑ CSS)
    container.innerHTML = `
        <div class="page-loading-animation" style="min-height: auto;"> <div class="book">
                <div class="book__pg-shadow"></div>
                <div class="book__pg"></div>
                <div class="book__pg book__pg--2"></div>
                <div class="book__pg book__pg--3"></div>
                <div class="book__pg book__pg--4"></div>
                <div class="book__pg book__pg--5"></div>
            </div>
            <p style="margin-top: 1rem;">–ó–∞–≥—Ä—É–∑–∫–∞...</p> </div>
    `;
}

function showToast(message, type = 'info') {
    const container = document.getElementById('toast-container');
    if (!container) {
        console.log(`üîî [${type}]:`, message);
        return;
    }
    
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    
    const icons = {
        success: '‚úÖ',
        error: '‚ùå',
        warning: '‚ö†Ô∏è',
        info: '‚ÑπÔ∏è'
    };
    
    toast.innerHTML = `
        <span class="toast-icon">${icons[type] || icons.info}</span>
        <span class="toast-message">${escapeHtml(message)}</span>
    `;
    
    container.appendChild(toast);
    
    setTimeout(() => toast.classList.add('show'), 10);
    
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 300);
    }, 3000);
}

function escapeHtml(text) {
    if (!text) return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function formatNumber(num) {
    if (!num) return '0';
    return new Intl.NumberFormat('ru-RU').format(num);
}

function formatChapterText(text) {
    if (!text) return '';
    return text.split('\n')
        .map(p => p.trim() === '' ? '<br>' : `<p>${escapeHtml(p)}</p>`)
        .join('');
}

function truncateText(text, maxLength) {
    if (!text || text.length <= maxLength) return escapeHtml(text);
    return escapeHtml(text.substring(0, maxLength)) + '...';
}

function getNounEnding(number, one, two, five) {
    const n = Math.abs(number) % 100;
    const n1 = n % 10;
    if (n > 10 && n < 20) return five;
    if (n1 > 1 && n1 < 5) return two;
    if (n1 === 1) return one;
    return five;
}

function makeLinksClickable(text) {
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    return escapeHtml(text).replace(urlRegex, '<a href="$1" target="_blank" rel="noopener">$1</a>');
}

function normalizeChapterNumber(number) {
    const num = parseFloat(number);
    return isNaN(num) ? 0 : num;
}

function updateUserDisplay() {
    const loginBtn = document.getElementById('login-btn');
    const userInfoBlock = document.getElementById('user-info');
    const adminBtn = document.getElementById('admin-btn');

    if (!loginBtn || !userInfoBlock) {
        console.error("UI elements not found!");
        return;
    }

    if (STATE.currentUser) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        loginBtn.style.display = 'none';
        userInfoBlock.style.display = 'flex';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∏ –∞–≤–∞—Ç–∞—Ä
        const userNameEl = document.getElementById('user-name');
        const userAvatarEl = document.getElementById('user-avatar');
        
        if (userNameEl) userNameEl.textContent = STATE.currentUser.username;
        if (userAvatarEl) userAvatarEl.textContent = STATE.currentUser.username[0].toUpperCase();
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–µ–π
        const role = STATE.currentUser.role;
        
        // –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        if (adminBtn) {
            adminBtn.style.display = (role === 'admin' || role === 'owner') ? 'inline-flex' : 'none';
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É –¥–ª—è CSS
        document.documentElement.setAttribute('data-user-role', role);
        if (role === 'admin' || role === 'owner') {
            document.documentElement.classList.add('is-admin');
        }
        if (['creator', 'admin', 'owner'].includes(role)) {
            document.documentElement.classList.add('can-create');
        }

        // ‚ú® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –≤ –®–ê–ü–ö–ï ‚ú®
        const userAvatarHeader = document.querySelector('#user-info .user-icon'); // –ù–∞–π–¥–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –≤ —à–∞–ø–∫–µ
        if (userAvatarHeader) {
            if (STATE.currentUser.avatar_url) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å URL, —Å–æ–∑–¥–∞–µ–º img
                userAvatarHeader.innerHTML = `<img src="${escapeHtml(STATE.currentUser.avatar_url)}" alt="–ê–≤–∞—Ç–∞—Ä" class="header-avatar-image" onerror="this.onerror=null; this.src=''; this.innerHTML='üë§';">`; // –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–µ–π
            } else {
                // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                userAvatarHeader.innerHTML = '(¬∞„É≠¬∞) !'; // –¢–≤–æ—è –∑–∞–≥–ª—É—à–∫–∞
            }
        }
        // ‚ú® –ö–æ–Ω–µ—Ü –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –≤ —à–∞–ø–∫–µ ‚ú®
        
    } else {
        // –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        loginBtn.style.display = 'inline-flex';
        userInfoBlock.style.display = 'none';
        if (adminBtn) adminBtn.style.display = 'none';

        const userAvatarHeader = document.querySelector('#user-info .user-icon');
        if (userAvatarHeader) userAvatarHeader.innerHTML = '(¬∞„É≠¬∞) !'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã
        document.documentElement.classList.remove('is-admin', 'can-create');
        document.documentElement.removeAttribute('data-user-role');
    }
}

function checkUserPermission(action, novel) {
    if (!STATE.currentUser) return false;
    
    const userId = STATE.currentUser.user_id;
    const role = STATE.currentUser.role;
    
    // –í–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –≤—Å—ë
    if (userId === 0 || role === 'owner') return true;
    
    // –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –≤—Å—ë
    if (role === 'admin') return true;
    
    // –°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –Ω–æ–≤–µ–ª–ª—É
    if (action === 'edit' && novel && novel.creator_id === userId) return true;
    
    // –°–æ–∑–¥–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ
    if (action === 'create' && (role === 'creator' || role === 'admin')) return true;
    
    return false;
}

function toggleThemeMode() {
    const newMode = currentThemeMode === 'light' ? 'dark' : 'light';
    applyTheme(currentThemePalette, newMode);
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É –∏ —Ä–µ–∂–∏–º
 * @param {string} palette - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ª–∏—Ç—Ä—ã (classic, sunset, etc.)
 * @param {string} mode - –†–µ–∂–∏–º (light –∏–ª–∏ dark)
 */
function applyTheme(palette, mode) {
    const html = document.documentElement;
    html.setAttribute('data-theme', palette);
    html.setAttribute('data-mode', mode);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –Ω–∞ –∫–Ω–æ–ø–∫–µ
    const icon = document.querySelector('.theme-icon');
    if (icon) {
        icon.textContent = mode === 'dark' ? '‚òÄÔ∏è' : 'üåô';
    }

    // ‚ú® –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á—Ç–µ–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞) ‚ú®
    const readerThemeBtn = document.getElementById('reader-theme-toggle-btn');
    if (readerThemeBtn) {
        readerThemeBtn.textContent = mode === 'dark' ? '–¢–µ–º–∞: –°–≤–µ—Ç–ª–∞—è ‚òÄÔ∏è' : '–¢–µ–º–∞: –¢—ë–º–Ω–∞—è üåô';
    }
    // ‚ú® –ö–û–ù–ï–¶ ‚ú®

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    localStorage.setItem('novel-library-theme', palette);
    localStorage.setItem('novel-library-mode', mode);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    currentThemePalette = palette;
    currentThemeMode = mode;
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
 * @param {string} newPalette - –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã
 */
function setThemePalette(newPalette) {
    applyTheme(newPalette, currentThemeMode);
}

function applyAutoTheme() {
    const hour = new Date().getHours();
    // –° 7 —É—Ç—Ä–∞ –¥–æ 7 –≤–µ—á–µ—Ä–∞ - —Å–≤–µ—Ç–ª–∞—è, –∏–Ω–∞—á–µ - —Ç—ë–º–Ω–∞—è
    if (hour > 7 && hour < 19) {
        applyTheme('light');
    } else {
        applyTheme('dark');
    }
}

// ‚ú® –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
// –≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –≤–Ω—É—Ç—Ä–∏ setupEventListeners()
function setupThemeSwitcher() {
    const themeToggleBtn = document.getElementById('theme-toggle');
    const themeMenu = document.getElementById('theme-menu');
    if (!themeToggleBtn || !themeMenu) return;

    let longPressTimer;

    // –û–ë–´–ß–ù–´–ô –ö–õ–ò–ö: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ light/dark
    themeToggleBtn.addEventListener('click', toggleThemeMode);

    // –ü–†–ê–í–´–ô –ö–õ–ò–ö (–¥–ª—è –ü–ö): –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–∞–ª–∏—Ç—Ä
    themeToggleBtn.addEventListener('contextmenu', (e) => {
        e.preventDefault(); // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é –±—Ä–∞—É–∑–µ—Ä–∞
        themeMenu.classList.toggle('hidden');
    });

    // –î–û–õ–ì–û–ï –ù–ê–ñ–ê–¢–ò–ï (–¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤): –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–∞–ª–∏—Ç—Ä
    themeToggleBtn.addEventListener('touchstart', (e) => {
        longPressTimer = setTimeout(() => {
            e.preventDefault();
            themeMenu.classList.toggle('hidden');
        }, 500); // 500 –º—Å = 0.5 —Å–µ–∫—É–Ω–¥—ã
    });

    themeToggleBtn.addEventListener('touchend', () => {
        clearTimeout(longPressTimer);
    });

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é, –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É—Ç—å –∫—É–¥–∞-—Ç–æ –µ—â–µ
    document.addEventListener('click', (e) => {
        if (!themeToggleBtn.contains(e.target) && !themeMenu.contains(e.target)) {
            themeMenu.classList.add('hidden');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–Ω—É—Ç—Ä–∏ –º–µ–Ω—é –ø–∞–ª–∏—Ç—Ä
    document.querySelectorAll('.theme-option').forEach(button => {
        button.addEventListener('click', () => {
            const newPalette = button.dataset.theme;
            setThemePalette(newPalette);
            themeMenu.classList.add('hidden'); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        });
    });
}

function setupTagsInput(inputId, containerId, availableItems = []) {
    const input = document.getElementById(inputId);
    const container = document.getElementById(containerId);

    if (!input || !container) {
        return; // –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'keydown'
    input.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ Enter
            const value = this.value.trim();
            if (value) {
                addTag(value, container); // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—à–∫—É
                this.value = '';         // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            }
        }
    });
}

function addTag(value, container) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    const existing = Array.from(container.querySelectorAll('.selected-tag'))
        .find(tag => tag.dataset.value === value);
    
    if (existing) {
        showToast('–£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ', 'warning');
        return;
    }
    
    const tag = document.createElement('span');
    tag.className = 'selected-tag';
    tag.dataset.value = value;
    tag.innerHTML = `
        ${escapeHtml(value)} 
        <button type="button" onclick="removeTag(this)" class="remove-tag-btn">√ó</button>
    `;
    
    container.appendChild(tag);
}

function removeTag(button) {
    button.parentElement.remove();
}

async function checkNovelExists(title, author, excludeId = null) {
    const existing = STATE.novels.find(novel => 
        novel.title.toLowerCase().trim() === title.toLowerCase().trim() &&
        novel.author.toLowerCase().trim() === author.toLowerCase().trim() &&
        novel.novel_id !== excludeId
    );
    return !!existing;
}

/**
 * ‚ú® NEW: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã
 */
function setupAltTitlesInput() {
    const hiddenInput = document.getElementById('novel-alt-titles');
    const container = document.getElementById('alt-titles-container');
    const inputField = document.getElementById('alt-title-input');

    if (!hiddenInput || !container || !inputField) return;

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–ª–∞—à–∫–∞–º–∏ –∏–∑ —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const initialTitles = hiddenInput.value.split('|').map(t => t.trim()).filter(Boolean);
    initialTitles.forEach(title => createAltTitleTag(title, container, hiddenInput));

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ Enter
    inputField.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            addAltTitleTag();
        }
    });
}

/**
 * ‚ú® NEW: –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–≥ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
 */
function addAltTitleTag() {
    const inputField = document.getElementById('alt-title-input');
    const container = document.getElementById('alt-titles-container');
    const hiddenInput = document.getElementById('novel-alt-titles');

    if (!inputField || !container || !hiddenInput) return;

    const value = inputField.value.trim();
    if (value) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
        const currentTitles = hiddenInput.value.split('|').map(t => t.trim().toLowerCase());
        if (currentTitles.includes(value.toLowerCase())) {
            showToast('–¢–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ', 'warning');
            return;
        }

        createAltTitleTag(value, container, hiddenInput);
        inputField.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        updateHiddenAltTitlesInput(container, hiddenInput); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ
    }
}

/**
 * ‚ú® NEW: –°–æ–∑–¥–∞–µ—Ç DOM-—ç–ª–µ–º–µ–Ω—Ç (–ø–ª–∞—à–∫—É) –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
 */
function createAltTitleTag(value, container, hiddenInput) {
    const tag = document.createElement('span');
    tag.className = 'selected-tag alt-title-tag'; // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø. –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    tag.dataset.value = value;
    tag.innerHTML = `
        ${escapeHtml(value)}
        <button type="button" onclick="removeAltTitleTag(this)" class="remove-tag-btn">√ó</button>
    `;
    container.appendChild(tag);
}


/**
 * ‚ú® NEW: –£–¥–∞–ª—è–µ—Ç —Ç–µ–≥ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
 */
function removeAltTitleTag(button) {
    const container = document.getElementById('alt-titles-container');
    const hiddenInput = document.getElementById('novel-alt-titles');
    button.parentElement.remove();
    if (container && hiddenInput) {
        updateHiddenAltTitlesInput(container, hiddenInput); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ
    }
}

/**
 * ‚ú® NEW: –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ–≥–æ input'–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞—à–µ–∫ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
 */
function updateHiddenAltTitlesInput(container, hiddenInput) {
    const titles = Array.from(container.querySelectorAll('.selected-tag'))
        .map(tag => tag.dataset.value.trim()) // –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤
        .filter(Boolean); // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
    hiddenInput.value = titles.join(' | '); // –°–æ–µ–¥–∏–Ω—è–µ–º —á–µ—Ä–µ–∑ |
}

async function checkChapterNumberExists(novelId, chapterNumber, excludeId = null) {
    try {
        // –í—ã–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ 'checkChapterNumber' –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        const response = await apiRequest('checkChapterNumber', {
            novel_id: novelId,
            chapter_number: chapterNumber,
            exclude_chapter_id: excludeId
        }, true); // true - —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫—ç—à –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ

        // –°–µ—Ä–≤–µ—Ä –Ω–∞–ø—Ä—è–º—É—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –∏–ª–∏ false –≤ –ø–æ–ª–µ 'exists'
        if (response.success) {
            return response.exists;
        }
        return false; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç–∞ –Ω–µ—Ç

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ –≥–ª–∞–≤—ã:', error);
        return false; // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
}

function handleDeleteNovel(novelId) {
    showConfirmModal(
        'üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã',
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã? –ù–æ–≤–µ–ª–ª–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.\n–í—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—ë –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–°–æ–∑–¥–∞–Ω–Ω—ã–µ" –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.',
        () => deleteNovel(novelId)
    );
}

/**
 * ‚ú® –ù–û–í–ê–Ø –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã (–≤ –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –Ω–∞–≤—Å–µ–≥–¥–∞).
 */
async function deleteNovel(novelId, permanent = false) {
    const loadingTitle = permanent ? '–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ...' : '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É...';
    showLoading(true, { title: loadingTitle });
    
    try {
        const response = await apiPostRequest('deleteNovel', { 
            novelId: novelId, 
            permanent: permanent // –¢–µ–ø–µ—Ä—å —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        });
        
        if (response.success) {
            showToast(permanent ? '–ù–æ–≤–µ–ª–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞' : '–ù–æ–≤–µ–ª–ª–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É', 'success');
            clearCache();
            setTimeout(() => navigateTo('home'), 1000);
        } else {
            throw new Error(response.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
        }
    } catch (error) {
        showToast('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: ' + error.message, 'error');
    } finally {
        showLoading(false);
    }
}

/**
 * ‚ú® –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—à–∏–±–æ—á–Ω–æ–π –∑–∞–ø–∏—Å–∏. –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.
 */
function handleErrorNovelClick(novelId) {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –ø–æ —Å—Å—ã–ª–∫–µ
    if (event) event.preventDefault();
    
    showConfirmModal(
        '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–µ–ª–ª—ã',
        '–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç—Ç–æ–π –Ω–æ–≤–µ–ª–ª—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?',
        () => {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–î–∞", —É–¥–∞–ª—è–µ–º –æ—à–∏–±–æ—á–Ω—É—é –∑–∞–ø–∏—Å—å –Ω–∞–≤—Å–µ–≥–¥–∞
            deleteNovel(novelId, true); // true –æ–∑–Ω–∞—á–∞–µ—Ç –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        }
    );
}

function handleDeleteChapter(chapterId, chapterTitle) {
    // ‚ú® –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const title = chapterTitle ? ` "${chapterTitle}"` : '';
    showConfirmModal(
        'üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≥–ª–∞–≤—ã',
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤—É${title}?\n–û–Ω–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.`,
        () => deleteChapter(chapterId) // –í—ã–∑—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ö–µ–ª–ø–µ—Ä
    );
}

async function deleteChapter(chapterId) {
    showLoading(true, { title: '–£–¥–∞–ª–µ–Ω–∏–µ –≥–ª–∞–≤—ã' });
    
    try {
        const response = await apiPostRequest('deleteChapter', { 
            chapterId: chapterId, 
            permanent: false 
        });
        
        if (response.success) {
            showToast('–ì–ª–∞–≤–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É', 'success');
            clearCache();
            location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        } else {
            throw new Error(response.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
        }
    } catch (error) {
        showToast('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: ' + error.message, 'error');
    } finally {
        showLoading(false);
    }
}

function toggleReadingSettings() {
    let panel = document.getElementById('reading-settings-panel');

    // –ï—Å–ª–∏ –ø–∞–Ω–µ–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–µ
    if (!panel) {
       // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        // –ü–æ–ª—É—á–∞–µ–º ID –≥–ª–∞–≤—ã –∏–∑ URL, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –≤ createReadingSettingsPanel
        const currentChapterId = new URLSearchParams(window.location.search).get('id');
        // –ù–∞–º –Ω—É–∂–µ–Ω –í–ï–°–¨ –æ–±—ä–µ–∫—Ç –≥–ª–∞–≤—ã, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ ID.
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ window.currentChapterData (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ renderChapterReadPage)
        if (window.currentChapterData) {
            createReadingSettingsPanel(window.currentChapterData); // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≥–ª–∞–≤—ã
            panel = document.getElementById('reading-settings-panel');
        } else {
             console.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –≥–ª–∞–≤—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.");
             return; // –ù–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–∞–Ω–µ–ª—å –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
        }
        if (!panel) return;
    }

    const isVisible = panel.classList.toggle('show');

    // ‚ú® –£–±–∏—Ä–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–∫—Ä–æ–ª–ª–∞ –æ—Ç—Å—é–¥–∞, –æ–Ω –º–µ—à–∞–ª ‚ú®
    // window.removeEventListener('scroll', closeSettingsOnScroll);

    if (isVisible) {
        // ‚ú® –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –ë–ï–ó capture (false) ‚ú®
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ —Ç–µ–∫—É—â–∏–π –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
        setTimeout(() => {
            document.addEventListener('click', closeSettingsOnClickOutside);
            console.log('–î–æ–±–∞–≤–ª–µ–Ω —Å–ª—É—à–∞—Ç–µ–ª—å click –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        }, 0);
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π)
        window.addEventListener('scroll', closeSettingsOnScroll, { once: true });

    } else {
        removeSettingsListeners(); // –£–±–∏—Ä–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ
function closeSettingsOnClickOutside(event) {
    const panel = document.getElementById('reading-settings-panel');
    const button = document.querySelector('.reader-header-right button'); // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫

    console.log('–ö–ª–∏–∫ –≤–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', event.target); // –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –Ω–µ –ø–æ –ø–∞–Ω–µ–ª–∏ –∏ –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ
    if (panel && button && !panel.contains(event.target) && !button.contains(event.target)) {
        console.log('–ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å...');
        panel.classList.remove('show');
        removeSettingsListeners(); // –£–±–∏—Ä–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
function closeSettingsOnScroll() {
    const panel = document.getElementById('reading-settings-panel');
    if (panel) {
        panel.classList.remove('show');
        removeSettingsListeners();
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π
function removeSettingsListeners() {
    // ‚ú® –£–±–∏—Ä–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –ë–ï–ó capture (false) ‚ú®
    document.removeEventListener('click', closeSettingsOnClickOutside);
    window.removeEventListener('scroll', closeSettingsOnScroll); // –£–±–∏—Ä–∞–µ–º –∏ —Å–∫—Ä–æ–ª–ª
    console.log('–£–¥–∞–ª–µ–Ω—ã —Å–ª—É—à–∞—Ç–µ–ª–∏ click/scroll –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
}

function createReadingSettingsPanel(chapter) { // –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç chapter
    const settings = getReadingSettings();
    const isReadInitially = chapter.isRead || false; // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≥–ª–∞–≤—ã

    // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–π –≥–ª–∞–≤—ã –∏ –Ω–æ–≤–µ–ª–ª—ã
    const currentChapterId = chapter.chapter_id;
    const currentNovelId = chapter.novel_id;

    const panel = document.createElement('div');
    panel.id = 'reading-settings-panel';
    panel.className = 'reading-settings-panel';

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const markUnreadDisplay = isReadInitially ? 'block' : 'none';
    const markReadDisplay = isReadInitially ? 'none' : 'block';
    const initialStatusMessage = isReadInitially ? '–ì–ª–∞–≤–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–∞—è.' : '–ì–ª–∞–≤–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞.';

    panel.innerHTML = `
        <h3>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á—Ç–µ–Ω–∏—è</h3>

        <div class="setting-group">
            <label>–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞</label>
            <div class="font-size-controls">
                <button onclick="adjustFontSize(-2)">A-</button>
                <span id="font-size-display">${settings.fontSize}px</span>
                <button onclick="adjustFontSize(2)">A+</button>
            </div>
        </div>

        <div class="setting-group">
            <label>–®—Ä–∏—Ñ—Ç</label>
            <select id="font-family-select" onchange="changeFontFamily(this.value)">
                <option value="default" ${settings.fontFamily === 'default' ? 'selected' : ''}>–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</option>
                <option value="serif" ${settings.fontFamily === 'serif' ? 'selected' : ''}>Serif</option>
                <option value="sans-serif" ${settings.fontFamily === 'sans-serif' ? 'selected' : ''}>Sans-serif</option>
                <option value="monospace" ${settings.fontFamily === 'monospace' ? 'selected' : ''}>Monospace</option>
            </select>
        </div>

        <div class="setting-group">
            <label>–®–∏—Ä–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞</label>
            <select id="text-width-select" onchange="changeTextWidth(this.value)">
                <option value="narrow" ${settings.textWidth === 'narrow' ? 'selected' : ''}>–£–∑–∫–∏–π</option>
                <option value="medium" ${settings.textWidth === 'medium' ? 'selected' : ''}>–°—Ä–µ–¥–Ω–∏–π</option>
                <option value="wide" ${settings.textWidth === 'wide' ? 'selected' : ''}>–®–∏—Ä–æ–∫–∏–π</option>
                <option value="full" ${settings.textWidth === 'full' ? 'selected' : ''}>–ù–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É</option>
            </select>
        </div>

        <div class="setting-group">
            <label>–ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª</label>
            <select id="line-height-select" onchange="changeLineHeight(this.value)">
                <option value="1.4" ${settings.lineHeight === '1.4' ? 'selected' : ''}>–£–∑–∫–∏–π</option>
                <option value="1.6" ${settings.lineHeight === '1.6' ? 'selected' : ''}>–ù–æ—Ä–º–∞–ª—å–Ω—ã–π</option>
                <option value="1.8" ${settings.lineHeight === '1.8' ? 'selected' : ''}>–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π</option>
                <option value="2.0" ${settings.lineHeight === '2.0' ? 'selected' : ''}>–®–∏—Ä–æ–∫–∏–π</option>
            </select>
        </div>

        <div class="setting-group">
            <label>–¢–µ–º–∞</label>
            <button class="btn btn-secondary btn-sm" id="reader-theme-toggle-btn" onclick="toggleThemeMode()" style="width: 100%;">
                ${currentThemeMode === 'dark' ? '–¢–µ–º–∞: –°–≤–µ—Ç–ª–∞—è ‚òÄÔ∏è' : '–¢–µ–º–∞: –¢—ë–º–Ω–∞—è üåô'}
            </button>
        </div>

        <div class="setting-group">
            <label>–°—Ç–∞—Ç—É—Å —á—Ç–µ–Ω–∏—è</label>
            <button class="btn btn-secondary btn-sm" id="mark-as-unread-btn"
                    onclick="event.stopPropagation(); handleMarkAsUnread('${currentChapterId}', '${currentNovelId}')"
                    style="width: 100%; display: ${markUnreadDisplay};">
                ‚ùå –û—Ç–º–µ—Ç–∏—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π
            </button>
            <button class="btn btn-success btn-sm" id="mark-as-read-btn-panel"
                    onclick="event.stopPropagation(); handleMarkAsRead('${currentChapterId}', '${currentNovelId}')"
                    style="width: 100%; display: ${markReadDisplay};">
                 ‚úîÔ∏è –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π
            </button>
            <p id="read-status-message" style="text-align: center; font-size: 0.85em; color: var(--text-secondary); margin-top: 0.5em;">
                ${initialStatusMessage}
            </p>
        </div>

        <div class="setting-group">
            <label>
                <input type="checkbox" id="auto-scroll"
                       ${settings.autoScroll ? 'checked' : ''}
                       onchange="toggleAutoScroll(this.checked)">
                –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞
            </label>
        </div>

        <button class="btn btn-secondary btn-sm" onclick="resetReadingSettings()">
            –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        </button>
    `;

    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
    const headerRight = document.querySelector('.reader-header-right');
    if (headerRight) {
         headerRight.appendChild(panel);
    } else {
         console.error("Could not find '.reader-header-right' to append settings panel.");
    }
}

function getReadingSettings() {
    const defaults = {
        fontSize: 18,
        fontFamily: 'default',
        textWidth: 'medium',
        lineHeight: '1.6',
        autoScroll: false
    };
    
    const saved = localStorage.getItem('reading-settings');
    return saved ? { ...defaults, ...JSON.parse(saved) } : defaults;
}

function saveReadingSettings(settings) {
    localStorage.setItem('reading-settings', JSON.stringify(settings));
}

function applyReadingSettings(settings) {
    const text = document.getElementById('chapter-text');
    if (!text) return;
    
    text.style.fontSize = settings.fontSize + 'px';
    text.style.lineHeight = settings.lineHeight;
    
    const fontFamilies = {
        default: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
        serif: 'Georgia, "Times New Roman", serif',
        'sans-serif': 'Arial, Helvetica, sans-serif',
        monospace: '"Courier New", monospace'
    };
    text.style.fontFamily = fontFamilies[settings.fontFamily] || fontFamilies.default;
    
    const widths = {
        narrow: '600px',
        medium: '800px',
        wide: '1000px',
        full: '100%'
    };
    text.style.maxWidth = widths[settings.textWidth] || widths.medium;
}

function adjustFontSize(delta) {
    const settings = getReadingSettings();
    settings.fontSize = Math.max(12, Math.min(32, settings.fontSize + delta));
    
    const display = document.getElementById('font-size-display');
    if (display) display.textContent = settings.fontSize + 'px';
    
    saveReadingSettings(settings);
    applyReadingSettings(settings);
}

function changeFontFamily(family) {
    const settings = getReadingSettings();
    settings.fontFamily = family;
    saveReadingSettings(settings);
    applyReadingSettings(settings);
}

function changeTextWidth(width) {
    const settings = getReadingSettings();
    settings.textWidth = width;
    saveReadingSettings(settings);
    applyReadingSettings(settings);
}

function changeLineHeight(height) {
    const settings = getReadingSettings();
    settings.lineHeight = height;
    saveReadingSettings(settings);
    applyReadingSettings(settings);
}

function toggleAutoScroll(enabled) {
    const settings = getReadingSettings();
    settings.autoScroll = enabled;
    saveReadingSettings(settings);
    
    if (enabled) {
        startAutoScroll();
    } else {
        stopAutoScroll();
    }
}

let autoScrollInterval = null;

function startAutoScroll() {
    stopAutoScroll();
    autoScrollInterval = setInterval(() => {
        window.scrollBy(0, 1);
    }, 50);
}

function stopAutoScroll() {
    if (autoScrollInterval) {
        clearInterval(autoScrollInterval);
        autoScrollInterval = null;
    }
}

function resetReadingSettings() {
    localStorage.removeItem('reading-settings');
    const settings = getReadingSettings();
    applyReadingSettings(settings);
    
    document.getElementById('font-family-select').value = settings.fontFamily;
    document.getElementById('text-width-select').value = settings.textWidth;
    document.getElementById('line-height-select').value = settings.lineHeight;
    document.getElementById('auto-scroll').checked = settings.autoScroll;
    document.getElementById('font-size-display').textContent = settings.fontSize + 'px';
    
    showToast('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã', 'info');
}

//======================================================
// –û—Ç–º–µ—Ç–∏—Ç—å –≥–ª–∞–≤—É –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–π/–Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ–π –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
//======================================================

/**
 * ‚ú® –û–ë–ù–û–í–õ–ï–ù–û: –û—Ç–º–µ—á–∞–µ—Ç –≥–ª–∞–≤—É –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π (–≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
 */
async function handleMarkAsRead(chapterId, novelId, isAutomatic = false) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–Ω–æ–ø–∫–∏ –ò–ó –ü–ê–ù–ï–õ–ò –ù–ê–°–¢–†–û–ï–ö
    const markReadBtn = document.getElementById('mark-as-read-btn-panel');
    const markUnreadBtn = document.getElementById('mark-as-unread-btn'); // –ù—É–∂–Ω–∞ –∏ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!STATE.currentUser) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Å—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤—ã–∑–æ–≤–µ
        if (!isAutomatic) showToast('–î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', 'warning');
        return; // –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    }

    // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ–º —Å –∫–Ω–æ–ø–∫–æ–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤—ã–∑–æ–≤–µ
    if (!isAutomatic && markReadBtn) {
        markReadBtn.disabled = true;
        markReadBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
    } else if (!isAutomatic && !markReadBtn) {
        console.warn("handleMarkAsRead –≤—ã–∑–≤–∞–Ω –≤—Ä—É—á–Ω—É—é, –Ω–æ –∫–Ω–æ–ø–∫–∞ 'mark-as-read-btn-panel' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Å—Ç –ø—Ä–æ –≤—Ö–æ–¥, —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    }

    try {
        const response = await apiPostRequest('markChapterRead', { chapter_id: chapterId });

        if (response.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ ID
            if (window.readChapterIds && !window.readChapterIds.includes(chapterId)) {
                window.readChapterIds.push(chapterId);
            } else if (!window.readChapterIds) {
                window.readChapterIds = [chapterId]; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º UI –∫–Ω–æ–ø–æ–∫ –≤ –ø–∞–Ω–µ–ª–∏ (–≤—ã–∑–æ–≤–µ—Ç—Å—è –∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç. –∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ)
            updateMarkReadUnreadButtons(chapterId);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Å—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä—É—á–Ω–æ–º —É—Å–ø–µ—à–Ω–æ–º –≤—ã–∑–æ–≤–µ
            if (!isAutomatic) {
                showToast('–ì–ª–∞–≤–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–∞—è!', 'success');
            } else {
                 console.log(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º –¥–ª—è ${chapterId} —É—Å–ø–µ—à–Ω–∞.`);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–æ–≤–µ–ª–ª—ã (–µ—Å–ª–∏ –º—ã —Ç–∞–º)
            rerenderChapterListFromState();

            // –û—á–∏—â–∞–µ–º –∫—ç—à –Ω–æ–≤–µ–ª–ª—ã
            delete STATE.cache.data[`getNovel_${JSON.stringify({id: novelId})}`];

        } else {
            throw new Error(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å');
        }
    } catch (error) {
         // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤—ã–∑–æ–≤–µ
        if (!isAutomatic) {
            showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª —Ä—É—á–Ω–æ–π –≤—ã–∑–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (markReadBtn) {
                markReadBtn.textContent = '‚úîÔ∏è –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π';
                markReadBtn.disabled = false;
            }
        } else {
             console.error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º –¥–ª—è ${chapterId}:`, error);
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∏—Ö –≤ –Ω–æ—Ä–º. —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        updateMarkReadUnreadButtons(chapterId);
    }
}

/**
 * ‚ú® –û–ë–ù–û–í–õ–ï–ù–û: –û—Ç–º–µ—á–∞–µ—Ç –≥–ª–∞–≤—É –ù–ï–ü–†–û–ß–ò–¢–ê–ù–ù–û–ô
 */
async function handleMarkAsUnread(chapterId, novelId) {
    const markUnreadBtn = document.getElementById('mark-as-unread-btn');
    // –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π" —Ç–æ–∂–µ –Ω—É–∂–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    const markReadBtn = document.getElementById('mark-as-read-btn-panel');

    if (!STATE.currentUser || !markUnreadBtn) {
        showToast('–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏', 'warning');
        return;
    }

    markUnreadBtn.disabled = true;
    markUnreadBtn.textContent = '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';

    try {
        const response = await apiPostRequest('markChapterUnread', { chapter_id: chapterId });

        if (response.success) {
            showToast('–ì–ª–∞–≤–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–∞—è', 'success');

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö ID
            if (window.readChapterIds) {
                window.readChapterIds = window.readChapterIds.filter(id => id !== chapterId);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –ø–∞–Ω–µ–ª–∏
            updateMarkReadUnreadButtons(chapterId);

            // –û—á–∏—â–∞–µ–º –∫—ç—à –Ω–æ–≤–µ–ª–ª—ã
            delete STATE.cache.data[`getNovel_${JSON.stringify({id: novelId})}`];

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–æ–≤–µ–ª–ª—ã
            rerenderChapterListFromState();

        } else {
            throw new Error(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å');
        }
    } catch (error) {
        showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        markUnreadBtn.textContent = '‚ùå –û—Ç–º–µ—Ç–∏—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π';
        markUnreadBtn.disabled = false;
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
         updateMarkReadUnreadButtons(chapterId);
    }
}

/**
 * ‚ú® NEW: –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ"/"–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ" –≤ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
function updateMarkReadUnreadButtons(currentChapterId) {
    const markUnreadBtn = document.getElementById('mark-as-unread-btn');
    const markReadBtn = document.getElementById('mark-as-read-btn-panel');
    const statusMessage = document.getElementById('read-status-message');

    // –ï—Å–ª–∏ –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞, —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã
    if (!markUnreadBtn || !markReadBtn || !statusMessage) {
        // console.log("–ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á—Ç–µ–Ω–∏—è –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞, –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."); // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –≥–ª–∞–≤—ã
    const isRead = window.readChapterIds && window.readChapterIds.includes(currentChapterId);

    if (isRead) {
        markUnreadBtn.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–û—Ç–º–µ—Ç–∏—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π"
        markUnreadBtn.disabled = false;
        markUnreadBtn.textContent = '‚ùå –û—Ç–º–µ—Ç–∏—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π'; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
        markReadBtn.style.display = 'none';   // –°–∫—Ä—ã–≤–∞–µ–º "–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π"
        statusMessage.textContent = '–ì–ª–∞–≤–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–∞—è.';
    } else {
        markUnreadBtn.style.display = 'none';   // –°–∫—Ä—ã–≤–∞–µ–º "–û—Ç–º–µ—Ç–∏—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π"
        markReadBtn.style.display = 'block';  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π"
        markReadBtn.disabled = false;
        markReadBtn.textContent = '‚úîÔ∏è –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π'; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
        statusMessage.textContent = '–ì–ª–∞–≤–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞.';
    }
}

// –£–±–∏—Ä–∞–µ–º 'chapters' –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
async function loadAndDisplayReadingProgress(novelId) {
    try {
        const response = await apiRequest('getReadingProgress', { novel_id: novelId });

        // –ú—ã –±–æ–ª—å—à–µ –Ω–µ –∏—â–µ–º container, progressBar, progressText

        if (response.success) {
             // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ ID
            window.readChapterIds = response.read_chapters || [];

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –ø–∞–Ω–µ–ª–∏ (–µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞)
            const currentChapterId = new URLSearchParams(window.location.search).get('id');
            updateMarkReadUnreadButtons(currentChapterId);

            // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –≥–ª–∞–≤ (–ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞)
            rerenderChapterListFromState();

        } else {
             // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É—Å–ø–µ—à–µ–Ω, —Ç–æ–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
             window.readChapterIds = [];
             const currentChapterId = new URLSearchParams(window.location.search).get('id');
             updateMarkReadUnreadButtons(currentChapterId);
             rerenderChapterListFromState();
        }
    } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è:', error);
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
        window.readChapterIds = [];
        const currentChapterId = new URLSearchParams(window.location.search).get('id');
        updateMarkReadUnreadButtons(currentChapterId);
        rerenderChapterListFromState();
    }
}

//===========================================
//  –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢ –ò –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–ï–õ–õ –ù–ê –ü–û–õ–ö–£
//===========================================

/**
 * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function renderProfilePage() {
    const container = document.getElementById('page-content-container');
    if (!container || !STATE.currentUser) {
        container.innerHTML = `<div class="page-content profile-page"><p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...</p></div>`;
        return;
    }

    const canCreate = ['creator', 'admin', 'owner'].includes(STATE.currentUser.role);
    const breadcrumbs = getBreadcrumbs('profile');

    const avatarContent = STATE.currentUser.avatar_url
        ? `<img src="${escapeHtml(STATE.currentUser.avatar_url)}" alt="–ê–≤–∞—Ç–∞—Ä" class="profile-avatar-image" onerror="this.onerror=null; this.src=''; this.parentElement.innerHTML='<span class=\\'avatar-placeholder-emoji\\'>üë§</span>';">`
        : '<span class="avatar-placeholder-emoji">(_ _*) Z z z</span>';

    // ‚ú® –£–±–∏—Ä–∞–µ–º –≤–∫–ª–∞–¥–∫—É "–°–æ–∑–¥–∞–Ω–Ω—ã–µ", –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å ‚ú®
    const createdNovelsTabHtml = canCreate
        ? `<button class="tab-btn" onclick="switchProfileTab(this, 'created')">–°–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–µ–ª–ª—ã</button>`
        : '';

    const novelsContainerHTML = `
        <div class="tabs">
            <button class="tab-btn active" onclick="switchProfileTab(this, 'shelves')">–ú–æ–∏ –ø–æ–ª–∫–∏</button>
            ${createdNovelsTabHtml}
        </div>
        <div class="reading-lists-container">
            <div class="loading-spinner"><div class="spinner"></div></div>
        </div>
    `;

    container.innerHTML = `
        <div class="page-content profile-page">
            <div class="page-header profile-page-header">
                 ${breadcrumbs}
                 <button class="btn btn-secondary btn-sm profile-settings-btn" onclick="navigateTo('profile-settings')">
                     ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                 </button>
            </div>
            <div class="profile-header">
                <div class="profile-avatar-display">
                     ${avatarContent}
                </div>
                <div class="profile-info">
                    <h1 class="profile-username">
                        ${escapeHtml(STATE.currentUser.username)}
                        <span class="profile-user-id">(id: ${STATE.currentUser.user_id})</span>
                    </h1>
                    <p class="profile-email">${escapeHtml(STATE.currentUser.email || 'Email –Ω–µ —É–∫–∞–∑–∞–Ω')}</p>
                    <p class="profile-role">–°—Ç–∞—Ç—É—Å: ${getDisplayRoleName(STATE.currentUser.role)}</p>
                     </div>
                <button class="btn-logout-profile" onclick="handleLogout()">–í—ã–π—Ç–∏</button>
            </div>
            ${novelsContainerHTML}
        </div>
    `;

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ (–ø–æ–ª–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    await loadAndRenderReadingLists();
}

/**
 * ‚ú® NEW: –†–µ–Ω–¥–µ—Ä–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è —Å –≤–∫–ª–∞–¥–∫–∞–º–∏.
 */
async function renderProfileSettingsPage() {
    const container = document.getElementById('page-content-container');
    if (!container || !STATE.currentUser) {
        navigateTo('home'); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return;
    }

    // –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const breadcrumbs = getBreadcrumbs('profile-settings'); // –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å case –≤ getBreadcrumbs

    container.innerHTML = `
        <div class="page-content settings-page">
            ${breadcrumbs}
            <h1>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</h1>

            <div class="tabs settings-tabs">
                <button class="tab-btn active" onclick="switchSettingsTab(this, 'edit-profile')">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</button>
                <button class="tab-btn" onclick="switchSettingsTab(this, 'account')">‚öôÔ∏è –ê–∫–∫–∞—É–Ω—Ç</button>
                </div>

            <div class="settings-content-container">
                <div id="settings-tab-edit-profile" class="tab-content active">
                    <h3>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞</h3>
                    <div class="avatar-upload-section">
                        <div class="profile-avatar-container">
                             <div class="profile-avatar-display" id="profile-avatar-preview">
                                 </div>
                             <label for="avatar-upload-input" class="btn btn-secondary btn-sm change-avatar-btn" title="–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä">
                                 ‚úèÔ∏è
                                 <input type="file" id="avatar-upload-input" accept="image/*" style="display: none;">
                             </label>
                             <button id="delete-avatar-btn" class="btn btn-danger btn-sm delete-avatar-btn" title="–£–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä">
                                 üóëÔ∏è
                             </button>
                        </div>
                        <div class="avatar-upload-controls">
                             <p>–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–º–∞–∫—Å 5MB, JPG/PNG/GIF/WebP)</p>
                             <button id="upload-avatar-btn" class="btn btn-primary btn-sm upload-avatar-btn" style="display: none;">
                                 üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä
                             </button>
                             <small id="avatar-upload-hint" class="form-help"></small>
                        </div>
                    </div>
                     <hr class="section-divider">
                     <h3>–î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</h3>
                     <p class="text-muted">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ.</p>
                </div>

                <div id="settings-tab-account" class="tab-content">
                     <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞</h3>
                     <p class="text-muted">–ó–¥–µ—Å—å –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è) –∏ —Ç.–¥.</p>
                     <p>–í–∞—à Email: ${escapeHtml(STATE.currentUser.email || '–ù–µ —É–∫–∞–∑–∞–Ω')}</p>
                     <p>–í–∞—à ID: ${STATE.currentUser.user_id}</p>
                     <button class="btn btn-danger" onclick="handleLogout()">–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞</button>
                     </div>
            </div>
        </div>
    `;

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫ –∞–≤–∞—Ç–∞—Ä–∞ —Ç–µ–∫—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    const previewContainer = document.getElementById('profile-avatar-preview');
    const deleteBtn = document.getElementById('delete-avatar-btn');
    if (previewContainer && deleteBtn) {
        const avatarContent = STATE.currentUser.avatar_url
            ? `<img src="${escapeHtml(STATE.currentUser.avatar_url)}" alt="–ê–≤–∞—Ç–∞—Ä" class="profile-avatar-image" onerror="this.onerror=null; this.src=''; this.parentElement.innerHTML='<span class=\\'avatar-placeholder-emoji\\'>üë§</span>';">`
            : '<span class="avatar-placeholder-emoji">(_ _*) Z z z</span>';
        previewContainer.innerHTML = avatarContent;
        deleteBtn.style.display = STATE.currentUser.avatar_url ? 'inline-flex' : 'none'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
    setupAvatarUpload();
}

/**
 * ‚ú® NEW: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∫–ª–∞–¥–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
 */
function switchSettingsTab(button, tabName) {
    // –£–±–∏—Ä–∞–µ–º active —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.settings-tabs .tab-btn').forEach(btn => btn.classList.remove('active'));
    // –î–æ–±–∞–≤–ª—è–µ–º active –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    button.classList.add('active');

    // –ü—Ä—è—á–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–Ω—Ç—ã –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.settings-content-container .tab-content').forEach(content => {
        content.classList.remove('active'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å active
    });
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const activeContent = document.getElementById(`settings-tab-${tabName}`);
    if (activeContent) {
        activeContent.classList.add('active'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å
    }
}

/**
 * ‚ú® NEW: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞.
 */
function setupAvatarUpload() {
    const fileInput = document.getElementById('avatar-upload-input');
    const previewContainer = document.getElementById('profile-avatar-preview');
    const uploadBtn = document.getElementById('upload-avatar-btn');
    const deleteBtn = document.getElementById('delete-avatar-btn');
    const uploadHint = document.getElementById('avatar-upload-hint');

    if (!fileInput || !previewContainer || !uploadBtn || !deleteBtn) {
        console.warn("–≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        return;
    }

    let currentBase64 = null; // –•—Ä–∞–Ω–∏–º Base64 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    fileInput.addEventListener('change', async (event) => {
        const file = event.target.files[0];
        if (!file) {
            currentBase64 = null;
            uploadBtn.style.display = 'none'; // –ü—Ä—è—á–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–≤–∞—Ç–∞—Ä –∏–ª–∏ –∑–∞–≥–ª—É—à–∫—É
            const currentAvatarUrl = STATE.currentUser?.avatar_url;
            previewContainer.innerHTML = currentAvatarUrl
                ? `<img src="${escapeHtml(currentAvatarUrl)}" alt="–ê–≤–∞—Ç–∞—Ä" class="profile-avatar-image" onerror="this.onerror=null; this.src=''; this.parentElement.innerHTML='<span class=\\'avatar-placeholder-emoji\\'>üë§</span>';">`
                : '<span class="avatar-placeholder-emoji">(_ _*) Z z z</span>';
            return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!file.type.startsWith('image/')) {
            showToast('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.', 'error');
            fileInput.value = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞
            return;
        }
        if (file.size > 5 * 1024 * 1024) { // –õ–∏–º–∏—Ç 5MB –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
            showToast('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å 5MB).', 'error');
            fileInput.value = '';
            return;
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º fileToBase64 —Å–æ —Å–∂–∞—Ç–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ 400px, –∫–∞—á–µ—Å—Ç–≤–æ 0.8)
            currentBase64 = await fileToBase64(file, 400, 0.8);
            previewContainer.innerHTML = `<img src="${currentBase64}" alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" class="profile-avatar-image">`;
            uploadBtn.style.display = 'inline-block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if (uploadHint) uploadHint.textContent = `–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: ${file.name}`;
        } catch (error) {
            showToast('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' + error.message, 'error');
            fileInput.value = '';
            currentBase64 = null;
            uploadBtn.style.display = 'none';
            if (uploadHint) uploadHint.textContent = '';
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä"
    uploadBtn.addEventListener('click', async () => {
        if (!currentBase64) {
            showToast('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª', 'warning');
            return;
        }

        showLoading(true, { title: '–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞...' });
        uploadBtn.disabled = true;

        try {
            const response = await apiPostRequest('uploadAvatar', { avatar_base64: currentBase64 });
            if (response.success && response.avatar_url) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ localStorage
                STATE.currentUser.avatar_url = response.avatar_url;
                localStorage.setItem('currentUser', JSON.stringify(STATE.currentUser));
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —à–∞–ø–∫–µ)
                updateUserDisplay(); // –û–±–Ω–æ–≤–∏—Ç —à–∞–ø–∫—É
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
                previewContainer.innerHTML = `<img src="${escapeHtml(response.avatar_url)}" alt="–ê–≤–∞—Ç–∞—Ä" class="profile-avatar-image" onerror="this.onerror=null; this.src=''; this.parentElement.innerHTML='<span class=\\'avatar-placeholder-emoji\\'>üë§</span>';">`;
                currentBase64 = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º Base64
                uploadBtn.style.display = 'none'; // –ü—Ä—è—á–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                deleteBtn.style.display = 'inline-block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
                fileInput.value = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input file
                if (uploadHint) uploadHint.textContent = ''; // ‚ú® –û—á–∏—â–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            } else {
                throw new Error(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä');
            }
        } catch (error) {
            showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message, 'error');
        } finally {
            showLoading(false);
            uploadBtn.disabled = false;
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ "–£–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä"
    deleteBtn.addEventListener('click', () => {
        showConfirmModal('–£–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä?', '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞–≤–∞—Ç–∞—Ä?', async () => {
            showLoading(true, { title: '–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞...' });
            deleteBtn.disabled = true;
            try {
                const response = await apiPostRequest('deleteAvatar', {});
                if (response.success) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ localStorage
                    STATE.currentUser.avatar_url = null;
                    localStorage.setItem('currentUser', JSON.stringify(STATE.currentUser));
                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    updateUserDisplay(); // –û–±–Ω–æ–≤–∏—Ç —à–∞–ø–∫—É
                    previewContainer.innerHTML = '<span class="avatar-placeholder-emoji">(_ _*) Z z z</span>'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                    deleteBtn.style.display = 'none'; // –ü—Ä—è—á–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
                    fileInput.value = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input file
                    currentBase64 = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º Base64
                    uploadBtn.style.display = 'none'; // –ü—Ä—è—á–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    if (uploadHint) uploadHint.textContent = ''; // ‚ú® –û—á–∏—â–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É

                } else {
                    throw new Error(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä');
                }
            } catch (error) {
                showToast('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + error.message, 'error');
            } finally {
                showLoading(false);
                deleteBtn.disabled = false;
            }
        });
    });
}

/**
 * ‚ú® NEW: –†–µ–Ω–¥–µ—Ä–∏—Ç –Ω–æ–≤—É—é, –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –ø–æ–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –æ–±–ª–æ–∂–∫–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥ –Ω–µ–π)
 */
function renderShelfNovelCard(novel) {
    return `
        <div class="shelf-novel-item" onclick="navigateTo('novel-details', {id: '${novel.novel_id}'})">
            <div class="shelf-novel-cover">
                ${novel.cover_url ? 
                    `<img src="${escapeHtml(novel.cover_url)}" alt="${escapeHtml(novel.title)}" loading="lazy">` : 
                    '<div class="no-cover">üìö</div>'
                }
            </div>
            <p class="shelf-novel-title">${escapeHtml(novel.title)}</p>
        </div>
    `;
}

/**
 * ‚ú® NEW: –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–∫–µ–ª–µ—Ç–æ–Ω –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
 */
function renderShelfSkeletonCard() {
    return `
        <div class="shelf-novel-item skeleton-card">
            <div class="shelf-novel-cover skeleton"></div>
            <div class="shelf-novel-title skeleton skeleton-text"></div>
        </div>
    `;
}

/**
 * ‚ú® NEW: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–æ–≤–µ–ª–ª—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ø–æ–ª–∫—É
 */
function switchShelfView(shelfType, buttonElement) {
    // –°–Ω–∏–º–∞–µ–º –∫–ª–∞—Å—Å 'active' —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫-–ø–æ–ª–æ–∫
    document.querySelectorAll('.shelf-nav-btn').forEach(btn => btn.classList.remove('active'));
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å 'active' —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    buttonElement.classList.add('active');

    const contentContainer = document.querySelector('.shelves-content');
    if (!contentContainer) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–µ–ª–ª–∞—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª–∫–∏ (–æ–Ω–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ STATE)
    const shelfNovels = window.userShelves[shelfType] || [];
    const allNovelsData = STATE.novels;

    if (shelfNovels.length > 0) {
        const novelsToRender = shelfNovels.map(item => {
            return allNovelsData.find(n => n.novel_id === item.novel_id);
        }).filter(Boolean); // –£–±–∏—Ä–∞–µ–º –Ω–æ–≤–µ–ª–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã

        contentContainer.innerHTML = novelsToRender.map(novel => renderShelfNovelCard(novel)).join('');
    } else {
        contentContainer.innerHTML = '<p class="text-muted">–ù–∞ —ç—Ç–æ–π –ø–æ–ª–∫–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ.</p>';
    }
}

async function switchProfileTab(button, tabName) {
    document.querySelectorAll('.profile-page .tab-btn').forEach(btn => btn.classList.remove('active'));
    button.classList.add('active');

    const contentContainer = document.querySelector('.reading-lists-container');
    contentContainer.innerHTML = '<div class="loading-spinner"><div class="spinner"></div></div>';

    if (tabName === 'shelves') {
        // –í—ã–∑—ã–≤–∞–µ–º –í–ê–®–£ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await loadAndRenderReadingLists();
    } else if (tabName === 'created') {
        // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await renderProfileCreatedNovels();
    }
}

async function renderProfileCreatedNovels() {
    const container = document.querySelector('.reading-lists-container');
    try {
        const response = await apiRequest('getMyCreatedNovels', {});
        if (!response.success) throw new Error(response.error);

        const { novels } = response;
        if (novels.length > 0) {
            container.innerHTML = `<div class="novels-grid">${novels.map(n => renderNovelCard(n)).join('')}</div>`;
        } else {
            // ‚ú® –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ‚ú®
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤–µ–ª–ª—ã
            const canCreate = ['creator', 'admin', 'owner'].includes(STATE.currentUser.role);
            
            let emptyHtml = '<p>–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –Ω–æ–≤–µ–ª–ª—ã.</p>';
            if (canCreate) {
                // –ï—Å–ª–∏ –º–æ–∂–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                emptyHtml += `<button class="btn btn-primary" style="margin-top: 1rem;" onclick="navigateTo('add-novel')">
                                –°–æ–∑–¥–∞—Ç—å?
                            </button>`;
            }
            container.innerHTML = `<div class="text-muted">${emptyHtml}</div>`;
        }
    } catch (error) {
        container.innerHTML = `<p class="text-danger">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–µ–ª–ª—ã: ${error.message}</p>`;
    }
}

/**
 * ‚ú® REWRITTEN: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–Ω–∏–∂–Ω—ã—Ö –ø–æ–ª–æ–∫ –≤ –Ω–æ–≤–æ–º –¥–≤—É—Ö–∫–æ–ª–æ–Ω–æ—á–Ω–æ–º –¥–∏–∑–∞–π–Ω–µ
 */
async function loadAndRenderReadingLists() {
    const container = document.querySelector('.reading-lists-container');
    if (!container) return;

    // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω—ã, –ø–æ–∫–∞ –≥—Ä—É–∑—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ
    container.innerHTML = `
        <div class="shelves-layout">
            <nav class="shelves-nav">
                <div class="skeleton" style="width: 80%; height: 2rem; margin-bottom: 0.5rem;"></div>
                <div class="skeleton" style="width: 70%; height: 2rem; margin-bottom: 0.5rem;"></div>
                <div class="skeleton" style="width: 90%; height: 2rem; margin-bottom: 0.5rem;"></div>
            </nav>
            <div class="shelves-content">
                ${Array(6).fill(null).map(() => renderShelfSkeletonCard()).join('')}
            </div>
        </div>
    `;

    try {
        const response = await apiRequest('getReadingLists', {});
        if (!response.success) throw new Error(response.error);

        const { lists } = response;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–æ–∫ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –∏—Ö —Å–Ω–æ–≤–∞
        window.userShelves = lists; 

        const listTypes = {
            reading: '–ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å',
            want_to_read: '–•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å',
            completed: '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ',
            favorite: '–õ—é–±–∏–º–æ–µ',
            dropped: '–ë—Ä–æ—à–µ–Ω–æ'
        };

        // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ (–Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø–æ–ª–∫–∞–º)
        const navHtml = Object.entries(listTypes).map(([type, title], index) => {
            const count = lists[type]?.length || 0;
            return `<button class="shelf-nav-btn ${index === 0 ? 'active' : ''}" 
                            onclick="switchShelfView('${type}', this)">
                        ${title} <span class="shelf-count">${count}</span>
                    </button>`;
        }).join('');
        
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–ª–∫—É ("–ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å")
        const initialShelfNovels = lists.reading || [];
        const novelsToRender = initialShelfNovels.map(item => {
            return STATE.novels.find(n => n.novel_id === item.novel_id);
        }).filter(Boolean);

        const contentHtml = novelsToRender.length > 0
            ? novelsToRender.map(novel => renderShelfNovelCard(novel)).join('')
            : '<p class="text-muted">–ù–∞ —ç—Ç–æ–π –ø–æ–ª–∫–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ.</p>';

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
        container.innerHTML = `
            <div class="shelves-layout">
                <nav class="shelves-nav">${navHtml}</nav>
                <div class="shelves-content">${contentHtml}</div>
            </div>
        `;

    } catch (error) {
        container.innerHTML = `<p class="text-danger">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–∫–∏: ${error.message}</p>`;
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–µ–ª–ª—ã –≤ —Å–ø–∏—Å–æ–∫
 */
async function handleAddToReadingList(novelId, listType) {
    event.preventDefault(); // –û—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç–æ, —á—Ç–æ–±—ã —Å—Å—ã–ª–∫–∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–ª–∞ —Å—Ä–∞–∑—É
    if (!STATE.currentUser) {
        showToast('–î–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏', 'warning');
        return;
    }

    try {
        const response = await apiPostRequest('addToReadingList', {
            novel_id: novelId,
            list_type: listType
        });
        if (!response.success) throw new Error(response.error);

        clearCache(); // –û—á–∏—â–∞–µ–º –∫—ç—à –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

        // --- –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É ---
        setTimeout(() => location.reload(), 1000);
        // ---------------------------------------------

    } catch (error) {
        showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
    }
    // finally –±–ª–æ–∫ –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –º—ã —É—Ö–æ–¥–∏–º –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–µ–ª–ª—ã –∏–∑ —Å–ø–∏—Å–∫–æ–≤
 */
/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–µ–ª–ª—ã –∏–∑ —Å–ø–∏—Å–∫–æ–≤
 */
async function handleRemoveFromReadingList(novelId) {
    event.preventDefault(); // –û—Å—Ç–∞–≤–ª—è–µ–º
    if (!STATE.currentUser) {
        showToast('–î–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏', 'warning');
        return;
    }

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    showConfirmModal(
        '–£–±—Ä–∞—Ç—å —Å –ø–æ–ª–æ–∫?',
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å —ç—Ç—É –Ω–æ–≤–µ–ª–ª—É —Å–æ –≤—Å–µ—Ö —Å–≤–æ–∏—Ö –∫–Ω–∏–∂–Ω—ã—Ö –ø–æ–ª–æ–∫?',
        async () => {
            try {
                const response = await apiPostRequest('removeFromReadingList', { novel_id: novelId });
                if (!response.success) throw new Error(response.error);

                clearCache();

                // --- –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É ---
                setTimeout(() => location.reload(), 1000);
                // ---------------------------------------------

            } catch (error) {
                showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
            }
            // finally –±–ª–æ–∫ –Ω–µ –Ω—É–∂–µ–Ω
        }
    );
}

// ==========================================
// –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø - EMAIL/–ü–ê–†–û–õ–¨
// ==========================================

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
 */
function showLogin() {
    document.getElementById('auth-container').style.display = 'flex';
    document.getElementById('registration-container').style.display = 'none';
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 */
function showRegistration() {
    document.getElementById('auth-container').style.display = 'none';
    document.getElementById('registration-container').style.display = 'flex';
}

/**
 * –í—Ö–æ–¥ –ø–æ email –∏ –ø–∞—Ä–æ–ª—é
 */
async function handleEmailLogin() {
    const email = document.getElementById('auth-email').value.trim();
    const password = document.getElementById('auth-password').value;
    
    if (!email || !password) {
        showToast('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'warning');
        return;
    }
    
    try {
        showLoading(true, { title: '–í—Ö–æ–¥...' });
        
        // ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú apiRequest –∏ –ü–†–ê–í–ò–õ–¨–ù–û–ï –ù–ê–ó–í–ê–ù–ò–ï 'loginWithEmail'
        const response = await apiRequest('loginWithEmail', {
            email: email,
            password: password
        },  true); // –¢—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä true –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∫—ç—à–∞
        
        // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (response && response.success && response.user) {
            
            // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ô –ö–õ–Æ–ß 'session_token'
            localStorage.setItem('session_token', response.session_token);
            localStorage.setItem('currentUser', JSON.stringify(response.user));
            
            // ‚ú® –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–µ–ª–∏
            localStorage.setItem('userRole', response.user.role);
            localStorage.setItem('userFeatures', JSON.stringify(response.user.features || []));

            STATE.currentUser = response.user;
            
            updateUserDisplay();
            hideModal('auth-modal');
            showToast('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ' + response.user.username + '!', 'success');

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            setTimeout(() => {
                window.location.reload();
            }, 500);

        } else {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤–µ—Ä–Ω—É–ª —Å–µ—Ä–≤–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
            showToast('–û—à–∏–±–∫–∞: ' + (response.error || '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'), 'error');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        // –≠—Ç–∞ –æ—à–∏–±–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ —Å–∞–º –∑–∞–ø—Ä–æ—Å apiRequest —É–ø–∞–¥–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–π–º–∞—É—Ç)
        showToast('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 'error');
    } finally {
        showLoading(false);
    }
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function handleRegistration() {
    const username = document.getElementById('reg-username').value.trim();
    const email = document.getElementById('reg-email').value.trim();
    const password = document.getElementById('reg-password').value;
    
    if (!username || !email || !password) {
        showToast('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'warning');
        return;
    }
    
    if (password.length < 6) {
        showToast('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤', 'warning');
        return;
    }
    
    try {
        showLoading(true, { title: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...' });
        
        const response = await apiRequest('registerWithEmail', {
            username: username,
            email: email,
            password: password
        });
        
        if (response.success) {
            showToast('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.', 'success');
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
            document.getElementById('registration-container').style.display = 'none';
            document.getElementById('auth-container').style.display = 'flex';
            
            // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º email
            document.getElementById('auth-email').value = email;
            
        } else {
            showToast('–û—à–∏–±–∫–∞: ' + response.error, 'error');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        showToast('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', 'error');
    } finally {
        showLoading(false);
    }
}

/**
 * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
 */
async function handleLogout() {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    const session_token = localStorage.getItem('session_token');

    // ‚úÖ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    localStorage.removeItem('session_token');
    localStorage.removeItem('currentUser');
    localStorage.removeItem('userRole'); // –¢–∞–∫–∂–µ —á–∏—Å—Ç–∏–º —Ä–æ–ª—å
    localStorage.removeItem('userFeatures'); // –∏ –ø—Ä–∞–≤–∞
    STATE.currentUser = null;
    clearCache(); // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–∞–Ω–Ω—ã—Ö
    
    // ‚úÖ –í —Ñ–æ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã –æ–Ω —Ç–æ–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª —Å–µ—Å—Å–∏—é.
    // –ù–∞–º –Ω–µ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º await.
    if (session_token) {
        apiRequest('logout', { session_token })
            .catch(e => console.warn('–§–æ–Ω–æ–≤—ã–π –≤—ã—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è:', e));
    }

    showToast('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...', 'info');

    // ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –ø–æ–ª—Å–µ–∫—É–Ω–¥—ã.
    // –≠—Ç–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
    setTimeout(() => {
        window.location.href = window.location.origin + window.location.pathname; // –ß–∏—Å—Ç—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º
        setTimeout(() => window.location.reload(), 200);
    }, 500);
}

/**
 * ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∏–¥–∂–µ—Ç–æ–º Telegram –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
 * –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ (–Ω–µ –≤–Ω—É—Ç—Ä–∏ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π).
 */
window.onTelegramAuth = async function(user) {
    console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç –≤–∏–¥–∂–µ—Ç–∞ Telegram:', user);
    showLoading(true, { title: '–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram...' });

    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram (–≤–∫–ª—é—á–∞—è 'hash') –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        // –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ 'authenticateTelegram'.
        const response = await apiRequest('authenticateTelegram', user);

        if (response && response.success && response.user) {
            // –≠—Ç–∞ —Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞, —á—Ç–æ –∏ –≤ handleEmailLogin
            
            localStorage.setItem('session_token', response.session_token);
            localStorage.setItem('currentUser', JSON.stringify(response.user));
            localStorage.setItem('userRole', response.user.role);
            localStorage.setItem('userFeatures', JSON.stringify(response.user.features || []));

            STATE.currentUser = response.user;
            
            updateUserDisplay();
            hideModal('auth-modal'); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            showToast('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ' + response.user.username + '!', 'success');

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            setTimeout(() => {
                window.location.reload();
            }, 500);

        } else {
            // –°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—Ö–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–≤–µ—Ä–Ω—ã–π hash)
            throw new Error(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏. –°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –¥–∞–Ω–Ω—ã–µ.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram (onTelegramAuth):', error);
        showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
        showLoading(false); // –ü—Ä—è—á–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
 */
async function handleShareNovel(novelId) {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–º–µ–Ω—ë–Ω —Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
    showLoading(true, { title: '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–∞...' });
    try {
        const response = await apiRequest('getNovel', { id: novelId }, true);
        if (!response.success) throw new Error(response.error);

        renderShareModal(response.novel); // –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é, —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    } catch (error) {
        showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
    } finally {
        showLoading(false);
    }
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
 */
function renderShareModal(novel) {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    const existingModal = document.getElementById('share-modal');
    if (existingModal) {
        existingModal.remove();
    }

    const modal = document.createElement('div');
    modal.id = 'share-modal';
    modal.className = 'modal show visible'; 

    const shareUrl = `${window.location.origin}${window.location.pathname}?page=novel-details&id=${novel.novel_id}`;

    let accessInfoHtml = '';
    if (novel.access_type === 'public') {
        accessInfoHtml = '<p>üåç –≠—Ç–∞ –Ω–æ–≤–µ–ª–ª–∞ –ø—É–±–ª–∏—á–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º.</p>';
    } else if (novel.access_type === 'link_only') {
        accessInfoHtml = '<p>üîó –õ—é–±–æ–π, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞, –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —ç—Ç—É –Ω–æ–≤–µ–ª–ª—É.</p>';
    } else if (novel.access_type === 'private') {
        accessInfoHtml = '<p>üîí –≠—Ç—É –Ω–æ–≤–µ–ª–ª—É –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º.</p>';
    }

    modal.innerHTML = `
        <div class="modal-content large-modal">
            <button class="close-btn" onclick="document.getElementById('share-modal').remove()">√ó</button>
            <h2>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–≤–µ–ª–ª–æ–π</h2>

            <div class="tabs">
                <button class="tab-btn active" onclick="switchShareTab(this, 'link')">–°—Å—ã–ª–∫–∞</button>
                <button class="tab-btn" onclick="switchShareTab(this, 'access')">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º</button>
            </div>

            <div id="share-tab-link" class="share-tab-content active">
                <h4>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</h4>
                <div class="share-link-container">
                    <input type="text" class="form-input" value="${shareUrl}" readonly id="share-url-input">
                    <button class="btn btn-secondary" onclick="copyToClipboard('#share-url-input')">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
                </div>
                ${accessInfoHtml}
            </div>

            <div id="share-tab-access" class="share-tab-content">
                <h4>–í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</h4>
                <div class="add-permission-form">
                    <input type="search" id="user-search-input-share" class="form-input" placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ email...">
                    <select id="permission-level-select" class="form-select">
                        <option value="read">–ß–∏—Ç–∞—Ç–µ–ª—å</option>
                        <option value="edit">–†–µ–¥–∞–∫—Ç–æ—Ä</option>
                    </select>
                    <button class="btn btn-primary" onclick="grantUserPermission('${novel.novel_id}')">–í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø</button>
                </div>
                <div id="permissions-list">
                    <div class="loading-spinner"><div class="spinner"></div></div>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    loadNovelPermissions(novel.novel_id);
    setupUserSearchAutocomplete('user-search-input-share');
}

// ‚ú® –ù–£–ñ–ù–û –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ –≤ –º–æ–¥–∞–ª–∫–µ ‚ú®
function setupUserSearchAutocomplete(inputId) {
    const searchInput = document.getElementById(inputId);
    if (!searchInput) return;

    let autocompleteList = null;
    let debounceTimer = null;

    searchInput.addEventListener('input', function() {
        const query = this.value.trim();

        if (autocompleteList) {
            autocompleteList.remove();
            autocompleteList = null;
        }
        if (debounceTimer) clearTimeout(debounceTimer);
        if (query.length < 2) return;

        debounceTimer = setTimeout(async () => {
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                const response = await apiRequest('searchUserForPermission', { query });
                if (searchInput.value.trim() !== query) return; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
                if (!response.success || response.users.length === 0) return;

                autocompleteList = document.createElement('div');
                autocompleteList.className = 'autocomplete-list'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–ª–∞—Å—Å
                autocompleteList.style.width = searchInput.offsetWidth + 'px';

                response.users.forEach(user => {
                    const item = document.createElement('div');
                    item.className = 'autocomplete-item';
                    item.innerHTML = `
                        <div class="autocomplete-title">${highlightMatch(user.username, query)}</div>
                        ${user.email ? `<div class="autocomplete-author">${highlightMatch(user.email, query)}</div>` : ''}
                    `;
                    item.addEventListener('click', () => {
                        searchInput.value = user.email || user.username; // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º email –∏–ª–∏ –∏–º—è
                        if (autocompleteList) autocompleteList.remove();
                        autocompleteList = null;
                    });
                    autocompleteList.appendChild(item);
                });

                searchInput.parentElement.appendChild(autocompleteList); // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            }
        }, 300);
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
    document.addEventListener('click', (e) => {
        if (!searchInput.contains(e.target) && autocompleteList) {
            autocompleteList.remove();
            autocompleteList = null;
        }
    });
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∫–ª–∞–¥–∫–∏ –≤ –æ–∫–Ω–µ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
 */
function switchShareTab(button, tabName) {
    const modal = document.getElementById('share-modal');
    if (!modal) return;
    
    modal.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    button.classList.add('active');
    
    modal.querySelectorAll('.share-tab-content').forEach(content => content.classList.remove('active'));
    document.getElementById(`share-tab-${tabName}`).classList.add('active');
}

/**
 * –í—ã–¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
 */
async function grantUserPermission(novelId) {
    const input = document.getElementById('user-search-input-share');
    const permissionSelect = document.getElementById('permission-level-select');
    const query = input.value.trim();
    const permission = permissionSelect.value;

    if (!query) {
        showToast('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'warning');
        return;
    }
    
    showLoading(true, { title: '–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...' });
    try {
        const searchResponse = await apiRequest('searchUserForPermission', { query });
        if (!searchResponse.success || searchResponse.users.length === 0) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
        
        const targetUser = searchResponse.users[0];
        
        const grantResponse = await apiPostRequest('grantPermission', {
            novelId,
            targetUserId: targetUser.user_id,
            permission
        });
        
        if (!grantResponse.success) throw new Error(grantResponse.error);
        
        showToast(`–î–æ—Å—Ç—É–ø ¬´${permission}¬ª –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUser.username}`, 'success');
        loadNovelPermissions(novelId);
        input.value = '';

    } catch (error) {
        showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
    } finally {
        showLoading(false);
    }
}

/**
 * –ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
 */
function copyToClipboard(selector) {
    const input = document.querySelector(selector);
    if (input) {
        input.select();
        document.execCommand('copy');
        showToast('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
    }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º
 */
async function loadNovelPermissions(novelId) {
    const listContainer = document.getElementById('permissions-list');
    try {
        const response = await apiRequest('getNovelPermissions', { novelId });
        if (!response.success) throw new Error(response.error);

        if (response.permissions.length === 0) {
            listContainer.innerHTML = '<p class="text-muted">–í—ã –µ—â–µ –Ω–∏–∫–æ–º—É –Ω–µ –≤—ã–¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø.</p>';
            return;
        }

        listContainer.innerHTML = response.permissions.map(p => `
            <div class="permission-item">
                <span>${escapeHtml(p.username)} (${escapeHtml(p.email || '–Ω–µ—Ç email')}) - <i>${p.permission}</i></span>
                <button class="btn btn-sm btn-danger" onclick="revokeUserPermission('${novelId}', ${p.user_id})">–û—Ç–æ–∑–≤–∞—Ç—å</button>
            </div>
        `).join('');

    } catch (error) {
        listContainer.innerHTML = `<p class="text-danger">–û—à–∏–±–∫–∞: ${error.message}</p>`;
    }
}

/**
 * –û—Ç–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function revokeUserPermission(novelId, userId) {
    showConfirmModal('–û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø?', '–í—ã —É–≤–µ—Ä–µ–Ω—ã?', async () => {
        showLoading(true, { title: '–û—Ç–∑—ã–≤ –¥–æ—Å—Ç—É–ø–∞...' });
        try {
            const response = await apiPostRequest('revokePermission', { novelId, targetUserId: userId });
            if (!response.success) throw new Error(response.error);
            showToast('–î–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω', 'success');
            loadNovelPermissions(novelId);
        } catch (error) {
            showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
        } finally {
            showLoading(false);
        }
    });
}

// ==========================================
// –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// ==========================================

// ‚úÖ –ù–û–í–´–ô –ö–û–î:
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
} else {
    initializeApp();
}

console.log('‚úÖ Script.js –ü–û–õ–ù–ê–Ø –≤–µ—Ä—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞!');